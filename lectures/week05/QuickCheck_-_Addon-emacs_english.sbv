0:00:01.680,0:00:05.040
Welcome back for probably a very short video.

0:00:05.040,0:00:10.880
So, I want to try out something on the one hand,
I had these problems (yesterday) with my setup, that

0:00:10.880,0:00:15.920
the interactive buffer was always slowing down,
which I usually don't have on my local machine,

0:00:15.920,0:00:20.720
but somehow during the recording it occurs,
so I want to try something else as a test.

0:00:20.720,0:00:24.400
And at the same time, there are two or
three things more that I wanted to say

0:00:24.400,0:00:28.720
about QuickCheck, and that I forgot
in the other short video before.

0:00:28.720,0:00:30.640
So, let me use this opportunity.

0:00:32.000,0:00:33.360
Okay, so recap.

0:00:33.360,0:00:37.920
We had this sorting function, which
was first incorrect, and we fixed it.

0:00:37.920,0:00:43.680
And we had these equations for
expressing properties of this function.

0:00:43.680,0:00:48.160
And I talked about this paradigm shift not
only in programming, but also in testing.

0:00:48.160,0:00:53.120
So, instead of writing unit tests,
the declarative approach of Haskell

0:00:53.680,0:00:58.560
encourages thinking about equations,
because everything is an expression, so we can

0:00:59.120,0:01:04.160
express behaviour, or semantics of our
program by talking about equations.

0:01:04.160,0:01:08.240
And so it's good practice to instead of just
writing unit tests, write down properties in the

0:01:08.240,0:01:13.520
form of equations, and then have, for example,
QuickCheck or other tools, try to populate the

0:01:13.520,0:01:17.440
input data with random choices, for example,
and then check that these properties hold.

0:01:17.440,0:01:21.440
And we also saw that we get counter
examples if some property does not hold.

0:01:22.720,0:01:26.000
One thing I didn't show
before was how to interpret,

0:01:26.000,0:01:31.040
or how the output will look like if you have
more than one thing over which you quantify.

0:01:31.040,0:01:34.240
Right, I showed some examples of these properties.

0:01:34.240,0:01:38.880
And when they failed, we got the input
list which made the property fail.

0:01:38.880,0:01:43.840
But I didn't show you what happens, or how it
is to be seen, if we have more than one input.

0:01:43.840,0:01:45.280
And that might be irrelevant,

0:01:45.280,0:01:49.120
because in order to-, you might also have
to write functions of several parameters.

0:01:49.120,0:01:54.000
And then you also have to be able to interpret
the counter example, If more than one input point.

0:01:54.000,0:01:55.600
Okay, so that's one thing I want to show.

0:01:56.160,0:02:00.000
And first, and I'm not doing this
by making a bug in the program,

0:02:00.000,0:02:03.520
I'm actually going to do this by
simply introducing a wrong property.

0:02:03.520,0:02:08.640
So, let's take this last property, I could run all
the properties now and the check would be okay.

0:02:08.640,0:02:13.360
But let me somehow destroy the last line
to write something which is nonsense.

0:02:14.160,0:02:22.080
So, if I now run this, I should get
that there is a counter example.

0:02:22.080,0:02:23.120
Okay, let's do this.

0:02:23.840,0:02:26.240
Let's call the interpreter here.

0:02:31.280,0:02:33.680
And let's run the test suite.

0:02:34.240,0:02:37.200
Then first, we have several things that are okay.

0:02:37.200,0:02:42.720
Right, you see this, the first four
properties are okay, they all pass 100 tests.

0:02:42.720,0:02:44.880
And then we see a "Failed".

0:02:45.600,0:02:48.000
It says that it failed after
three tests and two shrinks,

0:02:48.000,0:02:50.400
we'll also look at what the shrinking means here.

0:02:50.400,0:02:52.480
But let's first interpret the outcome.

0:02:52.480,0:02:53.500
And what do we get?

0:02:53.500,0:02:54.640
Here we get two lists.

0:02:55.680,0:02:59.360
And that corresponds to the fact that
this property which is failing has

0:02:59.360,0:03:02.960
two input values, xs and ys.

0:03:02.960,0:03:06.240
The way to interpret this here
is a counter example, right is

0:03:06.240,0:03:10.320
that the first thing that is printed is
the first parameter from the property.

0:03:10.320,0:03:13.600
And the second thing is the second,
probably different properties.

0:03:13.600,0:03:15.120
When you see something like this, it means

0:03:15.120,0:03:20.800
xs equals the empty list, ys equals this
list, one zero, violates this property.

0:03:20.800,0:03:24.800
And indeed, if you were to now run the
left-hand side, the right-hand side of these two

0:03:26.320,0:03:30.160
input data here, we would see
that they are not the same thing,

0:03:30.160,0:03:32.960
because the sorting function is correct,
but this property is nonsense.

0:03:33.920,0:03:38.160
Okay, so this was one thing I wanted to
show, simply how this has to be interpreted.

0:03:38.160,0:03:40.320
Then about the shrinking,
how can we see what happens here?

0:03:40.320,0:03:44.720
I mentioned, before, that QuickCheck
always tries to find small counter examples.

0:03:44.720,0:03:47.120
So, even if the first example, it finds

0:03:47.120,0:03:50.960
is bigger, it tries smaller ones,
because first it starts with random data.

0:03:52.160,0:03:58.800
So, the hope is, for QuickCheck and also for the
users that you get meaningful small count exams,

0:03:58.800,0:04:00.720
because they are usually better for debugging.

0:04:00.720,0:04:03.600
So, once you have a violation of a
property, you want to know what is wrong.

0:04:03.600,0:04:04.560
Is the property wrong?

0:04:04.560,0:04:05.600
Is the program wrong?

0:04:05.600,0:04:08.320
And attach more data for this.

0:04:08.320,0:04:14.160
And you can see this in action if you
replace quickCheck again by verboseCheck,

0:04:14.160,0:04:21.760
because then we will see what exactly was tested.

0:04:23.760,0:04:30.800
Here, let me make this a bit bigger and where
maybe in this case, we didn't see much shrinking,

0:04:31.360,0:04:35.760
because actually, by happenstance, the first
thing that was found as a counterexample

0:04:36.320,0:04:38.000
is already a very small case.

0:04:39.120,0:04:42.320
But that was random luck.

0:04:42.320,0:04:43.440
So, let's try this again.

0:04:44.240,0:04:46.640
And then for example, we see if we go back,

0:04:47.440,0:04:53.920
that the first right here, for example,
the first thing, the first input pair

0:04:53.920,0:04:58.480
that failed the property was this one,
which was obtained by random sampling.

0:04:58.480,0:04:58.980
Okay.

0:04:59.360,0:05:02.960
And then this is something that

0:05:04.080,0:05:08.080
QuickCheck could also have already shown:
The property is wrong for these two inputs.

0:05:08.080,0:05:11.920
Of course, this would maybe take a bit
too much thinking to see what's wrong.

0:05:11.920,0:05:16.080
So, actually, QuickCheck is now trying
to find a smaller counter example.

0:05:16.080,0:05:19.200
So, for example, you see here in the next
step apparently it simply tried, well,

0:05:19.200,0:05:23.040
what if I replaced the first list by the
empty list, is it still a counter example?

0:05:23.040,0:05:24.160
And this also failed.

0:05:24.160,0:05:26.960
So, now QuickCheck will use
this as a counter example.

0:05:26.960,0:05:29.600
Then it tries, well, maybe I can also make the

0:05:29.600,0:05:32.080
second list into an empty
list, it will still fail.

0:05:32.080,0:05:33.200
So, next, try this.

0:05:33.200,0:05:34.960
But this unfortunately passed.

0:05:34.960,0:05:36.960
So, this is not a good counter example.

0:05:36.960,0:05:40.320
So, this so far is the best counter
example that QuickCheck has found.

0:05:41.040,0:05:44.720
And well, then try some other things.

0:05:44.720,0:05:51.200
So, for example, it tries this list, but this also
passes, then it tries this list, but-, and this-,

0:05:51.200,0:05:57.120
yeah right, shortens this but it then tries
the second half of this list, but this passed,

0:05:57.120,0:06:02.800
so it tries the first half of the list, this
failed, so it is the new best counter example.

0:06:04.000,0:06:07.120
And then it tries again, to make this smaller,

0:06:07.120,0:06:09.600
so empty list, empty list
actually has been tested before.

0:06:09.600,0:06:15.920
So, of course, it passes again, then tries maybe
if I make-, it takes the second part of this list,

0:06:15.920,0:06:20.720
but it also passes, so it cannot be a small
counter example, et cetera, et cetera.

0:06:20.720,0:06:25.120
So, then the system tries-.

0:06:25.120,0:06:27.680
What other ways could I make this example simpler?

0:06:27.680,0:06:32.080
So, apparently it tried to instead
of minus one, what if I use just one.

0:06:32.880,0:06:35.760
Is it still a counter example?

0:06:35.760,0:06:36.560
Yes, it is.

0:06:36.560,0:06:39.120
And then probably also tries
to get rid of the minus three.

0:06:39.680,0:06:44.880
And at some point, it realized, well, [0,3] passes.

0:06:44.880,0:06:46.240
So, this is not a counter example.

0:06:47.680,0:06:52.160
But minus two also fails, et cetera.

0:06:52.160,0:06:59.520
And then at some point,
QuickCheck decides, well,

0:06:59.520,0:07:04.320
this is the smallest counter example I can find,
the smallest in the sense that it is a short list,

0:07:04.320,0:07:08.240
at least the first is empty, and the
second one has only two elements.

0:07:08.240,0:07:12.080
And it also has tried to make the
values small, it couldn't take zero

0:07:12.080,0:07:15.200
and one because that would have passed
but it can take zero and minus one.

0:07:15.200,0:07:16.960
And that somehow is the conceptually

0:07:16.960,0:07:22.880
smallest counter example, to the
property that we claimed but was wrong.

0:07:23.600,0:07:25.680
And of course, usually, you don't see all

0:07:25.680,0:07:28.960
these immediate steps because we use
quickCheck instead of verboseCheck.

0:07:28.960,0:07:32.000
But well, at least in these
points that you can see how hard

0:07:32.960,0:07:35.120
QuickCheck has tried to find
a small counter example.

0:07:35.120,0:07:40.320
So, it didn't encounter this first pair of lists,
which each had four elements after five tests,

0:07:40.320,0:07:42.320
and then it performed several shrinkings,

0:07:42.320,0:07:47.040
and ultimately, it reached this
as its best counter example.

0:07:47.040,0:07:50.800
And this will be shown then, for
example, in order to-, if one of your

0:07:52.160,0:07:55.920
functions violates a property
that we expect of your solution.

0:07:56.880,0:07:58.000
Okay.

0:07:58.000,0:08:01.600
And of course, I wouldn't actually
write this wrong property here.

0:08:01.600,0:08:06.160
So, let me go back to the correct
property and then you can check it.

0:08:07.440,0:08:12.480
This one is, of course, correct.

0:08:16.320,0:08:17.760
I have to reload, of course.

0:08:19.280,0:08:20.720
Then I run it.

0:08:21.280,0:08:24.080
And this is correct again.

0:08:24.080,0:08:28.000
But now you also know how these counter examples

0:08:28.560,0:08:37.520
come about and are presented to
you inside the tool, for example.
