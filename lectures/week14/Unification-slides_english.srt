55 # slide
00:00:01,879 --> 00:00:06,020
Let us first talk about unification, then.

00:00:06,020 --> 00:00:12,320
And in some sense, as already mentioned, this
can be seen as the Prolog version of Haskell's

00:00:12,320 --> 00:00:18,010
pattern matching, but actually an enhanced
version of pattern matching, as we will see.

00:00:18,010 --> 00:00:24,820
Because it has to deal with two-way matching.

56 # slide
00:00:24,820 --> 00:00:27,599
So, let us consider this example.

00:00:27,599 --> 00:00:32,149
So, above here you'll see a Prolog program,
which corresponds to Haskell program of course,

00:00:32,149 --> 00:00:33,470
but that's not really the point here.

00:00:33,470 --> 00:00:38,440
We have these two clauses, one is the fact,
and one is a rule.

00:00:38,440 --> 00:00:45,800
And we see here as an example, a query in
which we have three specific terms as the

00:00:45,800 --> 00:00:46,800
arguments.

00:00:46,800 --> 00:00:49,240
And the question is whether this query is
true or false.

00:00:49,240 --> 00:00:50,240
Therefore, whether it's satisfied.

00:00:50,240 --> 00:00:52,030
There are no variables inside here.

00:00:52,030 --> 00:00:53,210
That's the point of this first example.

00:00:53,210 --> 00:00:58,890
So, we have concrete values here, concrete
data and rules and facts with variables.

00:00:58,890 --> 00:01:07,220
Okay, so as we have already discussed, when
we discussed the intuitive definition or way

00:01:07,220 --> 00:01:14,969
of operational semantics, operational behaviour
in Prolog, we mentioned that we first have

00:01:14,969 --> 00:01:18,299
to find which fact or rule is applicable.

00:01:18,299 --> 00:01:22,130
And we can already see here that, for example,
the first fact does not apply to this query

00:01:22,130 --> 00:01:27,899
simply because here we have a zero and here,
we have s (s (0)) Yes, just like in function

00:01:27,899 --> 00:01:32,560
definition in Haskell, you would say the first
rule, the first equation does not apply because

00:01:32,560 --> 00:01:34,340
it has a pattern mismatch, okay?

00:01:34,340 --> 00:01:37,420
But what about the second rule?

00:01:37,420 --> 00:01:41,210
Well, the head of the second rule actually
matches the query?

00:01:41,210 --> 00:01:51,659
Because we can set or interpret the XS (S
(0)), the YS (S (0)) and the Z(S(S(S(0))))

00:01:51,659 --> 00:01:52,659
right?

00:01:52,659 --> 00:01:53,659
Because these matches.

00:01:53,659 --> 00:01:57,219
We have the S here, the Y is a variable so
it doesn't really matter what would in fact

00:01:57,219 --> 00:02:00,359
be the second argument here and the third
argument of S of something, and this is also

00:02:00,359 --> 00:02:07,509
S of something so defined an assignment if
you wish for the X, Y, and Z.

00:02:07,509 --> 00:02:08,509
Okay?

00:02:08,509 --> 00:02:13,510
And then the idea was well then, this rule
is applicable and we can reduce this query

00:02:13,510 --> 00:02:18,350
to the right-hand side, to the body of the
chosen rule.

00:02:18,350 --> 00:02:22,890
And that of course means that the knowledge
about what X, Y, and Z are from this matching

00:02:22,890 --> 00:02:25,510
will now be used in the right-hand side.

00:02:25,510 --> 00:02:31,880
So, we will replace this literal from the
query, by the right-hand side, part of the instantiation

00:02:31,880 --> 00:02:34,260
for XYZ as just identified.

00:02:34,260 --> 00:02:40,010
Yeah, so in that sense we take away one S
each from the first and last argument because

00:02:40,010 --> 00:02:41,430
we have X, Y, Z here.

00:02:41,430 --> 00:02:46,050
Okay, that's why this S disappears and this
S disappears.

00:02:46,050 --> 00:02:49,280
Okay, and then this will go on a few more
times, right?

00:02:49,280 --> 00:02:53,570
So, again, actually this query would
match this last rule because of the

00:02:53,570 --> 00:02:58,150
S of something, which does not match the first
rule, so you would again do the same kind

00:02:58,150 --> 00:03:02,680
of trip and get to this place, to this query.

00:03:02,680 --> 00:03:07,570
Now, the last for the rule would not anymore
apply because now we have S of zero, S of

00:03:07,570 --> 00:03:11,300
something in the pattern here, but zero in
the argument position.

00:03:11,300 --> 00:03:18,300
But now of course, luckily the first clause
applies namely this fact, by realizing that

00:03:18,300 --> 00:03:24,900
it's okay to match this query against this
fact because indeed these two argument positions

00:03:24,900 --> 00:03:25,900
are the same, right?

00:03:25,900 --> 00:03:29,600
That is something that now has to be checked
that wasn't a necessity in Haskell because

00:03:29,600 --> 00:03:34,651
in Haskell, you wouldn't even have in the function
definition something we have here.

00:03:34,651 --> 00:03:36,480
We have the same variable twice, okay?

00:03:36,480 --> 00:03:38,090
But here, this is the case X and S.

00:03:38,090 --> 00:03:44,210
So, this applies this fact exactly because
these two are the same and zero is zero.

00:03:44,210 --> 00:03:48,880
Okay, and then this is replaced by the right-hand
side, but there isn't a right-hand side.

00:03:48,880 --> 00:03:52,850
So, this is simply the empty query which is
nothing else than true.

00:03:52,850 --> 00:03:57,320
Because remember a query is a conjunction
of several things, separated by commas if

00:03:57,320 --> 00:04:00,420
there are more than one and an empty conjunction
is just true.

00:04:00,420 --> 00:04:06,470
So, that's why and how this would resolve,
okay?

00:04:06,470 --> 00:04:10,380
By basically doing pattern-matching using
these rules and this additional knowledge

00:04:10,380 --> 00:04:14,790
that X and S must be the same until you end
here, okay?

00:04:14,790 --> 00:04:18,160
Which is the case here.

57 # slide
00:04:18,160 --> 00:04:27,160
Okay, but what then for a case where unlike
in Haskell, we have a variable in the query

00:04:27,160 --> 00:04:28,350
as well, right?

00:04:28,350 --> 00:04:33,170
That's something where pure pattern-matching
doesn't work anymore.

00:04:33,170 --> 00:04:39,190
Yes, you can of course still see that the first
clause is not applicable because of the zero

00:04:39,190 --> 00:04:40,820
and the S of something.

00:04:40,820 --> 00:04:45,310
But when you want to check whether the second
clause is applicable or whether the head

00:04:45,310 --> 00:04:51,910
of this rule can be used for resolving the
query, then we suddenly have this strange

00:04:51,910 --> 00:04:56,660
situation that we don't have something more
specific in the query than in the program.

00:04:56,660 --> 00:04:58,240
Yes, so it's not really pattern-matching.

00:04:58,240 --> 00:04:59,770
It’s not like S of S of something.

00:04:59,770 --> 00:05:03,540
And then you see where S of Z matches because
Z could be the something.

00:05:03,540 --> 00:05:09,230
No, now suddenly we have something less determined
in the query, for example, the variable.

00:05:09,230 --> 00:05:14,820
Then it's not clear how to reduce it, you
can't say when we take one S away from this

00:05:14,820 --> 00:05:16,410
N, as in the previous slide.

00:05:16,410 --> 00:05:18,120
Because the N is just a variable.

00:05:18,120 --> 00:05:24,660
Okay, so we have to do something more in some
sense, we need a form of bi-directional pattern

00:05:24,660 --> 00:05:26,250
matching.

00:05:26,250 --> 00:05:31,610
Previously, we matched something more concrete
to something abstract involving variables

00:05:31,610 --> 00:05:32,700
in the program.

00:05:32,700 --> 00:05:35,889
Now also can have the real situation.

00:05:35,889 --> 00:05:38,560
Where the thing in the query is more abstract.

00:05:38,560 --> 00:05:44,510
Yes, less knowledge upfront about the end,
then about the third position in this second

00:05:44,510 --> 00:05:45,560
rule here, okay?

00:05:45,560 --> 00:05:52,030
So, we have to do this bi-directionally, we
have to also figure out and propagate bindings.

00:05:52,030 --> 00:05:56,530
Because now if you, for example, decide whether
the N should be something of the form S of

00:05:56,530 --> 00:06:02,669
that, for example, then for example, this
N could also have appeared in another literal

00:06:02,669 --> 00:06:08,040
in the same query, then we need to propagate
this information from one place to another.

00:06:08,040 --> 00:06:13,960
So, it's really more and more involved a
process than simply pattern-matching of one

00:06:13,960 --> 00:06:18,580
term, one expression against one function
definition left inside.

00:06:18,580 --> 00:06:26,080
Well, what it actually boils down to is determining
and propagating information about when two

00:06:26,080 --> 00:06:30,930
terms, both possibly involving variables, are
equal or can be made equal.

00:06:30,930 --> 00:06:32,580
Because here these are not equal, right?

00:06:32,580 --> 00:06:36,740
But we can make them equal by deciding that
N should be S of M for example.

00:06:36,740 --> 00:06:37,740
Okay.

00:06:37,740 --> 00:06:41,370
So, this is what unification is about.

00:06:41,370 --> 00:06:49,830
To that end, let's first discuss what this notion
of equal could be.

58 # slide
00:06:49,830 --> 00:06:53,620
If we don't have variables, it's actually
pretty simple.

00:06:53,620 --> 00:06:57,100
So, then we simply compare the terms as they
are, right?

00:06:57,100 --> 00:07:01,520
So, a constant is equal to itself, but not
to any other constant.

00:07:01,520 --> 00:07:06,290
And if you have structure data, then they
must not to be equal.

00:07:06,290 --> 00:07:11,850
Two terms must really be structured equally
or have the same atoms at the same positions.

00:07:11,850 --> 00:07:15,340
Also, we really have to respect the order.

00:07:15,340 --> 00:07:19,190
So, we don't have sets of arguments, we have
lists of arguments.

00:07:19,190 --> 00:07:23,800
So, it's not enough to have the three same atoms
appearing in a term, they really have to be

00:07:23,800 --> 00:07:25,240
at the same places.

00:07:25,240 --> 00:07:30,740
That's why the first two things are indeed cases
of equal terms, ground terms are the variables,

00:07:30,740 --> 00:07:32,190
whereas the last thing is not.

00:07:32,190 --> 00:07:34,810
So, this is structure equality.

00:07:34,810 --> 00:07:40,460
And that also means, in terms of arithmetics,
that we don't do any computations at this

00:07:40,460 --> 00:07:41,460
point.

00:07:41,460 --> 00:07:46,330
As I said, it’s already been mentioned before
that terms, even arithmetic terms are always

00:07:46,330 --> 00:07:55,020
treated completely structural in Prolog unless
we do actual explicit computation with this

00:07:55,020 --> 00:07:56,020
is-predicate.

00:07:56,020 --> 00:07:57,020
Okay?

00:07:57,020 --> 00:08:00,520
But if you ask whether two terms are equal,
well, of course the numbers five and two are

00:08:00,520 --> 00:08:01,540
not equal, obviously.

00:08:01,540 --> 00:08:04,130
But also, the terms five and two plus three
are not equal.

00:08:04,130 --> 00:08:08,530
This is the point about syntactic treatment
of all terms, right?

00:08:08,530 --> 00:08:10,560
There's no computation going on.

00:08:10,560 --> 00:08:14,500
Indeed, two plus three is also just a structural
term like this, right?

00:08:14,500 --> 00:08:15,981
Binary operator which could be written like
this.

00:08:15,981 --> 00:08:22,160
This is two arguments, not some real semantic
expression that evaluates to five.

00:08:22,160 --> 00:08:23,160
Okay?

00:08:23,160 --> 00:08:28,090
So, the point about ground terms on the basis
is that we have structural equality and no

00:08:28,090 --> 00:08:29,949
evaluation is going on.

00:08:29,949 --> 00:08:34,720
Comparison is really comparing the terms,
the structure and positions of, and names

00:08:34,720 --> 00:08:40,230
of atoms in the term.

59 # slide
00:08:40,230 --> 00:08:47,520
If you do have variables, then the idea is
simply to look for solutions where we substitute

00:08:47,520 --> 00:08:54,320
these variables, by some terms such that afterwards,
the terms are really again structurally equal.

00:08:54,320 --> 00:08:59,760
So, if you have something like this example here,
then of course these terms per se, are not

00:08:59,760 --> 00:09:04,330
equal because we have differences in this
position and in this position.

00:09:04,330 --> 00:09:08,040
But since the blue things are variables, they
could be replaced by something.

00:09:08,040 --> 00:09:11,390
And if you can consistently replace them,
such that afterwards, the terms are really

00:09:11,390 --> 00:09:18,940
again, really structurally equal, then that's
good enough to also have a solution or to

00:09:18,940 --> 00:09:24,029
interpret this as a way to make these two
terms equal.

00:09:24,029 --> 00:09:25,029
Okay?

00:09:25,029 --> 00:09:28,110
So, for example, you could say in this case
it's the only solution, actually.

00:09:28,110 --> 00:09:34,470
You could say that we substitute this atom
for this variable and this 11 atom for this

00:09:34,470 --> 00:09:35,470
variable.

00:09:35,470 --> 00:09:37,430
And afterwards they are equal, right?

00:09:37,430 --> 00:09:42,010
After the substitution, the terms are obviously
equal.

00:09:42,010 --> 00:09:46,910
So, what we're looking for is this information,
and that's very simple in this case, but of

00:09:46,910 --> 00:09:52,620
course can be more complicated to find out
in more interesting or deeply nested cases,

00:09:52,620 --> 00:09:53,620
for example.

00:09:53,620 --> 00:09:58,000
Or if you have several occurrences of these
variables.

60 # slide
00:09:58,000 --> 00:10:06,550
So, here are a few more rather simple cases
still in each of these lines, it shouldn't

00:10:06,550 --> 00:10:10,940
be difficult to write down what the variables
have to be substituted by, right?

00:10:10,940 --> 00:10:15,610
Like in case we have exactly one variable
occurring in one of the two sides only, then

00:10:15,610 --> 00:10:17,120
this is still unidirectional.

00:10:17,120 --> 00:10:20,560
But in general, like here, we will have variables
on both sides.

00:10:20,560 --> 00:10:26,510
And then we also have to find values for all
the variables here on both sides.

00:10:26,510 --> 00:10:27,801
And, even in this case

00:10:27,801 --> 00:10:30,570
it wouldn't be complicated, likewise here.

00:10:30,570 --> 00:10:35,420
And in the last case, the important thing
here is that in order to make this equal,

00:10:35,420 --> 00:10:41,130
we have to replace X by a structural term
of the form, something plus one; like Y plus

00:10:41,130 --> 00:10:42,130
one.

00:10:42,130 --> 00:10:47,250
So, it's not a question about substituting
this with five and four because five is four

00:10:47,250 --> 00:10:48,250
plus one.

00:10:48,250 --> 00:10:55,459
No, we have to find a structural solution,
which would be X must be exactly Y plus one

00:10:55,459 --> 00:10:58,170
and not some specific number.

00:10:58,170 --> 00:10:59,290
Okay?

00:10:59,290 --> 00:11:06,740
So, that's a small detail to keep in mind here
to not get into the trap of working with concrete

00:11:06,740 --> 00:11:08,750
numbers and additions, et cetera.

00:11:08,750 --> 00:11:09,750
Okay?

00:11:09,750 --> 00:11:13,230
And then there's something else which is also
a bit more tricky than the simple examples

00:11:13,230 --> 00:11:14,230
up here.

00:11:14,230 --> 00:11:16,550
Namely, when we have list structures, right?

00:11:16,550 --> 00:11:23,680
So, we can also have situations like this
where we now want to know, is it possible

00:11:23,680 --> 00:11:25,450
to make these two lists equal?

00:11:25,450 --> 00:11:29,750
And if so, what would be the values for X,
Y, and Z.

00:11:29,750 --> 00:11:37,589
Well, it's probably, not too complicated
to see that probably X could be 'the' and Y

00:11:37,589 --> 00:11:44,820
could be 'dog' because then we find an agreement
between these two sublists, but then we have

00:11:44,820 --> 00:11:48,779
to be a bit more careful with what the Z
should be because that can't simply be this

00:11:48,779 --> 00:11:52,400
list because then it wouldn't be the tail
of this first list, right?

00:11:52,400 --> 00:11:58,170
So, if you look at this here and if you think
in terms of types, then that should be a list

00:11:58,170 --> 00:11:59,170
of lists of something.

00:11:59,170 --> 00:12:06,899
Yes, we will see here just another entry in
the outer list.

00:12:06,899 --> 00:12:07,899
Okay?

00:12:07,899 --> 00:12:15,380
The point here being that if we need to decide
equalities like this, then it's important

00:12:15,380 --> 00:12:19,490
to be aware again, of how list syntax in
Prolog works, right?

00:12:19,490 --> 00:12:27,330
So, one strategy could be to always translate
all such lists, expressions, list terms into

00:12:27,330 --> 00:12:34,089
for example, this very systematic rotation,
that is the last thing here.

00:12:34,089 --> 00:12:40,060
The tree representation and then we have simple
terms like up here that we can compare.

00:12:40,060 --> 00:12:48,089
But with some practising, it's also possible
to actually see the answer for X, Y, Z here,

00:12:48,089 --> 00:12:51,920
just from the syntax that is given here.

00:12:51,920 --> 00:12:56,980
Without first in your mind translating
them to terms of this form.

00:12:56,980 --> 00:12:58,209
Okay?

00:12:58,209 --> 00:13:02,959
Then there's another possible problem.

00:13:02,959 --> 00:13:09,600
For example, since variables can appear both
on left- and right-hand side, we could in principle

00:13:09,600 --> 00:13:12,030
also have questions like this.

00:13:12,030 --> 00:13:17,180
So, is it possible that P (X) = p (q(x))?

00:13:17,180 --> 00:13:20,240
And well, there's at least two possible answers.

00:13:20,240 --> 00:13:25,890
One answer would be no, that doesn't make
sense because however X is Q of X would be

00:13:25,890 --> 00:13:30,580
bigger or they can't be equal as arguments
of P or of course you could also have the

00:13:30,580 --> 00:13:35,560
interpretation where then X must be an infinite
nesting of Q, then it suddenly works again.

00:13:35,560 --> 00:13:41,380
And these are two separate interpretations
and an algorithm for deciding such equalities

00:13:41,380 --> 00:13:44,200
has to make a choice here.

00:13:44,200 --> 00:13:47,339
And this choice is called the “occurs check”.

00:13:47,339 --> 00:13:49,589
For Prolog, it's an implementation detail.

00:13:49,589 --> 00:13:55,709
So, actually, Prolog, for efficiency reasons,
does usually not prevent cases like this.

00:13:55,709 --> 00:14:01,080
So, Prolog would actually accept
that this is an equality that's considered

00:14:01,080 --> 00:14:03,310
to be true.

00:14:03,310 --> 00:14:08,660
That is sort of nice from a semantics perspective,
if you want to reason about programs and actually

00:14:08,660 --> 00:14:10,980
in Prolog, you can usually in an

00:14:10,980 --> 00:14:15,660
Implementation also use a switch for the
interpreter to actually enforce that something

00:14:15,660 --> 00:14:20,079
like this is prevented so that we can't have
an X occurring in something by which it is

00:14:20,079 --> 00:14:21,079
going to be replaced.

00:14:21,079 --> 00:14:24,240
Yes, which would be the situation here.

00:14:24,240 --> 00:14:28,880
In all the exercise tasks, et cetera, we also
take this cleaner approach.

00:14:28,880 --> 00:14:37,519
So, it is, if we ask you to answer questions
like this, you won't have to do what Prolog

00:14:37,519 --> 00:14:38,560
does in this case.

00:14:38,560 --> 00:14:45,700
Yes, this will not be -, you will not
run into this.

61 # slide
00:14:45,700 --> 00:14:46,700
Okay.

00:14:46,700 --> 00:14:52,940
Let's look at some other cases that do not
have a solution, but not for the reasons seen

00:14:52,940 --> 00:14:54,050
on the previous slide.

00:14:54,050 --> 00:14:58,440
So, for example, you could have terms like
this, and here the point is that we have the

00:14:58,440 --> 00:15:00,060
same variable occurring twice.

00:15:00,060 --> 00:15:02,730
So, it must be replaced consistently.

00:15:02,730 --> 00:15:07,089
So, it would, of course, be possible to say,
well, X has a solution because we can replace

00:15:07,089 --> 00:15:09,870
X by Mia because then we have this agreement
here.

00:15:09,870 --> 00:15:13,480
And likewise, you could say, well, X would
be replaced by Vincent because then we have

00:15:13,480 --> 00:15:14,610
agreement here.

00:15:14,610 --> 00:15:18,519
But that would only be possible both at the
same time, if this wouldn't be the same X,

00:15:18,519 --> 00:15:21,610
it would be X1, X2, or X and Y then we could
do this.

00:15:21,610 --> 00:15:26,260
But since it's the same X, we would have to
replace X by one and only one thing.

00:15:26,260 --> 00:15:31,290
And so, we can't replace it either by Mia or
Vincent, because in either case we get a mismatch

00:15:31,290 --> 00:15:32,839
in one of the two positions.

00:15:32,839 --> 00:15:38,149
So, that's why this is not unifiable, as you
would say.

00:15:38,149 --> 00:15:39,149
Okay?

00:15:39,149 --> 00:15:43,570
And of course, this can also happen if variables
occur only on one side.

00:15:43,570 --> 00:15:48,089
Yes, this is not just happening because we
have the same variable on left and right.

00:15:48,089 --> 00:15:54,360
It could also be the case that X occurs only
on one side of our question, but then occurs

00:15:54,360 --> 00:15:57,610
in a way such that we get still a contradiction.

00:15:57,610 --> 00:16:03,570
Because now if you wanted X to be Marsellus
to make this match, then we also would have

00:16:03,570 --> 00:16:06,910
to replace this X by Marsellus because it
is the same variable.

00:16:06,910 --> 00:16:08,650
But then Marsellus and Mia do not match.

00:16:08,650 --> 00:16:11,660
So, it would also be a no answer.

00:16:11,660 --> 00:16:17,390
And similar so that you can work out that
this would be a problem.

00:16:17,390 --> 00:16:22,300
So, it's a similar to an example on the previous
slide, but at some point, there is a mismatch

00:16:22,300 --> 00:16:27,080
and I think it has to do with these atoms
here.

00:16:27,080 --> 00:16:29,470
Yes, so the variables would be fine.

00:16:29,470 --> 00:16:35,130
They could be matched in each position in
some useful way, but actually, we also always

00:16:35,130 --> 00:16:40,990
have to make sure that at all positions in
the tree, the structure is the same as it

00:16:40,990 --> 00:16:41,990
is.

00:16:41,990 --> 00:16:44,170
There is a contradiction here because of these
two items.

00:16:44,170 --> 00:16:46,329
Okay, what else?

00:16:46,329 --> 00:16:48,220
Where it is also a no answer case.

00:16:48,220 --> 00:16:49,650
Why is that?

00:16:49,650 --> 00:16:51,050
Because we have to respect arity.

00:16:51,050 --> 00:16:53,820
As mentioned earlier, Prolog doesn't have
a type system.

00:16:53,820 --> 00:16:58,820
It even allows the same predicate name to
be used with different numbers of argument,

00:16:58,820 --> 00:17:01,019
but then we can't really unify things,
right?

00:17:01,019 --> 00:17:04,319
So, you can't say that X is b, b or something.

00:17:04,319 --> 00:17:07,600
The X must be replaced by one term.

00:17:07,600 --> 00:17:11,790
And whatever one term you replace, you put
into place of X.

00:17:11,790 --> 00:17:15,410
Usually on the right-hand side, have P as
a unary application to one term.

00:17:15,410 --> 00:17:19,722
We have on the left, we have P as a binary
application to two terms.

00:17:19,722 --> 00:17:21,610
This is incompatible.

00:17:21,610 --> 00:17:22,610
Yes.

00:17:22,610 --> 00:17:28,780
So, this is: the answer here also has
to be no.

62 # slide
00:17:28,780 --> 00:17:37,110
Apart from the examples, let's also briefly
talk about the underlying formal concepts.

00:17:37,110 --> 00:17:38,900
The notions that are used here.

00:17:38,900 --> 00:17:42,210
So, of course, there is this notion of substitution
that I already mentioned.

00:17:42,210 --> 00:17:47,220
So, the idea of replacing variables by either
other variables or other kinds of terms.

00:17:47,220 --> 00:17:54,220
So, the kind of terms that can occur in Prolog
programs, constant structures, numbers also

00:17:54,220 --> 00:17:58,580
but many work with structures and lists here.

00:17:58,580 --> 00:18:03,120
This upfront is just the mapping for variables.

00:18:03,120 --> 00:18:06,580
But then of course it is also applied to terms
that contain variables.

00:18:06,580 --> 00:18:12,750
If you extend substitution, which is just
a mapping from variables to terms into a function,

00:18:12,750 --> 00:18:15,190
that maps terms to terms.

00:18:15,190 --> 00:18:19,980
So, given a term, which might, and in general will
contain variables.

00:18:19,980 --> 00:18:25,330
if you get a new term, which has the same
structure towards all those points where the

00:18:25,330 --> 00:18:31,179
variables occur, and then where those variables
are replaced by whatever the substitution

00:18:31,179 --> 00:18:32,179
says.

00:18:32,179 --> 00:18:34,010
And this gives a new term from the old term.

00:18:34,010 --> 00:18:40,510
Yes, and this will be used to make terms equal
because then we can apply the same substitution

00:18:40,510 --> 00:18:43,059
to two terms to make them equal.

00:18:43,059 --> 00:18:44,059
Okay?

00:18:44,059 --> 00:18:47,030
So, notation for substitution will be like
this.

00:18:47,030 --> 00:18:49,850
We write it in set brackets.

00:18:49,850 --> 00:18:53,480
So, U is a substitution.

00:18:53,480 --> 00:18:58,330
And written like this, this means that it’s
the substitution that replaces the variable

00:18:58,330 --> 00:19:03,480
last name by the term that gives a constant,
but could be an arbitrary term, Mueller.

00:19:03,480 --> 00:19:07,080
And to replace this, the variable MM by this
term.

00:19:07,080 --> 00:19:13,770
Okay, of course, no variable can be listed
several times in such a list in such a notation,

00:19:13,770 --> 00:19:16,809
because then it wouldn't be clear what the
variable should be mapped to.

00:19:16,809 --> 00:19:18,980
But we can have incomplete listings here.

00:19:18,980 --> 00:19:23,820
So, we could have that many more variables
occur in our terms, but we choose to only

00:19:23,820 --> 00:19:25,090
replace last name and MM.

00:19:25,090 --> 00:19:30,120
And then we also only list those two here
and not all the variables that exist.

00:19:30,120 --> 00:19:38,520
Okay, so this is exactly what this substitution
would do when applied to some term, it would

00:19:38,520 --> 00:19:41,990
change exactly the variables LastName and
MM.

00:19:41,990 --> 00:19:43,390
That's to get a new term.

00:19:43,390 --> 00:19:45,540
Everything else would stay unchanged.

00:19:45,540 --> 00:19:51,940
Concretely, if you apply this to this term
from one of the previous slides, then this

00:19:51,940 --> 00:19:57,809
last name position is replaced by what the
substitution says, nothing else happens.

00:19:57,809 --> 00:20:03,390
For example, this is not even used because
the variable MM doesn't occur in this term.

00:20:03,390 --> 00:20:07,919
And if there would be other variables occurring
in this term, they would also not be changed

00:20:07,919 --> 00:20:13,960
by the substitution.

63 # slide
00:20:13,960 --> 00:20:20,470
And then the idea of having a substitution
to make two terms equal, that's the concept

00:20:20,470 --> 00:20:21,470
of a unifier.

00:20:21,470 --> 00:20:26,650
That's also why the substitution on the previous
slide was called U because it can be a unifier

00:20:26,650 --> 00:20:29,390
for certain pairs of terms.

00:20:29,390 --> 00:20:37,169
Okay, so specifically, the substitution we
just saw is a unifier for the two terms we

00:20:37,169 --> 00:20:38,549
saw earlier.

00:20:38,549 --> 00:20:44,830
Yes, if you apply this substitution to this
term, which means to map recursively at all

00:20:44,830 --> 00:20:51,970
positions, the variables in this case, exactly
this variable by to this right inside.

00:20:51,970 --> 00:20:57,320
And if you do the same with the same substitution
on this other term, then you find some other

00:20:57,320 --> 00:20:58,860
variable, maybe this one.

00:20:58,860 --> 00:21:03,950
And if you replace this also by 11, then we
have actually two terms which are structurally

00:21:03,950 --> 00:21:04,950
identical, right?

00:21:04,950 --> 00:21:06,539
They will actually be ground terms.

00:21:06,539 --> 00:21:13,990
We can simply compare them piece by piece
and they will be really equal in the sense

00:21:13,990 --> 00:21:17,960
of no need to do any further changes to them.

00:21:17,960 --> 00:21:21,080
Because the unifier, the substitution has
taken care of this.

00:21:21,080 --> 00:21:22,919
That’s then unifier for these two terms.

00:21:22,919 --> 00:21:23,919
Okay.

00:21:23,919 --> 00:21:27,210
Now there can be very many unifiers for a
given pair of terms.

00:21:27,210 --> 00:21:31,130
So, for example, you could use substitution
U prime.

00:21:31,130 --> 00:21:34,900
Where we also say that the variable Z is mapped
to whatever.

00:21:34,900 --> 00:21:36,809
That would also be a unifier.

00:21:36,809 --> 00:21:42,440
The Z doesn't even occur in these two terms,
but it would be a unifier because after applying

00:21:42,440 --> 00:21:46,760
this U prime to these two terms you would
also have obviously equal things.

00:21:46,760 --> 00:21:54,630
Okay, to not have this strange and interesting
unifiers, there is a concept of the most general

00:21:54,630 --> 00:21:55,630
unifier.

00:21:55,630 --> 00:21:59,880
And that should ring a bell if you are from
the lecture by Professor König.

00:21:59,880 --> 00:22:01,970
So, what is the most general unifier?

00:22:01,970 --> 00:22:07,340
It's a unifier that makes the least amount
of choice necessary.

00:22:07,340 --> 00:22:10,550
So, it leaves as many variables as possible
unchanged.

00:22:10,550 --> 00:22:15,190
And it doesn't introduce specific terms where
variable suffice.

00:22:15,190 --> 00:22:20,270
So, if it's enough to replace one variable
by another variable, then this would be done

00:22:20,270 --> 00:22:24,150
instead of replacing both variables by some
arbitrary constant, like zero.

00:22:24,150 --> 00:22:28,420
It would be more specific than is actually
needed.

00:22:28,420 --> 00:22:29,420
Okay?

00:22:29,420 --> 00:22:33,679
So, an example for this, let's say these are
the two terms we are interested in.

00:22:33,679 --> 00:22:38,370
And here are two substitutions to unify us
for these two terms, right?

00:22:38,370 --> 00:22:46,190
If we apply what the first substitution says
to both these terms, you will get two terms

00:22:46,190 --> 00:22:50,080
date 27, 11, 2007.

00:22:50,080 --> 00:22:55,110
And here also date 27, 11 2007.

00:22:55,110 --> 00:22:58,190
So, this is a unifier for these two terms.

00:22:58,190 --> 00:23:00,070
However, there’s another one.

00:23:00,070 --> 00:23:04,290
So, this U2 is also a unifier for these two
terms.

00:23:04,290 --> 00:23:11,760
Because if we replaced this, according to
the substitution, we get D here, 11 here,

00:23:11,760 --> 00:23:17,240
2007 here and here we get no change to D because
D is not mentioned as a variable on the

00:23:17,240 --> 00:23:21,310
left-hand side of any of these pairs in the
second unifier.

00:23:21,310 --> 00:23:25,270
We get 11, which is okay because we also
got 11 here, and we got 2007 here, which is

00:23:25,270 --> 00:23:26,270
also okay.

00:23:26,270 --> 00:23:30,630
So, applying the second unifier to these two
terms also leads to equal terms to a different

00:23:30,630 --> 00:23:33,060
term then here, but two equal terms.

00:23:33,060 --> 00:23:34,060
Okay?

00:23:34,060 --> 00:23:37,710
And now we have two candidate unifiers, and
actually, the second one is more general.

00:23:37,710 --> 00:23:42,600
We can see this because it doesn't make an
arbitrary choice of 27.

00:23:42,600 --> 00:23:47,680
There's no good motivation to replace
anything by 27.

00:23:47,680 --> 00:23:50,630
If you see, they are all just showing you two
terms because when these haven’t even been

00:23:50,630 --> 00:23:51,630
mentioned.

00:23:51,630 --> 00:23:54,130
So, U1 is a unifier, but it is unnecessarily
specific.

00:23:54,130 --> 00:23:56,070
It's not a most general unifier.

00:23:56,070 --> 00:23:58,590
Whereas the second unifier is most general.

00:23:58,590 --> 00:24:05,429
There's no way to make these terms equal by
making fewer choices or leaving more things

00:24:05,429 --> 00:24:06,860
as variables.

00:24:06,860 --> 00:24:11,289
You really have to replace this by the specific
value 11 because otherwise we don't get agreement

00:24:11,289 --> 00:24:12,289
here.

00:24:12,289 --> 00:24:16,490
And we really have to replace Y by a specific
value 2007 because otherwise you don't get

00:24:16,490 --> 00:24:17,490
agreement here.

00:24:17,490 --> 00:24:22,630
There's no way to make a more general unifier
than this U2.

00:24:22,630 --> 00:24:24,049
Okay.

00:24:24,049 --> 00:24:28,950
That would be a U3, that replaces D by DD
instead of this way around, that would also

00:24:28,950 --> 00:24:29,950
be a most general unifier.

00:24:29,950 --> 00:24:33,309
That will also be more general than U1.

00:24:33,309 --> 00:24:37,740
And actually these two would be U2 and this
U3 would be equally general.

00:24:37,740 --> 00:24:49,660
Yes, so there's not one most general unifier,
but a unifier can be most general.

64 # slide
00:24:49,660 --> 00:24:53,570
So, how does Prolog find a most general unifier?

00:24:53,570 --> 00:24:56,870
Yes, because Prolog will always look for a most general
unifier.

00:24:56,870 --> 00:24:59,790
So, it needs an algorithm for this.

00:24:59,790 --> 00:25:05,400
Okay, now in the slides, there is a description
of one concrete algorithm.

00:25:05,400 --> 00:25:08,799
However, I will not go through these slides
now.

00:25:08,799 --> 00:25:11,260
Yes, I will skip over these slides.

00:25:11,260 --> 00:25:16,140
You can of course download them, but I will
not talk through them in this video.

00:25:16,140 --> 00:25:22,559
And one reason is that you should have seen
at least a similar algorithm already for this

00:25:22,559 --> 00:25:24,760
proposed in the Logik lecture.

00:25:24,760 --> 00:25:28,960
And it has been practised in that course as
exercise and probably it was also part of

00:25:28,960 --> 00:25:32,070
the exam, so you should be able to refresh
this.

00:25:32,070 --> 00:25:38,230
And moreover actually for our dealings with
the semantics of Prolog, we will not need to

00:25:38,230 --> 00:25:39,350
learn a specific algorithm.

00:25:39,350 --> 00:25:46,060
So, it's not the point that you have to memorize
this algorithm and show how you apply the

00:25:46,060 --> 00:25:47,060
algorithm.

00:25:47,060 --> 00:25:51,150
It's only needed to know what the most general
unifier of two terms is.

00:25:51,150 --> 00:25:56,919
You can, of course, arrive at this by really
applying the algorithm and there are examples

00:25:56,919 --> 00:25:59,039
on the slides that I'm skipping over.

00:25:59,039 --> 00:26:01,820
And of course, also in Professor König's
slides.

00:26:01,820 --> 00:26:06,900
And you will see there are examples where we
talk about well here is the unifier and this

00:26:06,900 --> 00:26:08,940
is the result.

00:26:08,940 --> 00:26:10,309
But that's all you will need.

00:26:10,309 --> 00:26:15,090
You will have to correctly tell what the most
general unifier for a pair of terms is.

00:26:15,090 --> 00:26:20,480
You don't have to demonstrate that you can
compute that unifier via a concrete algorithm.

00:26:20,480 --> 00:26:22,950
So, that's simply something that's not part
of this lecture.

00:26:22,950 --> 00:26:24,950
That's not something we want to do here.

00:26:24,950 --> 00:26:29,900
But we need to be able to identify a most
general unifier, okay?

00:26:29,900 --> 00:26:34,400
So, that's why I will not handle this algorithm
here.

00:26:34,400 --> 00:26:39,370
As an aside, I think already mentioned a moment
ago.

00:26:39,370 --> 00:26:44,600
This occurs check which I briefly mentioned
on the previous slide when we talked about

00:26:44,600 --> 00:26:49,660
this infinite matching; P of (X, Y) versus
P of (Q(X)).

00:26:49,660 --> 00:26:52,470
And which also occurs in the slides.

00:26:52,470 --> 00:26:59,919
So, this occurs check is an algorithmic detail,
that can be used or not.

00:26:59,919 --> 00:27:05,309
It will not be relevant for you in the exercise
or the exam.

00:27:05,309 --> 00:27:06,309
Okay?

00:27:06,309 --> 00:27:10,169
So, Prolog considers this but you won't
have to be aware of this.

00:27:10,169 --> 00:27:16,270
You can always use the intuitive notion of
unification by looking at terms and thinking

00:27:16,270 --> 00:27:21,710
about what do I have to do to make these two
terms equal without this occurs check problem.
