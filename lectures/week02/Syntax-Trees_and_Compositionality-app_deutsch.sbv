0:00:01.800,0:00:09.760
Zurück zum Whiteboard. Ich wollte kurz
über Ausdrücke und Kompositionalität

0:00:09.760,0:00:11.630
in Form von Syntaxbäumen reden.

0:00:11.630,0:00:24.529
Auf den Folien hatte ich also diesen arithmetischen Ausdruck.

0:00:24.529,0:00:29.650
Und ich habe erwähnt, dass er aus Unterausdrücken aufgebaut ist
und diese in einem Baum visualisiert werden können.

0:00:29.650,0:00:35.750
Und ich nehme an, dass Sie solche Bäume
schon einmal in irgendeiner Form gesehen haben.

0:00:35.750,0:00:43.510
Bei einer Top-Down-Zerlegung und unter Berücksichtigung
der üblichen Regeln für Präzedenz

0:00:43.510,0:00:51.859
zwischen arithmetischen Operationen, sodass Multiplikationen
eine engere Bindung haben

0:00:51.859,0:00:56.539
als etwa die Addition. Wir sollten also
die folgenden Strukturen haben. Also, 2 mal 10,

0:00:56.539,0:01:05.780
dann haben wir diese Multiplikation, die ein Argument 3 hat
und etwas, das quadriert wird.

0:01:05.780,0:01:07.140
Und was wird quadriert?

0:01:07.140,0:01:16.000
Nun, die Summe von zwei Dingen, von denen das erste
die Variable x und das zweite die Zahl 1 ist.

0:01:16.000,0:01:23.320
Dies wäre also die Darstellung des Syntaxbaums
des obigen Ausdrucks.

0:01:23.320,0:01:27.860
Und auf diese Weise können wir leicht die
Unterausdrücke identifizieren.

0:01:27.860,0:01:35.250
Wenn ich also auf einen Knoten in diesem Baum zeige,
dann würde das, was mit diesem Punkt als Wurzel beginnt,

0:01:35.250,0:01:36.250
ein Unterausdruck sein.

0:01:36.250,0:01:40.930
Also, x plus 1 ist natürlich ein Unterausdruck.

0:01:40.930,0:01:48.870
Und das Gleiche gilt für jede andere Sache, die
ich identifiziere.

0:01:48.870,0:01:55.490
Auch diese 3 ist natürlich ein
Unterausdruck.

0:01:55.490,0:02:01.920
Okay, jetzt habe ich über kompositionelle Typisierung gesprochen,
und kompositionelle Auswertung.

0:02:01.920,0:02:07.160
Also, Typisierung ist in diesem Beispiel
nicht sehr interessant, weil alles nur eine Zahl ist.

0:02:07.160,0:02:12.120
Wir werden später ein anderes Beispiel CodeWorld
sehen.

0:02:12.120,0:02:17.740
Und hier können wir über kompositionelle
Auswertung sprechen.

0:02:17.740,0:02:27.340
Und wieder ist es genau das, was Sie gewohnt sind,
wenn Sie in der Arithmetik von Hand rechnen.

0:02:27.340,0:02:35.780
Sagen wir also, dass wir für das x aus dem
Kontext einen Wert haben, also ist dieses x "in scope".

0:02:35.780,0:02:44.720
Und sagen wir zum Beispiel, dass der Wert
5 ist. Dann können wir kompositionell

0:02:44.720,0:02:48.920
jeden Unterausdruck auswerten, und das führt zu
einem Wert für das Ganze, richtig?

0:02:48.920,0:02:55.670
Der Wert einer Konstante ist natürlich nur
diese Konstante, der Wert der Addition

0:02:55.670,0:03:02.720
zweier Werte ist die Addition dieser
zwei Werte. Das ergibt einfach 6, das ist 36,

0:03:02.720,0:03:04.069
das ist 3.

0:03:04.069,0:03:05.260
Das ist 39.

0:03:05.260,0:03:08.360
Nein, das ist Multiplikation.

0:03:08.360,0:03:12.490
Also, das ist 108.

0:03:12.490,0:03:24.060
Und das ist 2, wenn ich mich nicht geirrt habe,
was natürlich möglich ist.

0:03:24.060,0:03:26.370
Und das wäre dann 110.

0:03:26.370,0:03:32.130
Und natürlich ist die Reihenfolge, in der ich die Dinge
hier ausgewertet habe, völlig irrelevant, richtig?

0:03:32.130,0:03:34.490
Es hätte keinen Unterschied gemacht

0:03:34.490,0:03:40.220
wenn ich bei anderen Knoten angefangen hätte,
wäre das Gesamtergebnis natürlich das gleiche gewesen,

0:03:40.220,0:03:41.220
oder?

0:03:41.220,0:03:42.920
Und das ist auch gar nicht so überraschend, hoffe ich.

0:03:42.920,0:03:43.920
Ja.

0:03:43.920,0:03:46.160
Also, das ist trivial.

0:03:46.160,0:03:51.930
Diese Art von Kompositionalität. Aber nur weil
das mathematische Operationen und Funktionen sind.

0:03:51.930,0:03:53.330
Das ist es nicht.

0:03:53.330,0:04:02.849
Also, wenn wir einfach zu einem sehr kleinen, aber
anderen Beispiel kommen.

0:04:02.849,0:04:09.230
Schauen wir uns also noch einmal etwas an, das ich in
einem früheren Video gemacht habe. Sagen wir, wir

0:04:09.230,0:04:17.229
betrachten Dinge, die wie Ausdrücke aussehen,
wie ein Funktionsaufruf vielleicht in einer imperativen

0:04:17.229,0:04:18.229
Sprache.

0:04:18.229,0:04:28.340
Und nehmen wir zwei solcher Aufrufe, als Unterausdrücke
eines größeren Ausdrucks.

0:04:28.340,0:04:34.439
Und jetzt, nachdem ich das dargestellt habe, ist es
natürlich auch kompositionell.

0:04:34.439,0:04:39.779
Richtig, es ist syntaktisch kompositionell, aber
semantisch ist es überhaupt nicht kompositionell.

0:04:39.779,0:04:41.460
Warum ist das so?

0:04:41.460,0:04:47.889
Weil es nicht wirklich wahr ist, dass ich nur
die Werte dieser beiden read-Aufrufe zu kennen brauche.

0:04:47.889,0:04:52.539
Ich muss z.B. auch die Reihenfolge kennen,
in der sie ausgewertet werden.

0:04:52.539,0:04:58.260
Nun, natürlich können wir in jeder Sprache
sagen, wir werten immer das erste Ding aus

0:04:58.260,0:05:00.939
und dann das zweite Ding. Aber das ist nicht kompositionell,
oder?

0:05:00.939,0:05:06.340
Es ist nicht dasselbe wie im vorherigen Beispiel.

0:05:06.340,0:05:13.080
Denn wenn ich mir das wirklich so vorstelle, dass
ich zuerst einen Unterausdruck auswerte wie

0:05:13.080,0:05:14.199
diesen hier.

0:05:14.199,0:05:23.240
Und vielleicht bedeutet das, dass ich aus der Eingabe lese,
irgendeinen Wert 5. Sagen wir mal, das ist mein Prompt,

0:05:23.240,0:05:28.699
wo ich Sachen von der Konsole lese, vom
Benutzer. Dann wäre das Ergebnis der Auswertung des

0:05:28.699,0:05:30.800
rechten Zweigs 5.

0:05:30.800,0:05:33.990
Und nehmen wir an, dass danach die 7 gelesen wird.

0:05:33.990,0:05:39.819
Und sagen wir, wir verwenden dies für die Auswertung der
des linken Zweigs dieses

0:05:39.819,0:05:44.699
Baumes; dann wäre das Ergebnis 7 minus
5, wäre also 2.

0:05:44.699,0:05:54.639
Aber das hing natürlich von der Reihenfolge ab.
Wenn ich zuerst den linken Zweig ausgewertet hätte,

0:05:54.639,0:06:00.800
dann wäre das die 5 gewesen, und dann
die Auswertung der anderen Seite wäre gewesen

0:06:00.800,0:06:05.729
die 7, und dann wäre das Ergebnis plötzlich
-2 gewesen.

0:06:05.729,0:06:08.020
Ja, das ist ein triviales Beispiel.

0:06:08.020,0:06:17.029
Aber es zeigt schon, dass die Reihenfolge der Auswertung
wichtig ist, wenn wir Effekte haben.

0:06:17.029,0:06:24.689
Und das ist auch der Grund, warum wir nicht
Unterausdrücke umbenennen können, oder einfach zwei gemeinsame

0:06:24.689,0:06:29.330
Unterausdrücke, zum Beispiel, durch einen gemeinsamen Namen
und Zuweisung des Wertes

0:06:29.330,0:06:35.039
des Unterausdrucks zu diesem Namen ersetzen können,
wie wir es zuvor in den anderen Beispielen auf den Folien getan haben.

0:06:35.039,0:06:37.749
Okay, das war's also.

0:06:37.749,0:06:44.169
Und dann habe ich erwähnt, ich möchte auch über
das CodeWorld-Beispiel sprechen, denn das wird

0:06:44.169,0:06:51.430
im nächsten Video zum Herumspielen auf
der CodeWorld-Website verwendet wird. Und der Ausdruck,

0:06:51.430,0:06:58.349
von dem ich dort ausgehen werde, ist auf den Folien zu sehen.
Ich werde ihn hier nicht in linearer

0:06:58.349,0:07:02.110
Form aufschreiben, sondern ich werde direkt den Baum zeichnen.

0:07:02.110,0:07:08.409
Und in Bezug darauf können wir dann über
die Typen sprechen. Und dann, auf der CodeWorld-Website,

0:07:08.409,0:07:10.860
werden wir tatsächlich mit dem Beispiel spielen.

0:07:10.860,0:07:18.689
Also, lassen Sie mich diesen Syntaxbaum des Ausdrucks zeichnen,
den ich dann in Folien verwenden werde.

0:07:18.689,0:07:27.110
Ehrlich gesagt, bin ich nicht sehr gut im Zeichnen dieses
Symbols.

0:07:27.110,0:07:32.879
Sie werden es sehen, wenn ich es tippe, in
das... Also, das soll das "kaufmännische Und" sein,

0:07:32.879,0:07:33.879
das Symbol &.

0:07:33.879,0:07:38.099
Okay, und es wird hier auf der obersten Ebene verwendet, weil
wir zwei Bilder kombinieren wollen.

0:07:38.099,0:07:43.969
Und eines dieser Bilder wird ein Kreis sein.
Es ist also ähnlich wie bei dem Beispiel, mit dem ich angefangen habe

0:07:43.969,0:07:45.930
letzte Woche.

0:07:45.930,0:07:54.169
Und dann gibt es einen weiteren Teilbaum oder Unterausdruck.
Es ist einer dieser "translated"-Aufrufe. Das war

0:07:54.169,0:07:59.349
für die Bewegung von Bildern. Es hatte drei Argumente,
etwas in x-Richtung, etwas in

0:07:59.349,0:08:02.800
der y-Richtung und etwas, das bewegt
werden soll.

0:08:02.800,0:08:12.119
Und wieder, ähnlich wie in der letzten Woche, werde ich
ein rot gefärbtes Dreieck oder ein beliebiges

0:08:12.119,0:08:13.119
Vieleck haben.

0:08:13.119,0:08:19.939
Also, der Syntaxbaum des
Ausdrucks, den wir uns ansehen werden, ist dieser.

0:08:19.939,0:08:22.639
Und eigentlich zeichne ich ihn nicht vollständig.

0:08:22.639,0:08:31.150
Also hier unten, da wird ein längerer Ausdruck sein,
im Grunde genommen, einige Zahlenpaare in solchen quadratischen

0:08:31.150,0:08:32.150
Klammern.

0:08:32.150,0:08:39.259
Okay, das wird also ein Ausdruck sein, den wir
im Editor eintippen werden.

0:08:39.259,0:08:45.699
Und was ich hier besprechen wollte, sind Typen.
Denn anders als bei den Zahlenbeispielen

0:08:45.699,0:08:46.920
von oben,

0:08:46.920,0:08:52.130
werden wir jetzt im Programm
einige weitere interessante Typen haben.

0:08:52.130,0:09:00.209
Also, was Sie wahrscheinlich schon, wissen oder sich erinnern
aus dem Beispiel von letzter Woche, ist, dass das insgesamt

0:09:00.209,0:09:05.579
so etwas wie eine "Szene" war, also ein Bild.
Also, irgendwie wollen wir letztendlich hier oben

0:09:05.579,0:09:08.750
den Typ 'Picture' haben.

0:09:08.750,0:09:15.300
Und um sicherzustellen, dass dies ein Bild
ist, müssen wir uns die Unterausdrücke ansehen,

0:09:15.300,0:09:18.920
von oben nach unten. Oder man kann mit dem kleinsten Wert beginnen
und von unten nach oben arbeiten.

0:09:18.920,0:09:22.110
Natürlich macht das keinen Unterschied,
wenn es kompositionell ist.

0:09:22.110,0:09:28.400
Also, was wir hier haben, oder was wir finden werden, ist
dass dieser Operator hier zwei Bilder nimmt

0:09:28.400,0:09:30.149
und sie zu einem einzigen Bild kombiniert.

0:09:30.149,0:09:36.060
Was wir also erwarten, ist, dass wir sowohl links
als auch auf der rechten Seite, Bilder haben. So weit

0:09:36.060,0:09:38.190
ist das wie mit Zahlen, wir kombinieren Zahlen
zu Zahlen.

0:09:38.190,0:09:43.560
Also hier kombinieren wir Bilder zu Bildern.
Aber dann weiter unten im Baum können wir

0:09:43.560,0:09:50.430
andere Dinge haben, zum Beispiel die 0.1 hier
ist natürlich kein Bild, es ist eine Fließkommazahl

0:09:50.430,0:09:57.180
und wird in dieser speziellen Bibliothek ein Double
sein.

0:09:57.180,0:10:05.430
Und ähnlich verhält es sich mit all den anderen Zahlen, die wir
hier haben. All die anderen

0:10:05.430,0:10:11.150
Zahlen, die wir hier haben, sind Doubles.

0:10:11.150,0:10:16.390
Und was bewegen wir?

0:10:16.390,0:10:18.579
Also, arbeiten wir die Dinge von unten her aus.

0:10:18.579,0:10:20.230
Also, was ist das hier?

0:10:20.230,0:10:25.750
Ich sagte, es ist eine Liste von Zahlenpaaren.

0:10:25.750,0:10:30.470
Und tatsächlich gibt es einen speziellen Typ für
Punkte in CodeWorld.

0:10:30.470,0:10:40.660
Also, was das tatsächlich vom Typ her sein wird, ist eine
Liste von Punkten. Also, eine Listensyntax. (Die quadratischen

0:10:40.660,0:10:42.270
Klammern sind Listensyntax.)

0:10:42.270,0:10:47.379
Und die Sache, die in der Liste
vorkommt, ist dieser Punkttyp.

0:10:47.379,0:10:53.730
Und dann ist "polygon" eine Funktion, die
eine solche Liste von Punkten nimmt und ein Bild gibt.

0:10:53.730,0:10:58.920
Der Typ an diesem Knoten wird also 'Picture' sein.

0:10:58.920,0:11:00.420
Und was ist dann mit "colored"?

0:11:00.420,0:11:07.120
Nun, "colored" sollte eine Farbe und ein
Bild nehmen, und ein Bild zurückgeben.

0:11:07.120,0:11:12.460
Was wir also brauchen, ist eine Farbe. Und "red"
ist in der Tat eine Farbkonstante. Dann können die Farbe

0:11:12.460,0:11:18.509
und das Bild mit der Funktion "colored" zu
einem Bild kombiniert werden.

0:11:18.509,0:11:23.529
Und dann klappt jetzt alles, denn
der Aufruf "translated" erwartet zwei Doubles und

0:11:23.529,0:11:25.060
ein Bild und gibt ein Bild zurück.

0:11:25.060,0:11:31.940
Kompositionell passen also an jedem Knoten die Dinge
zusammen und wir erhalten insgesamt den gewünschten

0:11:31.940,0:11:35.569
Typ, auf kompositionelle Weise.
