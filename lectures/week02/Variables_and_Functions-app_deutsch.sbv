0:00:01.900,0:00:05.320
Willkommen zurück.

0:00:05.320,0:00:12.030
Ich möchte heute mal beginnen,
mit diesem Whiteboard hier zu arbeiten.

0:00:12.030,0:00:18.570
Also, ein paar Dinge zeichnen oder
aufschreiben, später wieder zu Folien wechseln.

0:00:18.570,0:00:23.830
Und insbesondere möchte ich damit beginnen, ein paar Begriffe zu diskutieren,
ein paar Konzepte, die Ihnen hoffentlich

0:00:23.830,0:00:27.570
in gewissem Sinne sehr vertraut sind, und
sehr offensichtlich sind.

0:00:27.570,0:00:32.259
Aber vielleicht gibt es bei der Unterscheidung zwischen Programmierung
und Mathematik einige Feinheiten,

0:00:32.259,0:00:33.970
auf die ich eingehen möchte.

0:00:33.970,0:00:38.970
Und insbesondere wird dies auch zu
Unterscheidungen führen, die ich später in den Folien machen möchte.

0:00:38.970,0:00:45.040
Also, lassen Sie uns über Variablen, Funktionen,
Ausdrücke, Befehle sprechen. Und die letzten beiden

0:00:45.040,0:00:49.890
sind die beiden Dinge, auf die ich mich
später in den Folien konzentrieren möchte.

0:00:49.890,0:00:54.500
Okay, aber lassen Sie uns mit einigen offensichtlichen Begriffen beginnen.
Zum Beispiel: Was ist eine Variable? Und natürlich,

0:00:54.500,0:01:00.730
eine Variable ist etwas, das man die ganze Zeit sieht
in Mathevorlesungen oder beim Programmieren.

0:01:00.730,0:01:03.990
Also, eine Variable ist

0:01:03.990,0:01:10.840
etwas wie dieses x. Sagen wir, wir schreiben
eine Funktion: f(x) = x^2 + 1.

0:01:10.840,0:01:14.390
Also, das ist natürlich eine Variable (das x).

0:01:14.390,0:01:20.850
Genauso kennen Sie natürlich Variablen aus der
Programmierung, vielleicht in C oder einer Java-

0:01:20.850,0:01:22.440
ähnlichen Sprache.

0:01:22.440,0:01:31.890
Und ähnlich in einer nicht typisierten Sprache, wie
Python, nur dass man hier nicht das explizite "int" (integer) schreiben würde.

0:01:31.890,0:01:40.050
Nehmen wir an, wir führen eine Variable ein. Ihr
Wert ist am Anfang null, dann geben wir ihn vielleicht

0:01:40.050,0:01:46.490
auf irgendeine Weise aus. Je nachdem, wie genau die
Prozedur dafür in unserer Sprache ist,

0:01:46.490,0:01:50.079
aber wahrscheinlich gibt es so etwas wie eine "print"-Funktion.

0:01:50.079,0:01:59.369
Und dann inkrementiere ich diesen i-Wert und drucke ihn
wieder aus, und vielleicht schreibe ich for-Schleifen, usw.

0:01:59.369,0:02:01.220
Also, so arbeitet man mit Variablen.

0:02:01.220,0:02:04.850
Und das ist auch nichts Neues für alle von Ihnen.

0:02:04.850,0:02:08.119
Aber natürlich gibt es dann auch viele
andere Anwendungen in der Logik, in der Mathematik.

0:02:08.119,0:02:11.720
So schreibt oder benutzt man zum Beispiel Variablen
und Ausdrücke wie diesen.

0:02:11.720,0:02:18.129
In der Mengenlehre sagt man also etwas wie:
man möchte die Menge aller geraden Zahlen haben.

0:02:18.129,0:02:26.120
Und das kann man machen, indem man sagt: na ja, nehmen wir
2 mal x für jedes x aus den natürlichen Zahlen.

0:02:26.120,0:02:27.989
Also, das ist eine Verwendung von Variablen.

0:02:27.989,0:02:33.640
In der Logik haben wir Dinge wie Quantoren,
wo man sagen kann, "für alle x sollte es

0:02:33.640,0:02:45.340
gelten" oder "es gilt für bestimmte Prädikate,
dass wenn p(x) und q(x) gilt, dann gilt auch,

0:02:45.340,0:02:50.450
dass ein anderes Prädikat r wahr ist
für x."

0:02:50.450,0:03:00.970
Oder wir schreiben Gleichungen mit Variablen, vielleicht
2 * f(x), für die Funktion von oben, ist 20.

0:03:00.970,0:03:09.450
Und dann kennen wir Wege, das zu lösen, indem wir herausfinden,
was das x ist. Oder wir

0:03:09.450,0:03:13.809
kennen auch Ausdrücke, wo wir so etwas sagen
wie: nehmen wir alle Werte

0:03:13.809,0:03:15.790
von null bis zehn

0:03:15.790,0:03:20.800
und addieren sie. Oder im Sinne der Gleichungen,

0:03:20.800,0:03:22.459
können wir auch Systeme von Gleichungen haben.

0:03:22.459,0:03:29.430
Eine Sache, die wir manchmal machen wollen, ist zum Beispiel,
Lösungen für Gleichungen wie diese zu finden.

0:03:29.430,0:03:36.889
Nun, nehmen wir zwei Variablen.
Wir wissen, bei linearen Gleichungen reicht es,

0:03:36.889,0:03:45.510
zwei Gleichungen über diesen zwei Variablen zu haben,
um (zumindest in den meisten Fällen) diese für x und y zu lösen.

0:03:45.510,0:03:52.500
Wir betrachten dies also als ein System
von Gleichungen. Und all das sind Fälle und Verwendungen von Variablen.

0:03:52.500,0:03:56.189
Es gibt hier nichts Neues oder Überraschendes,
denke ich.

0:03:56.189,0:04:03.629
Aber es gibt tatsächlich eine
Sache, die anders ist als bei den anderen

0:04:03.629,0:04:07.400
Beispielen, fast allen anderen, und das ist
genau das Programmierbeispiel.

0:04:07.400,0:04:15.180
Also, was etwas seltsam ist, im Vergleich zu all
den anderen Beispielen hier, ist, dass beim Programmieren

0:04:15.180,0:04:20.590
das i an diesen beiden Stellen unterschiedlich sein kann.

0:04:20.590,0:04:28.430
Es ist ja nicht so, dass i null ist und wieder
null. Sondern diese beiden Druckanweisungen machen unterschiedliche Dinge.

0:04:28.430,0:04:30.930
Und das ist in allen anderen Beispielen nicht der Fall.

0:04:30.930,0:04:32.160
Warum ist das so?

0:04:32.160,0:04:43.800
Wenn man also, sagen wir mal, hier rechnet, dann kann natürlich
das x variieren, denn wir wollen

0:04:43.800,0:04:48.610
jedes x aus den natürlichen Zahlen nehmen. Aber in
dem Ausdruck hier haben wir nur einen Wert.

0:04:48.610,0:04:50.030
Was will ich damit sagen?

0:04:50.030,0:05:01.020
Wir könnten zum Beispiel dieses "2 * x"
durch "x + x" ersetzen. Und natürlich, auch wenn

0:05:01.020,0:05:07.650
nun x doppelt vorkommt, würden wir, wenn
wir ein x wählen, erwarten, dass diese

0:05:07.650,0:05:09.979
zwei Vorkommen von x genau dasselbe sind.

0:05:09.979,0:05:18.870
Wir erwarten also in der Tat, dass, egal ob wir
"2 * x" oder "x + x" schreiben, die Menge

0:05:18.870,0:05:22.820
mathematisch dasselbe sein sollte. Das ist eine triviale
Sache.

0:05:22.820,0:05:27.110
Aber es ist ein wichtiger Unterschied zwischen diesem
Beispiel und allen anderen.

0:05:27.110,0:05:30.380
Ja, auch hier haben wir zwei Vorkommen
von x.

0:05:30.380,0:05:34.510
Aber natürlich, damit dieses Gleichungssystem
überhaupt Sinn ergibt, erwarten wir, dass

0:05:34.510,0:05:36.970
beide x den gleichen Wert haben.

0:05:36.970,0:05:42.850
Wir würden nicht fragen,
dieses Gleichungssystem zu lösen, wenn man nicht erwartet,

0:05:42.850,0:05:44.930
dass x und y unterschiedlich sein könnten.

0:05:44.930,0:05:50.800
Aber natürlich ist x in beiden Zeilen das Gleiche,
und y ist in beiden Zeilen gleich.

0:05:50.800,0:05:54.439
Okay, das ist ein Unterschied zwischen Programmierung
und Mathematik.

0:05:54.439,0:05:56.440
Das ist erst mal nur eine Beobachtung.

0:05:56.440,0:06:02.680
Und das bedeutet natürlich nicht, dass jedes
x immer das Gleiche ist, oder?

0:06:02.680,0:06:10.120
Wenn wir "alle x" sagen, wollen wir natürlich,
dass dies für viele verschiedene x gilt. Aber

0:06:10.120,0:06:16.629
im Geltungsbereich, sobald wir hier ein x gewählt haben,
dann sollte im Geltungsbereich des Ausdrucks, der

0:06:16.629,0:06:22.430
Formel, jedes x gleich sein.

0:06:22.430,0:06:26.669
Und das ist hier in der imperativen Programmierung nicht der Fall.
Der Bereich würde

0:06:26.669,0:06:29.770
durch diese Deklaration des i geöffnet werden.

0:06:29.770,0:06:36.350
Und dann sind alle diese Teile des Programms
im Gültigkeitsbereich von i, sie sind also in der syntaktischen

0:06:36.350,0:06:45.050
Region, in der i definiert ist,
und dennoch werden unterschiedliche i hier unterschiedliche

0:06:45.050,0:06:46.950
Werte und unterschiedliche Ergebnisse haben.

0:06:46.950,0:06:52.050
Okay, das ist also ein Unterschied zwischen diesem
Beispiel und all den anderen.

0:06:52.050,0:06:58.560
Okay, vielleicht sollten wir
das einfach für den Moment hinnehmen und später darauf zurückkommen, was es

0:06:58.560,0:07:06.729
für die Programmierung oder die funktionale Programmierung
im Vergleich zu anderen Paradigmen bedeutet.

0:07:06.729,0:07:07.729
Okay, Variablen.

0:07:07.729,0:07:10.050
Lassen Sie uns zu Funktionen übergehen.

0:07:10.050,0:07:14.210
Das ist auch etwas, das Sie kennen, und sollte nicht
überraschend sein.

0:07:14.210,0:07:16.380
Also, schauen wir uns Funktionen an.

0:07:16.380,0:07:18.240
Okay, was wissen wir über Funktionen?

0:07:18.240,0:07:19.240
Was sind typische Funktionen?

0:07:19.240,0:07:29.990
Nun, das "f(x) = x^2 + 1" von oben,
das war natürlich eine typische mathematische Funktion.

0:07:29.990,0:07:36.900
Und Sie wissen, was Sie damit machen können, zum Beispiel
kann man sie auswerten für irgendeine Eingabe,

0:07:36.900,0:07:41.069
und dann erhält man, in diesem Fall, 26, denn
fünf zum Quadrat [5^2] ist 25.

0:07:41.069,0:07:42.169
Und wir bekommen 26.

0:07:42.169,0:07:45.970
Und vielleicht sollten wir einfach sagen, was der Typ
der Funktion ist.

0:07:45.970,0:07:54.491
Also, typischerweise, in den meisten Teilen
der Mathematik oder der Analysis zumindest, sprechen wir

0:07:54.491,0:07:55.690
über Funktionen auf den reellen Zahlen.

0:07:55.690,0:07:59.779
Dies wäre also eine Funktion von den reellen Zahlen
zu den reellen Zahlen.

0:07:59.779,0:08:05.759
Und eigentlich, da es ein Quadrat ist, und
plus eins ist, können wir sogar sagen, dass es

0:08:05.759,0:08:09.400
von den reellen Zahlen zu nur den positiven reellen Zahlen geht.

0:08:09.400,0:08:14.290
Es kann also nicht null oder sogar negativ sein. Das
Ergebnis wird immer positiv sein

0:08:14.290,0:08:15.940
(genau wie in diesem Fall).

0:08:15.940,0:08:19.120
Okay, das ist also die Funktion, und dann bauen wir
Ausdrücke über Funktionen.

0:08:19.120,0:08:20.120
Was bedeutet das?

0:08:20.120,0:08:25.629
Wir bauen komplexere mathematische Ausdrücke,
die zum Beispiel aus Funktionsaufrufen bestehen.

0:08:25.629,0:08:33.659
Wir könnten also etwas sagen wie: f(5) + f(5),
und wir wissen, dass es 52 ist,

0:08:33.659,0:08:39.390
weil es dasselbe ist wie zwei mal f von fünf,
und f von fünf ist 26.

0:08:39.390,0:08:41.640
Okay, nichts Überraschendes hier.

0:08:41.640,0:08:47.540
Und natürlich können wir das Gleiche allgemeiner machen,
auch mit einer Variablen. Das wäre dann

0:08:47.540,0:08:55.290
wahr, dass f(x) + f(x) das Gleiche ist
wie zwei mal f von x.

0:08:55.290,0:09:02.630
Auch wenn x eine Variable ist, gilt diese Aussage. Egal was wir
für x einsetzen, es gilt diese Aussage.

0:09:02.630,0:09:03.630
Und warum?

0:09:03.630,0:09:06.000
Weil in dem gegebenen Bereich x festgelegt ist.

0:09:06.000,0:09:15.740
Wieder ein großer Unterschied zu dem, was wir oben gesehen haben,
für das "print(i)" Beispiel, richtig?

0:09:15.740,0:09:18.510
Das war ganz anders.

0:09:18.510,0:09:24.010
Da hatten wir nicht dieses "print(i)" als immer
das Gleiche.

0:09:24.010,0:09:30.930
Okay, jetzt könnte man sagen, na ja, im Fall
von print(i) ergibt es gar keinen Sinn, so

0:09:30.930,0:09:33.200
etwas wie print(i) plus print(i) zu sagen, richtig?

0:09:33.200,0:09:35.200
Also, wo ist der Widerspruch?

0:09:35.200,0:09:38.150
Nun, schauen wir uns ein anderes Beispiel an.

0:09:38.150,0:09:41.740
Sagen wir mal, wir wollen nicht ausgeben, wir wollen
etwas lesen. Dann könnten wir natürlich

0:09:41.740,0:09:48.920
eine Situation wollen, in der wir zum Beispiel einen
Ausdruck wie diesen haben.

0:09:48.920,0:09:55.000
Also "read()", und vielleicht müssen wir eine Eingabe machen,
um zu sagen, was man lesen will. Aber

0:09:55.000,0:09:57.880
sagen wir, wir lesen immer ganze Zahlen. Also, wir
schreiben dort gar nichts.

0:09:57.880,0:10:03.360
Dann könnten wir einen Ausdruck wie diesen haben.

0:10:03.360,0:10:08.850
Und wir könnten einfach sagen: ich will
hier kein Argument geben.

0:10:08.850,0:10:14.840
Und das ist definitiv nicht dasselbe in jeder
imperativen Sprache, die Sie wahrscheinlich

0:10:14.840,0:10:20.320
im Kopf haben, um so etwas zu tun.

0:10:20.320,0:10:26.010
Warum ist das so? Weil
ich auf der linken Seite zwei Werte lesen würde, vielleicht 5 und 7.

0:10:26.010,0:10:29.450
Und dann würde ich sie zusammenzählen:
5 plus 7 [5 + 7] ist 12.

0:10:29.450,0:10:33.210
Auf der rechten Seite würde ich nur
einen Wert lesen, vielleicht die 5, und dann

0:10:33.210,0:10:34.520
verdoppeln, und das Ergebnis wäre 10.

0:10:34.520,0:10:37.220
Und ich würde nicht einmal den zweiten Wert lesen.

0:10:37.220,0:10:44.640
Es handelt sich also definitiv um völlig unterschiedliche
Ausdrücke von Programmen, sehr widersprüchlich

0:10:44.640,0:10:48.530
zu dem, was wir hier gesehen haben.

0:10:48.530,0:10:52.410
Okay, sollten wir uns deswegen Sorgen machen?

0:10:52.410,0:10:56.780
Offenbar sind C-Programmierer nicht übermäßig besorgt
über solche Dinge, denn das ist genau das, was

0:10:56.780,0:11:03.840
sie tun, indem sie Programme in diesem Stil schreiben,
oder mit diesen Features. Man könnte sagen, vielleicht

0:11:03.840,0:11:06.210
ist es sehr spezifisch für "lesen" und "ausgeben".

0:11:06.210,0:11:11.050
Wir müssten also vorsichtig sein, wenn wir etwas lesen
oder ausgeben, und bei all den anderen Dingen in der

0:11:11.050,0:11:13.140
Sprache sind wir näher an der Mathematik.

0:11:13.140,0:11:14.140
Aber das ist gar nicht wahr,

0:11:14.140,0:11:18.040
dass man sagen könnte: na ja, es sind nur spezielle Funktionen,
die sich so verhalten.

0:11:18.040,0:11:23.200
In C, im Wesentlichen auch in Python, sind alle Funktionen
in diesem Sinne speziell. Denn was auch immer

0:11:23.200,0:11:25.480
man macht, man hat immer diese Art von Seiteneffekten.

0:11:25.480,0:11:30.290
Auch wenn man nicht direkt liest oder schreibt,
kann man Zuweisungen haben usw.

0:11:30.290,0:11:37.990
Im Grunde genommen können also alle syntaktischen Teile, auch
Ausdrücke, Seiteneffekte haben, die

0:11:37.990,0:11:43.420
zu Situationen führen, wie wir sie hier sehen.

0:11:43.420,0:11:46.800
Okay.

0:11:46.800,0:11:47.800
Warum ist das ein Problem?

0:11:47.800,0:11:49.960
Warum könnte dies als Problem angesehen werden?

0:11:49.960,0:11:58.870
Nun, wir geben alle möglichen Werkzeuge der Mathematik auf,
wenn wir akzeptieren, dass die gleichen Ausdrücke, sogar

0:11:58.870,0:12:04.760
obwohl sie dieselben Variablen enthalten, tatsächlich
zu unterschiedlichen Ergebnissen führen.

0:12:04.760,0:12:10.010
Was wäre ein Beispiel aus der Mathematik?
Alle Arten von Manipulationen von Formeln. Und

0:12:10.010,0:12:15.120
Sie werden sehen, dass es bei der funktionalen Programmierung
im Wesentlichen darum geht, Formeln zu manipulieren.

0:12:15.120,0:12:17.260
Im Gegensatz zur imperativen Programmierung.

0:12:17.260,0:12:18.910
Nehmen wir ein Beispiel.

0:12:18.910,0:12:24.860
Und nehmen wir wieder diese Funktion von oben. Wir hatten:
f von x ist x zum Quadrat plus eins [f(x) = x^2 + 1].

0:12:24.860,0:12:26.960
Und wir hatten diesen anderen Ausdruck.

0:12:26.960,0:12:33.410
Ich sage etwas wie: zwei mal
f(x) ist 20 [2 * f(x) = 20].

0:12:33.410,0:12:42.890
Und eine typische Aufgabe in der Algebra oder im Arithmetikteil
eines Mathekurses, sehr einfacher Mathematik, ist:

0:12:42.890,0:12:44.940
wir sollen das für x lösen.

0:12:44.940,0:12:45.940
Was würden wir tun?

0:12:45.940,0:12:51.140
Nun, zum Beispiel könnte man sagen: Nun,
verwenden wir die Definition von f(x). Richtig?

0:12:51.140,0:12:57.560
Etwas wie zwei mal "x zum Quadrat plus eins"
ist 20 [2 * (x^2 + 1) = 20].

0:12:57.560,0:13:10.840
Und dann würde man das lösen, indem man kleine
Schritte macht.

0:13:10.840,0:13:21.270
Und hier haben Sie vielleicht zusätzlich
im Vorfeld gesagt, dass x

0:13:21.270,0:13:29.030
ein positiver reeller Wert sein soll. Dann können wir hier wirklich einfach
die Quadratwurzel ziehen, und wir hätten das gelöst

0:13:29.030,0:13:30.700
zu: x gleich drei [x = 3].

0:13:30.700,0:13:32.790
Und das ergibt natürlich wirklich Sinn,

0:13:32.790,0:13:39.310
wenn man sagt, das muss jetzt die Lösung sein
von dem, was wir oben hatten. Weil wir ja

0:13:39.310,0:13:45.260
nur äquivalente Schritte durchgeführt haben. Es macht Sinn, weil
wir annehmen und einfach als gegeben hinnehmen, dass jedes

0:13:45.260,0:13:52.470
x in all diesen Zeilen dasselbe ist. Es ist eine Variable,
aber im Rahmen unserer Berechnung sollte sie sich nicht ändern.

0:13:52.470,0:14:02.310
Auch dies trifft nicht auf das i-Beispiel mit den
Zuweisungen in meinem angenommenen C- oder Java-

0:14:02.310,0:14:04.830
oder was auch immer für ein Programm wir oben gesehen haben.

0:14:04.830,0:14:12.030
Okay, und dasselbe gilt natürlich auch, wenn wir
wieder Gleichungssysteme manipulieren.

0:14:12.030,0:14:17.880
Wenn wir diese mit Methoden der linearen Algebra lösen,
dann müssen wir natürlich wieder annehmen,

0:14:17.880,0:14:25.920
dass im Rahmen dieses Gleichungssystems,
x immer das Gleiche ist, und y immer das Gleiche ist.

0:14:25.920,0:14:33.860
Okay, das ist also der grundlegende Unterschied
zwischen der Programmierung in einer imperativen Sprache und der Mathematik.

0:14:33.860,0:14:40.070
Und nun, die Hauptaussage der nächsten Vorlesung
ist, dass das Programmieren in einer deklarativen Sprache

0:14:40.070,0:14:47.420
wie Haskell (mit der wir beginnen; aber
auch später in Prolog geht es darum) dieser mathematischen

0:14:47.420,0:14:51.200
Art und Weise entspricht, die Dinge zu betrachten (vor allem
von Variablen und Ausdrücken).

0:14:51.200,0:14:58.080
In gewissem Sinne ist also die gesamte Haskell-Programmierung
wie das Manipulieren von Gleichungen wie wir hier gesehen haben.

0:14:58.080,0:15:00.940
Natürlich nicht für f von x und Quadrat [f(x), x^2],
sondern für unsere Domänen.

0:15:00.940,0:15:06.990
Zum Beispiel Bilder in unseren ersten CodeWorld-Aufgaben und Beispielen,
aber natürlich auch später beliebige

0:15:06.990,0:15:12.690
Datenstrukturen. Der Punkt ist, das Programmieren
in Haskell ist im Grunde das Schreiben von Gleichungen

0:15:12.690,0:15:21.660
und das Umformen von Ausdrücken, und das Lösen von Gleichungen,
oder die Suche nach Lösungen.

0:15:21.660,0:15:26.290
Okay, Ausdrücke auswerten und Ähnliches
wird später für Prolog weniger der Fall sein als

0:15:26.290,0:15:31.780
nun, und mit einem anderen Hintergrund, mehr in
Bezug auf das frühere Beispiel, wo ich

0:15:31.780,0:15:38.380
über logische Formeln sprach und nicht über irgendwie
Ausdrücke.

0:15:38.380,0:15:50.790
Aber wieder mit dieser Idee, dass wir Ausdrücke oder
Formeln manipulieren und nicht Befehle ausführen,

0:15:50.790,0:15:55.620
die z.B. die Zuweisung von Variablen ändern könnten
oder so.

0:15:55.620,0:15:56.790
Okay.
