
117 # slide
00:00:00,000 --> 00:00:08,610
Ich möchte als Nächstes mit Ihnen das sogenannte
Generate-and-Test-Prinzip

00:00:08,610 --> 00:00:16,020
besprechen. Das ist eine einfache und in
Prolog sehr gut umsetzbare

00:00:16,020 --> 00:00:22,620
algorithmische Herangehensweise. Das möchte ich zunächst motivieren durch ein

00:00:22,620 --> 00:00:29,880
kleines Beispiel. Stellen wir uns vor, wir
haben unsere Prolog-Listen, mit denen wir ja jetzt schon

00:00:29,880 --> 00:00:35,640
gearbeitet haben, für die wir mehrere Prädikate
kennengelernt hatten, um etwa Listen aneinander zu hängen,

00:00:35,640 --> 00:00:42,675
auseinanderzunehmen, Elemente in Listen zu suchen etc.
Jetzt haben wir die Aufgabenstellung:

00:00:42,675 --> 00:00:47,610
Wir würden gerne Listen sortieren. Also die Idee ist,
dass wir gern ein Prädikat haben würden,

00:00:49,110 --> 00:00:56,340
um etwas zu sortieren. Das hat natürlich zwei Argumente.
Das erste Argument würden wir zum Beispiel belegen

00:00:56,340 --> 00:01:02,040
mit einer beliebigen Liste,
die interessanterweise nicht sortiert ist.

00:01:02,040 --> 00:01:11,670
Also ihre Elemente nicht irgendwie aufsteigend durchgehend.
Und wir würden gerne, wenn wir das sortingTo-Prädikat haben,

00:01:11,670 --> 00:01:17,580
und hier ein R, eine Resultatliste
als Variable in dem Fall angeben,

00:01:17,580 --> 00:01:26,160
dann hätten wir als Antwort gern, dass wir
für R die sortierte Liste als Belegung bekommen.

00:01:26,160 --> 00:01:32,370
Also die gleichen Elemente, aber in sortierter Reihenfolge.
Das ist ja ein klassisches Problem.

00:01:32,370 --> 00:01:38,370
Auch ein sehr altes, in der Informatik oft
behandeltes algorithmisches Problem. Wir haben eine

00:01:38,370 --> 00:01:48,990
Liste und möchten sie gerne sortieren. Das tut ja
keines der bisher gesehenen Prädikate, die wir haben.

00:01:48,990 --> 00:01:55,320
Wie können wir vorgehen? Jetzt können wir sagen, dann
versuchen wir wahrscheinlich ein rekursives

00:01:55,320 --> 00:02:00,630
Prädikat zu definieren. Wir könnten ja sagen, wie die leere
Liste sortiert ist und dann vielleicht, wie es

00:02:00,630 --> 00:02:06,780
mit nicht leeren Listen ist. Dafür müssten wir dann
aber eine sehr konkrete algorithmische Idee haben.

00:02:06,780 --> 00:02:13,110
Spätestens, wenn Sie [als Komedia-Studierende] im nächsten Semester oder im nächsten Jahr
die Programmiervorlesung hören, da werden Sie

00:02:13,110 --> 00:02:16,860
wahrscheinlich auch Algorithmen besprechen, zum Sortieren zum Beispiel.
Oder vielleicht haben Sie das auch in der Schule schon getan,

00:02:16,860 --> 00:02:22,035
wenn Sie da Informatikunterricht hatten. Und da gibt es dann ganz viele
verschiedene Herangehensweisen, wie man eine Liste sortieren könnte.

00:02:22,035 --> 00:02:29,520
Aber im Moment wollen wir uns damit noch gar nicht beschäftigen.
Wir sollten zunächst erst einmal festhalten, was

00:02:29,520 --> 00:02:36,960
genau wir eigentlich wollen. Das ist ja leicht dahingesagt.
"Ich will eine sortierte Liste haben". Aber wir sind eine

00:02:36,960 --> 00:02:40,800
Logikvorlesung, also vielleicht wäre es geschickt,
das auch mal ganz präzise auszudrücken, was das eigentlich heißt.

00:02:40,800 --> 00:02:45,480
Und nicht nur einfach so verbal: "Die Elemente müssen
halt in der richtigen Reihenfolge dastehen".

00:02:45,480 --> 00:02:51,540
Also eine mögliche Herangehensweise hier wäre,
erst einmal überhaupt zu spezifizieren, und zwar logisch

00:02:51,540 --> 00:02:58,590
zu spezifizieren, was es denn heißt, dass
eine Liste sortiert ist. Uns also erst einmal um das "Was?"

00:02:58,590 --> 00:03:07,140
kümmern, statt um das "Wie?". Wie sollte denn sortiert werden?
Also da könnte man sich erst einmal überlegen, welche

00:03:07,860 --> 00:03:14,430
Eigenschaften denn die Resultatliste haben muss.
Das kann man ja in Prolog günstig ausdrücken über

00:03:14,430 --> 00:03:19,440
ein Prädikat. Ein einstelliges Prädikat. Während das
ein zweistelliges Prädikat ist, das sagt, für die Liste

00:03:19,440 --> 00:03:25,350
muss die Liste herauskommen, sozusagen. Da wäre die
Frage, wann ist denn eine Liste überhaupt sortiert?

00:03:25,350 --> 00:03:30,240
Eine Eigenschaft einer einzelnen Liste. Also diese Liste
zum Beispiel ist nicht sortiert. Die Resultatliste hier ist

00:03:30,240 --> 00:03:36,060
sortiert und soll das auch sein. Also sprechen wir
erst einmal darüber, was denn diese Eigenschaft einer

118 # slide
00:03:36,060 --> 00:03:43,170
Liste ist, sortiert zu sein. Und es ist tatsächlich
nicht schwer auszudrücken in Prolog. Das ist erst einmal

00:03:43,170 --> 00:03:50,400
ein rekursives Prädikat. Dann gibt es Basisfälle. Also z.B. die
leere Liste ist immer sortiert. Eine einelementige

00:03:50,400 --> 00:03:54,810
Liste ist immer sortiert, egal, was das Element darin ist.
Deswegen nutzen wir das Vorkommen einer anonymen Variable.

00:03:54,810 --> 00:04:02,460
Eine beliebige Liste ist sortiert, insbesondere Listen,
die mindestens zwei Elemente enthalten.

00:04:02,460 --> 00:04:08,340
Also wir zerlegen hier auf ähnliche Art und
Weise, wie wir das z.B. in den Übungen getan haben

00:04:08,340 --> 00:04:15,210
für das Beispiel, wo wir das erste Element einer Liste
haben wollten, wollen wir hier die ersten zwei Elemente der

00:04:15,210 --> 00:04:22,690
Xs-Liste haben. Also wir zerlegen Xs mittels des append-Prädikats
in die ersten zwei Elemente X und Y und irgendeine Restliste.

00:04:22,690 --> 00:04:29,020
Die könnte auch leer sein. Ys könnte leer sein.
Dann bestand das Xs eben aus

00:04:29,020 --> 00:04:34,450
genau zwei Elementen. Also dem nächstgrößeren
Fall nach keine Elemente oder ein Element.

00:04:35,920 --> 00:04:41,050
Also wir zerlegen das so. Greifen uns auf diese Weise sozusagen
die ersten beiden Listenelemente und können dann vergleichen,

00:04:41,050 --> 00:04:48,730
ob die in der richtigen Reihenfolge stehen. Also wenn jetzt
das erste X, das erste Element =< dem zweiten ist.



00:04:48,730 --> 00:04:53,590
Dann besteht zumindest eine Chance, dass die Liste insgesamt
sortiert ist. Wenn das hier nicht erfüllt ist,

00:04:53,590 --> 00:05:01,390
dann war die Ursprungsliste nicht sortiert. Und wir haben ja "Und".
Wir zerlegen das, und es muss gelten, dass X =< Y ist.

00:05:01,390 --> 00:05:07,840
Wenn das also nicht gilt, ist die Liste Xs nicht sortiert.
Wenn allerdings X =< Y ist, dann heißt es noch nicht, dass die Liste sortiert ist.

00:05:07,840 --> 00:05:13,000
Wir müssen uns noch um den Rest kümmern. Also naheliegend ist,
dass wir vielleicht sagen würden: "Die Restliste muss noch sortiert sein".

00:05:13,000 --> 00:05:20,830
Das reicht aber nicht. Das können wir uns überlegen:
Es muss auch noch gelten, dass das Y sich geeignet zu

00:05:20,830 --> 00:05:26,920
den Restelementen verhält. Eine Möglichkeit, das
auszudrücken, wäre zu sagen: "Nachdem wir geprüft haben, dass

00:05:26,920 --> 00:05:32,110
das erste =< dem zweiten Element ist, fügen wir das
zweite Element einfach wieder der Restliste hinzu. Bilden also

00:05:32,110 --> 00:05:38,500
damit die Liste Zs. Das sind dann alle Listenelemente
ohne das erste X, und dann prüfen wir, ob denn

00:05:38,500 --> 00:05:45,280
diese Restliste sortiert ist. Das ist dann der rekursive Aufruf".
Also isSorted hier nutzen, obwohl wir gleichzeitig auch isSorted

00:05:45,280 --> 00:05:50,560
definieren. Aber natürlich benutzen wir das auf einem anderen
Argument, auf einer anderen Liste. Und wenn wir uns anschauen,

00:05:50,560 --> 00:05:57,820
was hier insbesondere diese beiden append-Aufrufe
bedeuten, die bedeuten, dass Zs kürzer ist als Xs.

00:05:57,820 --> 00:06:04,870
Deswegen besteht hier eine echte Chance, dass dieses
rekursive Prädikat sinnvoll funktioniert. Das sagt also,

00:06:04,870 --> 00:06:11,170
wann eine Liste sortiert ist. Tatsächlich können wir
das überprüfen. Wenn wir das z. B. aufrufen für unsere

00:06:11,170 --> 00:06:17,200
Ursprungsliste [4,2,6,9,1], dann kommt heraus, dass sie nicht
sortiert ist. Für die Ergebnisliste, die gewünschte

00:06:17,200 --> 00:06:27,220
Ergebnisliste [1,2,4,6,9] käme heraus, dass sie sortiert ist.
Wichtig ist hier erst mal vor allem auf der Folie, wie

00:06:27,220 --> 00:06:32,080
das hier definiert ist. Insbesondere, dass man hier den
rekursiven Aufruf nicht einfach auf Ys machen kann,

00:06:32,080 --> 00:06:37,180
sondern auf einer Liste, die das Y noch mit enthält.
Das kann man sich überlegen, warum das sonst ein Problem wäre.

00:06:37,180 --> 00:06:42,250
Wenn wir mal zum Beispiel von dieser Liste die ersten beiden Elemente
ignorieren würden und die Liste [6,9,1] hätten,

00:06:42,250 --> 00:06:50,950
und die hier in das isSorted stecken,
dann wäre ja X = 6 und Y = 9. Wenn wir jetzt nur prüfen,

00:06:50,950 --> 00:06:58,090
würden, dass X =< Y ist, dann wäre das erfüllt. 6 =< 9 stimmt.
Und wir dann prüfen würden, ob die Restliste Ys sortiert ist,

00:06:58,090 --> 00:07:03,130
dann wäre die das, weil [1] ja sortiert ist.
Und dann würden wir behaupten, dass [6,9,1] sortiert ist.

00:07:03,130 --> 00:07:09,370
Wenn wir allerdings so wie hier sagen:
Es muss 6 =< 9 gelten und dann 9 wieder an die

00:07:09,370 --> 00:07:10,983
Restliste hängen, was dann diese Liste ergibt, und die muss sortiert
sein, dann stellt sich sehr schnell und richtigerweise heraus,

00:07:10,983 --> 00:07:24,370
dass diese Liste beziehungsweise auch schon diese Restliste hier nicht sortiert ist.
Also das (darüber können Sie etwas nachdenken oder

00:07:24,370 --> 00:07:29,650
können es ausprobieren) wäre eine sinnvolle Beschreibung
der Eigenschaft, dass eine Liste sortiert ist.

00:07:29,650 --> 00:07:34,210
Das liefert uns das "Was?" sozusagen. Wir wollen, dass die
Ergebnisliste sortiert ist. Das sagt uns noch nichts über

00:07:34,210 --> 00:07:43,810
das "Wie?" aus. Wir haben eine Liste, die ist nicht sortiert.
Wir wissen, wie eine Liste aussehen muss, damit sie sortiert ist.

00:07:43,810 --> 00:07:49,840
Das sagt uns ja noch nicht, wie wir algorithmisch
von der nicht sortierten Liste zur sortierten Liste kommen.

00:07:49,840 --> 00:07:54,430
Also das "Wie?" wäre dann das nächste Problem.
Wie können wir eine solche passende Liste erhalten

00:07:54,430 --> 00:07:58,900
beziehungsweise herstellen?
Wir wollen ja nicht einfach irgendeine sortierte Liste haben.

00:07:58,900 --> 00:08:03,910
Wir haben eine Ursprungsliste und wir hätten gern eine
sortierte Liste, die aus dieser Liste irgendwie entstanden ist.

00:08:03,910 --> 00:08:15,250
Wir wollen ja nicht einfach irgendeine solche Liste haben.
Das wäre einfach, da würden wir einfach die leere Liste nehmen.

00:08:15,250 --> 00:08:21,310
Die ist immer sortiert. Da kann man jetzt erst mal sehr naiv vorgehen und sagen:
"Eigentlich will ich ja einfach eine Permutation der Ursprungsliste haben,

00:08:21,310 --> 00:08:26,890
die sortiert ist". Die aufsteigend sortiert ist.
Ich habe eine Ursprungsliste. Die ist vielleicht nicht sortiert.

00:08:26,890 --> 00:08:32,440
Ich hätte gern eine Permutation dieser Ursprungsliste
mit der zusätzlichen Eigenschaft, dass das, was

00:08:32,440 --> 00:08:41,760
da nach der Permutation rauskommt, sortiert ist.
Das kann man tatsächlich so hinschreiben in Prolog.

119 # slide
00:08:41,760 --> 00:08:47,700
Wir haben an anderer Stelle ja auch schon einfach Forderungen in Queries/Anfragen
oder eben in Prädikaten hingeschrieben und Prolog dann nach Lösungen

00:08:47,700 --> 00:08:55,830
suchen lassen. Also man könnte jetzt sehr naiv vorgehen und sagen:
"Ich möchte gern Xs zu Ys sortieren". Das mache ich,

00:08:55,830 --> 00:09:00,660
indem ich sage: Ys muss eine Permutation von Xs sein.
Wir erinnern uns: Wir hatten für die Permutation

00:09:00,660 --> 00:09:09,330
ein Prädikat gesehen. Das hatte ich auf den Folien definiert.
Ich hatte aber auch gesagt, dass es auch ein

00:09:09,330 --> 00:09:15,570
vordefiniertes Permutationsprädikat mit
diesem gleichen Namen in Prolog schon gibt".



00:09:15,570 --> 00:09:20,460
Das heißt, wir müssen das, was auf der Folie steht,
hier gar nicht extra hinzufügen. Wir können einfach das.

00:09:20,460 --> 00:09:26,850
vordefinierte Permutationsprädikat verwenden.
Das liefert uns tatsächlich zu einer gegebenen Eingabeliste

00:09:26,850 --> 00:09:33,150
alle Permutationen. Hier hatten wir jetzt eine sortierte
Eingabeliste, und die Permutationen davon waren nicht unbedingt

00:09:33,150 --> 00:09:37,650
alle sortiert. Jetzt wollen wir das umgekehrt haben.
Wir geben irgendeine Liste vor, die nicht notwendigerweise sortiert ist.

00:09:37,650 --> 00:09:43,620
Dann würden wir alle Permutationen bekommen.
So wie hier: Alles aufgezählt. Alle Permutationen dieser Eingabeliste.

00:09:43,620 --> 00:09:53,220
Und dann wollen wir von den Ergebnissen eines
herausgreifen, was sortiert ist. Im Normalfall,

00:09:53,790 --> 00:10:04,930
beziehungsweise immer, wird das sogar eindeutig sein.
Es gibt zu jeder Liste genau ein sortiertes Äquivalent.

00:10:05,980 --> 00:10:11,560
Also wir sagen, um Xs zu Ys zu sortieren, permutieren wir Xs zu Ys.
Das würde auch Ergebnisse liefern, die natürlich

00:10:11,560 --> 00:10:15,580
nicht korrekt sind. Einfach irgendwelche Permutationen sind.
Und dann sagen wir aber noch: Dieses Ys muss sortiert sein.

00:10:15,580 --> 00:10:22,150
In dem Sinne, wie dieses Prädikat, das wir auch in Prolog
geschrieben haben, das ausdrückt.

00:10:22,150 --> 00:10:27,280
Das heißt, die Arbeit steckt hier in der Beschreibung,
was wir eigentlich wollen. Hier sagen

00:10:27,280 --> 00:10:32,470
wir einfach nur: Wir hätten gerne eine Permutation,
wofür wir schon ein Prädikat haben. Und die muss sortiert sein.

00:10:32,470 --> 00:10:38,470
Tatsächlich können wir so naiv vorgehen.
Das funktioniert. Wir könnten jetzt dieses Prädikat

00:10:38,470 --> 00:10:44,380
aufrufen, das nur aus dieser Regel besteht. Also auch nicht
irgendwie rekursiv ist. Das sortingTo-Prädikat ist

00:10:44,380 --> 00:10:51,730
nicht rekursiv. Das sagt einfach nur, was wir wollen.
Und tatsächlich würde das funktionieren. Wir könnten das in Prolog

00:10:51,730 --> 00:11:00,460
aufrufen und bekommen tatsächlich das gewünschte Ergebnis hier.
Das ist, wie gesagt, ein wenig naiv, aber überraschend vielseitig.

00:11:00,460 --> 00:11:08,290
Tatsächlich steckt dahinter eben das
allgemeine Generate and Test-Prinzip.

00:11:08,290 --> 00:11:16,300
Was ist hier die Idee? Wir wollen irgendwie eine Regel
auf Eingaben haben. In Prolog ist ja immer alles eine Eingabe,

00:11:16,300 --> 00:11:21,520
wenn wir das erst mal als Prädikat schreiben.
Hier steht nicht Ys ist das Ergebnis von sortieren Xs,

00:11:21,520 --> 00:11:26,830
sondern Xs und Ys sind irgendwelche Argumente, über
die es Bedingungen gibt. Und vielleicht rufen wir

00:11:26,830 --> 00:11:31,720
das nachher so auf, dass wir Xs angeben und nach R suchen.
Das muss nicht unbedingt so sein. Wir wollen

00:11:31,720 --> 00:11:37,570
erst mal formulieren, was es überhaupt heißt,
dass Ys und Xs in gewünschter Beziehung stehen.

00:11:37,570 --> 00:11:42,040
Und natürlich geht es darum, dass wir irgendein
Problem haben (z. B. das Sortierproblem) und

00:11:42,040 --> 00:11:46,720
wir versuchen, eine Regel aufzuschreiben, die genau dann true liefert,
wenn wir eine gültige Lösung für das Problem hätten.

00:11:46,720 --> 00:11:55,420
Das war hier die Aufgabe letztlich, ein Prädikat
zu schreiben, das korrekt ausdrückt, wann Ys eine

00:11:55,420 --> 00:12:00,310
sortierte Version von Xs ist. Und wir haben
das hier verlegt in zwei Teile. Hier sind die zwei Teile

00:12:00,310 --> 00:12:06,250
sehr offensichtlich, weil ich auf der rechten Seite dieser
gewünschten Regel genau zwei Aufrufe habe. Und zwar gibt

00:12:06,250 --> 00:12:13,180
es hier den ersten Teil. Das wäre der "Generate-Teil".
Der erzeugt irgendwie Lösungskandidaten.

00:12:13,180 --> 00:12:20,830
Und zwar sehr viele im Fall der Permutation.
Und dann gibt es den "Test-Teil", der unter den Kandidaten

00:12:20,830 --> 00:12:29,380
diejenigen herausfiltert, die gewünscht sind.
Also irgendwie gibt es einen Suchraum. Alle möglichen Permutationen

00:12:29,380 --> 00:12:35,440
der Ursprungsliste wären hier unser Suchraum gewesen.
Und es gibt den Testteil, der für Elemente des Suchraums

00:12:35,440 --> 00:12:40,510
überprüft, ob die Lösungsbedingung zutrifft. Also die Bedingung,
die erfüllt sein muss. In dem Fall wollten wir etwas sortieren.

00:12:40,510 --> 00:12:51,160
Also das Problem hier war das Sortierproblem und die Bedingung dazu war,
dass die Liste, die herauskommt, sortiert sein muss.

00:12:52,150 --> 00:12:58,480
Natürlich können das auch mehrere Bedingungen sein.
Hier ist das so ganz offensichtlich, dass es genau ein

00:12:58,480 --> 00:13:03,880
Prädikat für den Generate-Teil und für den Testteil gibt.
Im Allgemeinen können das auch jeweils

00:13:03,880 --> 00:13:18,640
mehrere Prädikatsaufrufe oder Bedingungen sein.
Lassen Sie uns das auf ein paar weiteren

00:13:18,640 --> 00:13:25,630
Beispielen vertiefen oder noch mal in Aktion sehen.
Das sind erst mal sehr einfache, künstliche

00:13:25,630 --> 00:13:30,850
Beispiele, wo wir einfach diese Unterscheidung
oder dieses Prinzip mehrmals in Aktion sehen wollen,

00:13:30,850 --> 00:13:38,440
um das identifizieren zu können, wann wir
so eine Generate und Test-Lösung haben.

00:13:38,440 --> 00:13:46,330
Und dann werde ich in späteren Videos noch anschaulichere
oder nützlichere Beispiele machen. Interessantere Beispiele,

120 # slide
00:13:46,330 --> 00:13:56,710
Interessantere Beispiele, größerer Beispiel.
Stellen wir uns folgende Aufgabe oder stellen Sie sich

00:13:56,710 --> 00:14:03,220
vor, Ihnen sei als Aufgabe gestellt:
Es mögen alle Möglichkeiten ermittelt werden, wie man bei

00:14:03,220 --> 00:14:10,390
dreimaligem Würfeln insgesamt 15 Punkte erzielen kann.
Also wir haben drei Würfel oder einen Würfel.



00:14:10,390 --> 00:14:14,410
den wir dreimal würfeln. Da kommt jeweils eine
Augenzahl zwischen eins und sechs heraus.

00:14:14,410 --> 00:14:19,960
Am Ende wird zusammengezählt und die Frage ist: Auf welche
Art und Weise könnte es sein, dass am Ende genau 15 Punkte erzielt wurden?

00:14:19,960 --> 00:14:27,700
Was hieße hier das Generieren?
Generieren hieße hier, alle

00:14:27,700 --> 00:14:34,000
Kandidaten zu erzeugen, was bei diesen drei Würfelwürfen
herausgekommen sein könnte. Da geht es nicht ums Permutieren.

00:14:34,000 --> 00:14:41,380
Da ist nichts, was irgendwie permutiert wird.
Wir müssen einfach alle Kombinationen haben, die diese

00:14:41,380 --> 00:14:47,170
drei Würfel als Augenzahlen haben könnten.
Und das Testen ist dann sicherlich die Überprüfung, ob denn

00:14:47,170 --> 00:14:53,050
15 Punkte herausgekommen sind. Und wenn wir genau dieser Strategie
folgen, können wir das tatsächlich als eine Anfrage schreiben.

00:14:53,050 --> 00:14:58,150
Wir könnten das auch in Regeln verpacken.
Ich mache das jetzt bei diesen einfachen Beispielen so,

00:14:58,150 --> 00:15:02,110
dass ich einfach direkt immer die Anfrage hinschreibe,
die man in Prolog prompt eingeben könnte.

00:15:02,110 --> 00:15:07,960
Man könnte natürlich auch ein Prädikat schreiben "Lösung"
mit den Argumenten und dann was ich jetzt anfrage,

00:15:07,960 --> 00:15:12,790
als rechte Seite dieses Prädikats nehmen und
der Aufruf des Prädikats würde dann die Lösungen liefern.

00:15:12,790 --> 00:15:19,720
Ich mache das jetzt hier so, dass ich das direkt als Query angebe.
Und dann kann man das hier fast wortwörtlich übersetzen,

00:15:19,720 --> 00:15:25,420
was ich gerade so angedeutet habe. Also, wir müssen natürlich
festhalten, was überhaupt die möglichen Augenzahlen sind.

00:15:25,420 --> 00:15:34,450
Hier steht nur Würfeln. Ich meine einen W6. Also, es gibt die Ergebnisse [1, 2, 3, 4, 5, 6].
Da kann ich sagen, das ist sozusagen eine Komponente meines Suchraums.

00:15:34,450 --> 00:15:42,040
Das ist nicht direkt der Suchraum. Es gibt ja nicht nur 6 Kandidaten,
sondern wir haben ja drei Würfe.

00:15:42,040 --> 00:15:46,720
Also gibt es irgendwie 6 × 6 × 6 Kandidaten, wenn wir kombinatorisch
darüber nachdenken. Und wie kann ich

00:15:46,720 --> 00:15:53,200
den Suchraum generieren? Ich kann sagen: A sei
das Ergebnis meines ersten Würfelwurfs. Und das muss

00:15:53,200 --> 00:15:58,480
eine Zahl von eins bis sechs sein. Also ein Element dieser
Liste. Und das member-Prädikat hatte ich letzte Woche eingeführt

00:15:58,480 --> 00:16:07,060
und erwähnt, dass da geprüft wird, ob A in W ist.
Oder wenn wir das nicht mit konkreten Werten aufrufen,

00:16:07,060 --> 00:16:13,900
sondern mit Variablen, dann werden alle
Möglichkeiten betrachtet, wie A aus W sein kann.

00:16:13,900 --> 00:16:19,540
Das heißt, wenn W eine sechselementige Liste ist, wird allein
dieser Aufruf hier schon zu sechs verschiedenen Kandidaten führen.

00:16:19,540 --> 00:16:26,170
Das Gleiche passiert für B und C.
Also B und C seien die Augenzahlen des zweiten und

00:16:26,170 --> 00:16:32,590
dritten Wurfes. Und das sind auch Elemente
dieser sechselementigen Liste. Das heißt, mit diesen

00:16:32,590 --> 00:16:39,220
drei Aufrufen hier spanne ich den Suchraum auf.
Ich ziehe nämlich sozusagen A, B und C jeweils

00:16:39,220 --> 00:16:46,290
unabhängig voneinander aus dieser Liste.
Und dann prüfe ich, ob denn die Summe von A, B und C 15 ist.

00:16:46,290 --> 00:16:54,330
Jetzt muss ich kurz erklären, was das hier bedeutet.
Das ist die sozusagen arithmetische Berechnung

00:16:54,330 --> 00:16:59,850
und der Vergleich der Ergebnisse. Da gibt es einen kleinen Unterschied.
Diese W = hier vorn, das berechnet ja nichts.

00:16:59,850 --> 00:17:04,110
Da geht es nicht um Arithmetik, nicht um Zahlen,
nicht um Addieren, Multiplizieren oder so.

00:17:04,110 --> 00:17:12,420
Hier wird einfach gesagt: Die Variable W sei dieser Liste gleich.
Das möchte ich hier nicht machen. Ich möchte hier nicht schreiben:

00:17:12,420 --> 00:17:20,130
A + B + C = 15. A + B + C, das sind ja einfach
irgendwelche Zahlen und + ist nur ein Symbol.

00:17:20,130 --> 00:17:25,740
Da wird also nicht gerechnet werden. Also, was ich hier sage, ist
tatsächlich: Was auch immer hier steht, für konkrete A, B, C

00:17:25,740 --> 00:17:31,410
steht eine Summe. Die soll ausgerechnet werden und dann
mit der Konstante 15 verglichen werden. Und wenn ich das so machen

00:17:31,410 --> 00:17:36,210
möchte, kann ich nicht das normale = benutzen.
Dieses einfache Symbol. Ich brauche dieses spezielle Symbol,

00:17:36,210 --> 00:17:42,390
was eben arithmetische Vergleiche macht. Die linke und
rechte Seite berechnet (wie ein Taschenrechner)

00:17:42,390 --> 00:17:51,790
und dann schaut, ob die gleiche Zahl herausgekommen ist.
Dann hätte ich diese Aufgabe hier gelöst. Sie können das mal

00:17:51,790 --> 00:17:59,830
ausführen, einfach an in Prolog. Und dann
würden Sie geeignete Antworten bekommen, wie denn

00:17:59,830 --> 00:18:07,570
A, B, C aussehen könnten, sodass sie jeweils Würfe des W6
sind und die Summe 15 ist.

00:18:07,570 --> 00:18:17,710
Zur Identifizierung noch mal: Der Generate-Teil wäre hier
das + dem. Da wird der Suchraum aufgespannt.

00:18:17,710 --> 00:18:27,490
Die einfache Bedienung hier ist einfach nur: A + B + C soll 15 ergeben.
Machen wir das Beispiel etwas interessanter:

121 # slide
00:18:27,490 --> 00:18:37,450
Stellen wir uns vor, ich möchte gern wissen,
für welche Möglichkeiten es so ist, dass wir bei dreimaligem

00:18:37,450 --> 00:18:43,480
Würfeln verschiedene Augenzahlen hatten und
insgesamt wieder 15 herausgekommen ist.

00:18:43,480 --> 00:18:49,270
Wenn wir das hier aufrufen, werden wir auch Kombinationen von
A, B, C bekommen, wo A und B zum Beispiel gleich sind

00:18:49,270 --> 00:18:53,350
oder wo alle drei einfach 5 sind. A = 5, B = 5, C = 5
wäre hier eine Lösung.



00:18:53,350 --> 00:18:59,890
Angenommen, mein Problem ist eigentlich anders.
Ich möchte keine wiederholten Augenzahlen haben.

00:18:59,890 --> 00:19:04,900
Ich frage mich, wenn ich dreimal würfle und dreimal
etwas Verschiedenes herausgekommen ist, unter welchen Bedingungen

00:19:04,900 --> 00:19:14,620
dann noch 15 entstanden sein kann. Wie kann ich das umsetzen?
Ich werde einfach überlegen, ob ich entweder

00:19:14,620 --> 00:19:28,060
meinen Generator oder meinen Tester erweitere.
Man könnte sagen, statt einfach alle Kandidaten zu

00:19:28,060 --> 00:19:37,120
erzeugen, alle drei Wahlen, sozusagen A, B, C aus dem Raum 1 bis 6
und alle Kombinationen davon, möchte ich von

00:19:37,120 --> 00:19:44,410
vorn herein nur diejenigen Kombinationen haben,
wo A, B, C verschieden sind. Eine Möglichkeit wäre einfach

00:19:44,410 --> 00:19:52,870
zu sagen: Man macht das Gleiche wie eben, aber fügt hier noch etwas hinzu.
Also wieder [1,2,3,4,5,6] als die Würfelaugenzahlen.

00:19:52,870 --> 00:20:00,880
A, B, C sollen aus diesem Bereich kommen. Und es wird noch geprüft,
dass A ungleich B, A ungleich C und B ungleich C.

00:20:00,880 --> 00:20:08,460
Die müssen paarweise verschieden sein.
Das kann man dieses \= hier erreichen oder ausdrücken.

00:20:08,460 --> 00:20:18,000
Dann wäre das hier insgesamt die Beschreibung
des Suchraumes. Komplizierter beschrieben,

00:20:18,000 --> 00:20:24,000
führt allerdings zu einem kleineren Suchraum.
Und unter denen wird dann wieder diese Bedingung überprüft.

00:20:24,000 --> 00:20:31,320
Da wird jetzt natürlich eine echte Teilmenge
der Ergebnisse dieser Anfrage herauskommen,

00:20:31,320 --> 00:20:44,910
weil ja zusätzliche Einschränkungen an
die Elemente des Suchraums getroffen worden sind.

00:20:44,910 --> 00:20:49,530
Oder man kann das hier tatsächlich geschickter und kürzer ausdrücken,
wenn man geeignete vorhandene Prädikate benutzt.

00:20:49,530 --> 00:20:57,420
Was heißt das denn, dass ich drei
verschiedene Elemente aus dieser Liste habe?

00:20:57,420 --> 00:21:05,280
Wenn ich drei verschiedene Elemente aus dieser Liste habe,
dann sind das drei Elemente einer Permutation.

00:21:05,280 --> 00:21:12,570
Denn bei Permutationen wird ja kein Element der
Ursprungsliste doppelt verwendet. Also eine Möglichkeit

00:21:12,570 --> 00:21:20,820
wäre auch zu sagen, ich betrachte Permutationen von [1,2,3,4,5,6].
Aus der Permutation greife ich mir jeweils

00:21:20,820 --> 00:21:30,390
die ersten drei Elemente. Die anderen drei sind mir egal.
Und das ist mein Suchraum. Das ist knapper ausgedrückt.

00:21:30,390 --> 00:21:38,160
Vielleicht auch deklarativer ausgedrückt.
Und gibt einfach eine kürzere Art und Weise, diesen Suchraum zu beschreiben.

00:21:38,160 --> 00:21:44,070
Die Bedingung wiederum ist die gleiche wie oben.
Ich habe hier sozusagen nur den Generate-Teil vereinfacht

00:21:44,070 --> 00:21:53,280
oder schicker gemacht. Semantisch von der Bedeutung her
ist das genau das Gleiche. Man beachte hier auch diese Unterstriche.

00:21:53,280 --> 00:21:59,070
Ich kann natürlich nicht schreiben, [A,B,C] ist eine Permutation
von [1,2,3,4,5,6]. Das gäbe gar keine Lösung.

00:21:59,070 --> 00:22:05,340
Denn die Permutation muss ja auch wieder sechs Elemente enthalten.
Aber ich kann sagen, von den Permutationen interessieren

00:22:05,340 --> 00:22:11,070
mich nur die ersten drei Elemente. Das heißt, ich
verwende hier anonyme Variablen. Das steht einfach für:

00:22:11,070 --> 00:22:16,670
„Die restlichen Variablen sind mir egal. Ich weiß und brauche sie nicht.“
Und wenn Sie das wieder ausprobieren würden, werden Sie feststellen,

00:22:16,670 --> 00:22:28,430
dass Sie auch damit diese Aufgabe tatsächlich lösen können.
Noch eine letzte Variation dieses Beispiels.

00:22:28,430 --> 00:22:33,050
Stellen wir uns vor, das soll noch interessanter oder noch
komplizierter sein. Und zwar geht es uns jetzt darum

00:22:33,050 --> 00:22:41,390
alle Möglichkeiten zu betrachten oder zu erhalten,
sodass bei dreimaligem Würfeln, ohne dass sich

00:22:41,390 --> 00:22:49,310
eine Augenzahl wiederholt und wir das Glück
haben oder die Situation haben, dass die Augenzahlen

00:22:49,310 --> 00:22:56,000
in aufsteigender Reihenfolge aufgetreten sind.
Also es kann nicht mehr sein, dass wir erst 6, dann 5, dann 4

00:22:56,000 --> 00:23:02,510
geworfen haben. Das sind zwar drei Würfe, die
verschieden sind und die insgesamt 15 ergeben.

00:23:02,510 --> 00:23:12,680
Sondern wir betrachten nur Fälle, wo zum Beispiel 4, 5, 6
geworfen worden sind. Können wir das auch ausdrücken?

00:23:12,680 --> 00:23:17,360
Da müssen wir irgendwie noch stärkere Aussagen über A, B, C treffen,
als nur, dass sie verschieden sind. Was wir entweder hier oder hier

00:23:17,360 --> 00:23:24,740
durch die Verwendung der Permutation ausgedrückt haben.
Was könnten wir machen? Wir könnten unser isSorted-Prädikat verwenden,

00:23:24,740 --> 00:23:29,810
das wir vorhin bei dem anderen Problem definiert haben.
Das ist immer nett, wenn wir vorhandene Prädikate nachnutzen können.

122 # slide
00:23:29,810 --> 00:23:39,680
Also es geht jetzt hier um diesen Zusatz: Es soll nur
Konstellationen betrachtet werden, wo die verschiedenen Augenzahlen

00:23:39,680 --> 00:23:45,110
in aufsteigender Reihenfolge waren.
Und insgesamt sollen sie nach wie vor 15 ergeben.

00:23:45,710 --> 00:23:49,340
Eine Lösung könnte sein, dass wir einen dieser beiden Lösungen nehmen.
Zum Beispiel die zweite, weil sie von sich aus schon kurz ist.

00:23:49,340 --> 00:23:56,210
Und einfach noch fordern, dass [A,B,C]
tatsächlich eine aufsteigende Sequenz ist.

00:23:56,210 --> 00:24:03,680
Also könnten wir sagen: Wir betrachten Permutationen für [1,2,3,4,5,6].
Schauen uns von diesen Permutationen die ersten drei Elemente an.

00:24:03,680 --> 00:24:09,740
Die anderen sind uns egal, weil wir einfach
drei Augenzahlen brauchen. Und wir fordern auch noch,



00:24:09,740 --> 00:24:15,500
dass A, B, C in aufsteigender Reihenfolge sind.
Verwenden wir also unser isSorted-Prädikat, das wir vorhin bei

00:24:15,500 --> 00:24:20,570
der Permutationssortierung verwendet haben.
Und nach wie vor soll natürlich A + B + C = 15 ergeben.

00:24:20,570 --> 00:24:29,630
Jetzt könnte man sich wieder überlegen, wie man das interpretiert.
Jetzt haben wir hier drei Prädikate, drei Forderungen.

00:24:29,630 --> 00:24:36,170
Was davon ist Generate und was davon ist Test?
Da gibt es zumindest in diesem Beispiel tatsächlich

00:24:36,170 --> 00:24:42,540
Interpretationsspielraum. Man könnte sagen, diese beiden Sachen zusammen,
der Permutationsaufruf und der isSorted-Aufruf zusammen,

00:24:42,540 --> 00:24:49,410
beschreiben den Suchraum, weil unsere Kandidaten eben
genau drei verschiedene Augenzahlen

00:24:49,410 --> 00:24:56,310
in aufsteigender Reihenfolge sein sollen.
Das wäre unser Suchraum. Und Test wäre nur,

00:24:56,310 --> 00:25:04,350
dass die Summe dieser drei Kandidatenwerte 15 ergibt.
Oder wir könnten sagen, wir nehmen die Perspektive ein,

00:25:04,350 --> 00:25:12,600
dass das der Generationsteil ist.
Also unser Suchraum umfasst wie im Beispiel davor

00:25:12,600 --> 00:25:19,650
einfach alle dreimaligen Würfel mit
verschiedenen Ergebnissen und die Forderung,

00:25:19,650 --> 00:25:26,700
dass die in aufsteigender Reihenfolge sortiert sein sollen,
das interpretieren wir als Teil des Tests.

00:25:26,700 --> 00:25:36,090
Also der Auswertung der Kandidaten. Das ändert
nichts an der Korrektheit dieser Lösung.

00:25:36,090 --> 00:25:41,580
Generate and Test ist ein Prinzip, wie man an bestimmte Problemstellungen
herangehen kann. Das lässt uns immer noch Freiheit zu formulieren,

00:25:41,580 --> 00:25:52,750
was unser Generator ist und was unser Test ist.
Im Folgenden werden wir einige Beispiele sehen.

00:25:52,750 --> 00:25:58,900
Nicht mehr in diesem Video, aber zur zwischen
Zusammenfassung eine kurze Betrachtung, wann wir das

00:25:58,900 --> 00:26:04,840
einsetzen werden. Also wann ist so ein Generate-and-Test
Ansatz sinnvoll? Der kann nicht jedes Problem lösen.

00:26:04,840 --> 00:26:11,500
Das kann man sich leicht überlegen. Schon das Sortieren
durch Permutieren ist nicht besonders effizient.

00:26:11,500 --> 00:26:18,430
Wenn Sie lange Listen haben, gibt es einfach sehr viele
Permutationen und da müsste man ja im Prinzip alle

00:26:18,430 --> 00:26:24,160
Permutationen erzeugen und jede einzelne auf Sortiertheit testen.
Das heißt noch nicht, dass Prolog das genauso macht.

00:26:24,160 --> 00:26:31,900
Prolog hat eine effiziente Implementierung.
Kann also tatsächlich auch unter Umständen bestimmte Suchteile durch

00:26:31,900 --> 00:26:39,520
clevere Implementierung abkürzen. Aber zumindest
konzeptionell kann der Suchraum ja sehr groß sein.

00:26:39,520 --> 00:26:47,560
Und beim Permutieren ist das in der Regel so, wenn die Listen
nicht eher kurz sind. Also muss man das schon mit Augenmaß betreiben.

00:26:47,560 --> 00:26:52,960
In der Vorlesung und in den Übungen werden dann natürlich Beispiele
drankommen, wo das tatsächlich auch sinnvoll ist.

00:26:52,960 --> 00:26:58,570
Ein sinnvolles Kriterium ist,
die Menge der potenziellen Lösungen, der Kandidaten,

00:26:58,570 --> 00:27:05,740
sollte zumindest enfinit sein. Also es darf nicht unendlich
viele Lösungen geben. Da kommt man mit dem Testen ja nicht zum Schluss.

00:27:05,740 --> 00:27:14,350
Noch besser ist, wenn der Suchraum möglichst klein ist.
Das ist natürlich eine Interpretationsfrage:

00:27:14,350 --> 00:27:19,960
Wann ist klein genug? In den Beispielen, die wir hier gesehen
haben, war das alles kein Problem. Also bei einem

00:27:19,960 --> 00:27:29,440
Suchraum mit sechs Elementen ist die Anzahl der Permutationen
noch beherrschbar. Das wäre ein Indiz dafür,

00:27:29,440 --> 00:27:36,070
dass man mit Generate und Test arbeiten kann.
Es kann natürlich auch sein, dass das Problem doch größer ist

00:27:36,070 --> 00:27:41,770
oder es doch einen größeren Suchraum gibt und man dennoch
mit Generate und Test arbeiten möchte. Warum?

00:27:41,770 --> 00:27:46,240
Vielleicht, weil man einfach keine andere Vorstellung hat.
Weil man entweder noch keine algorithmischen Prinzipien

00:27:46,240 --> 00:27:51,970
dafür kennt oder das Problem tatsächlich algorithmisch
sehr schwer systematisch zu erfassen ist.

00:27:51,970 --> 00:28:00,720
Da kann es sein, dass man auf Generate and Test
zurückgreift, weil es zumindest vom Aufwand

00:28:00,720 --> 00:28:06,900
des Programmschreibens relativ gering ist.
Auch wenn vielleicht die Ausführung dann länger dauert.

00:28:08,130 --> 00:28:15,510
Also kann es auch, weil sich das Problem nicht
auf offensichtliche Art und Weise irgendwie einer

00:28:15,510 --> 00:28:23,150
systematischen Lösung zuführen lässt, durchaus
lohnend sein, es mal mit Generate and Test zu probieren.

00:28:23,150 --> 00:28:26,100
Und wie Sie natürlich wissen, da Sie [als Komedia-Studierende] noch keine
Algorithmen-Vorlesung und noch keine

00:28:26,100 --> 00:28:33,840
dedizierte Programmiervorlesung gehört haben, kann
Generate and Test einfach mindestens im Übungsbetrieb

00:28:33,840 --> 00:28:40,560
bei uns, aber auch in anderen Anwendungen, erst mal ein
gut gangbarer Weg sein. Natürlich ist dieses zweite

00:28:40,560 --> 00:28:45,420
Kriterium ein bisschen eine Ausrede. Wenn ich nichts
anderes mehr weiß, dann mache ich eben Generate-and-Test.

00:28:45,420 --> 00:28:52,410
So kann man das natürlich auffassen. Allerdings ist
Prolog tatsächlich sehr gut geeignet, solche Lösungen knapp

00:28:52,410 --> 00:29:00,000
aufzuschreiben. Und das kann dann sicher schon ein erster
Ansatz sein, dass man schnell zu einem Programm kommt.

00:29:00,000 --> 00:29:09,000
Das waren hier natürlich immer noch sehr künstliche Beispiele.
Wir schauen mal auf zwei etwas interessantere Beispiele in zwei weiteren Videos.

