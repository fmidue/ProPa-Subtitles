79 # slide
00:00:01,520 --> 00:00:04,720
Lassen Sie uns nun ein komplizierteres Beispiel betrachten.

00:00:04,720 --> 00:00:08,400
Das Programm von vorhin mit der Multiplikation.

00:00:08,400 --> 00:00:10,640
Und das wird ein Beispiel sein, bei dem wir

00:00:10,640 --> 00:00:15,760
sofort, nach ein paar Schritten,
eine unendliche Suche sehen.

00:00:15,760 --> 00:00:21,600
Und das passiert sogar bei einfacheren Abfragen
als bei den Abfragen auf den vorherigen Folien,

00:00:21,600 --> 00:00:28,400
ein paar Folien zurück, wo wir eine Multiplikation
von n und m und dann einen größeren Term hier.

00:00:28,960 --> 00:00:34,240
Es stellt sich heraus, dass, selbst wenn wir nur
nach der Multiplikation von zwei

00:00:35,680 --> 00:00:40,720
Werten fragen, was das Ergebnis
1 ergeben sollte, erhalten wir eine unendliche Suche.

00:00:41,680 --> 00:00:46,320
Auch wenn es eine offensichtliche Lösung gibt, wird Prolog diese nicht finden,

00:00:47,120 --> 00:00:48,400
wird diese nicht entdecken.

00:00:48,400 --> 00:00:50,320
Und wir werden dies nutzen, um

00:00:52,000 --> 00:00:56,720
Visualisierung, Veranschaulichung der Ableitungsbäume
zu veranschaulichen, und zwar in einer komplexeren Umgebung.

00:00:56,720 --> 00:01:00,560
Und wir werden herausfinden, warum diese
unendliche Suche passiert.

00:01:00,560 --> 00:01:01,060
Also gut.

00:01:01,920 --> 00:01:04,080
Also, mal sehen, wie fangen wir an?

00:01:04,080 --> 00:01:09,360
Mit der intuitiven Erklärung von Ableitungsbäumen.

00:01:09,360 --> 00:01:10,000
Was sollten wir tun?

00:01:10,000 --> 00:01:16,000
Nun, wir sollten sehen, ob diese Abfrage, die wir
haben, und zwar das erste Literal in der

00:01:16,000 --> 00:01:20,720
Abfrage, das das einzige Literal ist, ob es
mit dem Kopf einer beliebigen Programmklausel übereinstimmt.

00:01:20,720 --> 00:01:23,600
Natürlich sind die zusätzlichen
Klauseln hier nicht relevant.

00:01:23,600 --> 00:01:26,160
Wir müssen uns nur die
Multiplikationsklauseln ansehen.

00:01:26,160 --> 00:01:27,840
Und tatsächlich lässt sich die erste Klausel nicht

00:01:27,840 --> 00:01:31,200
unifizieren, weil wir an der letzten Stelle
hier 0 und hier s(0) haben.

00:01:31,200 --> 00:01:34,000
Es gibt keine positive Übereinstimmung,
es findet keine Unifikation statt.

00:01:34,000 --> 00:01:40,960
Die einzige Möglichkeit ist also die Unifikation
der zweiten Programmklausel für die Multiplikation.

00:01:40,960 --> 00:01:42,480
Also, die letzte Klausel des Programms.

00:01:43,680 --> 00:01:44,080
Geht das?

00:01:44,080 --> 00:01:45,280
Ist diese unifizierbar?

00:01:45,280 --> 00:01:47,200
Ja, das ist sie.

00:01:47,200 --> 00:01:54,640
Wie Sie sehen, können Sie n durch s(x) ersetzen,
M durch Y oder Y durch M, und Z durch s(0).

00:01:55,440 --> 00:01:56,800
Und dann haben wir einen Unifikator.

00:01:56,800 --> 00:01:58,640
Okay, das ist genau das, was wir tun.

00:01:58,640 --> 00:02:03,840
Und eigentlich vermeide ich im ersten Schritt
eine Zahl zu allen Variablen hinzuzufügen.

00:02:03,840 --> 00:02:05,600
Das werde ich in den späteren Schritten tun.

00:02:05,600 --> 00:02:12,000
Da also N und M und X, Y,
Z unterschiedlich sind, besteht keine Gefahr der Verwechslung.

00:02:12,000 --> 00:02:14,640
Außerdem kommt das u hier nicht in der Abfrage vor.

00:02:14,640 --> 00:02:18,640
Im ersten Schritt besteht keine Notwendigkeit,
im ersten Schritt etwas zu benennen.

00:02:18,640 --> 00:02:19,760
Später werde ich das tun.

00:02:19,760 --> 00:02:24,800
Okay, also eine einfache Unifikation,
was ist dann die nächste Abfrage?

00:02:24,800 --> 00:02:27,840
Nun, es ist die rechte Seite dieser Klausel.

00:02:27,840 --> 00:02:36,240
Denn dieses Literal wird durch
die rechte Seite der Programmklausel ersetzt.

00:02:36,240 --> 00:02:39,360
Aber natürlich mit dieser Ersetzung.

00:02:39,360 --> 00:02:41,920
Und wenn Sie genau hinschauen, sehen wir, dass, nun ja,

00:02:41,920 --> 00:02:44,560
n und m nicht einmal auf der
rechten Seite vorkommen.

00:02:44,560 --> 00:02:48,400
Das einzige, was ersetzt werden muss, ist also
Z, das hier vorkommt.

00:02:48,400 --> 00:02:50,000
Es muss durch s(0) ersetzt werden.

00:02:50,720 --> 00:02:52,560
Okay, die nächste Abfrage ist also diese hier.

00:02:53,760 --> 00:02:57,920
Die rechte Seite dieser Klausel,
wobei Z durch s(0) ersetzt wird.

00:02:58,480 --> 00:03:01,760
Okay, als Nächstes sehen wir uns das hier an.

00:03:01,760 --> 00:03:05,920
Jetzt haben wir zum ersten Mal in einem Beispiel,
zwei Literale in unserer Abfrage.

00:03:06,720 --> 00:03:09,920
Und in der verbalen Beschreibung
habe ich gesagt, dass wir immer

00:03:10,560 --> 00:03:15,280
das am weitesten links stehende Literal auswählen und
nach Resolutionsmöglichkeiten suchen.

00:03:15,280 --> 00:03:17,360
Wir müssen uns das also ansehen.

00:03:17,360 --> 00:03:20,640
Wir sehen uns nicht die Addition an, wir
schauen uns dieses Multiplikationsliteral an.

00:03:20,640 --> 00:03:25,200
Und versuchen, es mit dem
Kopf einer Programmklausel.

00:03:25,200 --> 00:03:27,600
Natürlich ist die Additionsklausel wieder irrelevant.

00:03:28,640 --> 00:03:35,120
Und von diesen beiden Klauseln können wir jetzt eigentlich
keine ausschließen, weil beide unifiziert werden könnten.

00:03:36,800 --> 00:03:40,240
Die Situation war im ersten Schritt anders,
denn wir hatten hier dieses s(0), das

00:03:40,240 --> 00:03:42,160
eindeutig nicht mit der 0 unifiziert werden konnte.

00:03:42,160 --> 00:03:47,120
Aber da wir jetzt mult(X, Y, U) haben, also
drei Variablen haben, besteht eine gute Chance, dass

00:03:47,120 --> 00:03:52,480
wir tatsächlich mit beiden Köpfen mit dem
Kopf dieser zweiten Klausel.

00:03:52,480 --> 00:03:54,080
Das ist in der Tat der Fall.

00:03:54,080 --> 00:03:55,520
Okay, in welcher Reihenfolge machen wir das?

00:03:55,520 --> 00:03:57,200
Nun, von oben nach unten.

00:03:57,200 --> 00:04:01,040
Wir sehen uns also die erste Klausel des Programms an.


00:04:01,040 --> 00:04:04,800
Das ist der erste Nachfolger,
den wir für diese Abfrage erstellen.

00:04:06,080 --> 00:04:07,760
Okay, und was ist der Unifikator dort?

00:04:08,720 --> 00:04:15,840
Nun, dieses X wird zu 0, dieses Y wird zu
der Unterstrich, die anonyme Variable.

00:04:15,840 --> 00:04:20,160
Und um auf der sicheren Seite zu sein, haben wir
auch Zahlen für diese Variablen eingeführt.

00:04:20,160 --> 00:04:21,680
Denn sie könnten relevant sein.

00:04:21,680 --> 00:04:26,000
Ich meine, sie sind nicht relevant im Sinne von,
dass sie dem Benutzer am Ende als Ergebnis angezeigt werden.

00:04:26,000 --> 00:04:29,200
Aber sie werden bei der Substitution vorkommen.

00:04:29,200 --> 00:04:34,240
Wir sollten also in der Lage sein, sie zu unterscheiden, falls es mehrere Unterstrich-Variablen gibt.

00:04:34,240 --> 00:04:36,480
Okay, sie bekommen also eine Reihe von diesen, die auch

00:04:36,480 --> 00:04:41,840
ähnlich wie die künstlichen Variablennamen sind, die Sie
manchmal erhalten, wenn Prolog Ihnen eine Antwort gibt.

00:04:42,960 --> 00:04:49,360
Okay, deshalb haben wir hier das _1
und das U aus der Abfrage wird durch 0 ersetzt.

00:04:49,360 --> 00:04:54,080
Ja, das ist der allgemeinste Unifikator zwischen diesem

00:04:54,080 --> 00:04:58,960
Literal und der ersten Klausel hier,
dem Kopf der ersten Klausel.

00:04:58,960 --> 00:05:01,280
Okay, und es wird einen weiteren Nachfolger geben,

00:05:01,280 --> 00:05:06,640
denn dieser unifiziert sich auch mit dem
Kopf der zweiten Multiplikationsklausel.

00:05:06,640 --> 00:05:09,840
Aber wir werden uns das ansehen, nachdem
wir diese Verzweigung beendet haben.

00:05:10,720 --> 00:05:13,120
Okay, was ist die nächste Abfrage hier?

00:05:14,800 --> 00:05:18,960
Nun, wir müssen die Literale ersetzen,
die wir für die Resolution verwendet haben

00:05:19,680 --> 00:05:23,760
durch die rechte Seite der entsprechenden Klausel.

00:05:23,760 --> 00:05:25,840
Dies ist die leere rechte Seite.

00:05:25,840 --> 00:05:28,240
Wir ersetzen sie also durch leer.

00:05:28,240 --> 00:05:33,440
Aber anders als im vorherigen Beispiel bedeutet dies
nicht, dass die Abfrage jetzt schon beendet ist.

00:05:33,440 --> 00:05:35,120
Denn es gab ja einen Kontext, nicht wahr?

00:05:35,120 --> 00:05:39,600
Wenn wir also vorher einen Fakt verwendet haben, waren
wir fertig, wir konnten das Feld zeichnen, weil

00:05:40,240 --> 00:05:41,920
wir bei der leeren Abfrage angekommen waren.

00:05:41,920 --> 00:05:45,200
Aber das war nur, weil wir vorher
immer nur ein Literal in der Abfrage hatten.

00:05:45,200 --> 00:05:48,720
Wenn wir dieses nun durch leer ersetzen,
sind wir immer noch nicht bei der leeren Abfrage angelangt.

00:05:48,720 --> 00:05:52,160
Denn es gibt noch dieses andere
Literal noch in der Abfrage.

00:05:53,040 --> 00:05:56,880
Und wir können nicht einfach dieses
Literal als nächste Abfrage verwenden,

00:05:56,880 --> 00:06:01,040
denn wir müssen auch den
Unifikator auf den gesamten Kontext anwenden.

00:06:01,040 --> 00:06:06,720
Die nächste Abfrage wird also tatsächlich
die nächste Abfrage sein, wobei X, Y und U

00:06:07,760 --> 00:06:09,840
gemäß der Substitution ersetzt.

00:06:10,720 --> 00:06:12,080
Das ist also unser Ergebnis.

00:06:14,640 --> 00:06:17,680
X kommt also nicht vor, aber
U sollte durch 0 ersetzt werden.

00:06:17,680 --> 00:06:19,680
Sie haben hier also 0.

00:06:19,680 --> 00:06:23,120
Das Y wird durch diese
bestimmte anonyme Variable ersetzt.

00:06:23,840 --> 00:06:25,840
Und das s(0) ist immer noch das, was es war.

00:06:25,840 --> 00:06:26,340
Aha.

00:06:27,360 --> 00:06:29,360
Okay, das ist also das nächste,
worauf Sie arbeiten sollten.

00:06:29,360 --> 00:06:36,720
Denn unter all den unvollendeten Abfragen ist auch die,
die hier erscheinen würde, nach diesem Schritt mit

00:06:36,720 --> 00:06:42,720
der zweiten Multiplikationsklausel, verwenden wir immer
diejenige, die am weitesten links steht, als Nächstes in Betracht.

00:06:42,720 --> 00:06:45,840
Das ist also der Punkt, an dem wir Fortschritte machen müssen.

00:06:46,640 --> 00:06:52,160
Wir müssen also versuchen, dies mit allen
Klauseln des Programms zu unifizieren.

00:06:52,160 --> 00:06:54,960
Natürlich kann es nur unifiziert werden
mit den Zusatzklauseln.

00:06:54,960 --> 00:06:58,800
Und tatsächlich lässt sie sich nicht unifizieren
mit der zweiten Zusatzklausel.

00:06:58,800 --> 00:07:02,000
Das liegt daran, dass hier s(etwas) gegen 0 steht.

00:07:02,000 --> 00:07:07,680
Es gibt also eigentlich nur einen Nachfolger
hier, nämlich den, der sich aus der Resolution

00:07:08,240 --> 00:07:13,760
dieses Literals mit der Tatsache
aus den Zusatzklauseln hier ergibt.

00:07:14,320 --> 00:07:22,720
Okay, also 0 und 0 unifiziert X und X sollte
durch eine Variable ersetzt werden.

00:07:22,720 --> 00:07:24,880
Vielleicht X2 oder X3 oder so etwas in der Art.

00:07:24,880 --> 00:07:30,160
Aber dann sind sie mit dem, was wir hier sehen, unifiziert.

00:07:30,160 --> 00:07:39,520
Ich ersetze dies also durch X1, X1,
und dann kann ich unifizieren, dass X1 eine 0 wird.

00:07:39,520 --> 00:07:44,320
Dieses _1 muss dann auch
s(0) sein, und 0 und 0 stimmen bereits überein.

00:07:44,320 --> 00:07:45,600
Das ist also der nächste Unifikator.

00:07:45,600 --> 00:07:50,960
Ich verwende also X1, X1 hier, weil ich
die früheren Vorkommen nicht umbenannt habe.

00:07:53,040 --> 00:07:57,440
Okay, dann wird dies durch
die rechte Seite ersetzt, die leer ist.

00:07:57,440 --> 00:08:01,040
Wir kommen also jetzt zu der leeren Abfrage.

00:08:01,040 --> 00:08:02,400
Und was sind die Lösungen?

00:08:02,400 --> 00:08:07,120
Nun, sehen wir mal, N wird zu s(X), X wird zu 0.

00:08:07,760 --> 00:08:14,400
Letztendlich wird N also zu s(0), und
M wird zu Y, Y wird zu _1,

00:08:14,400 --> 00:08:16,480
und _1 wird zu s(0).

00:08:16,480 --> 00:08:22,560
Letztendlich haben wir also das Ergebnis eins
mal eins ist eins, was absolut sinnvoll ist.



00:08:23,440 --> 00:08:24,960
Wir haben eine Lösung gefunden.

00:08:25,680 --> 00:08:26,880
Okay, aber wir sind noch nicht fertig.

00:08:26,880 --> 00:08:30,480
Denn Prolog wird angewiesen,
jetzt nach weiteren Lösungen zu suchen.

00:08:30,480 --> 00:08:35,040
Und es gibt hier eine Stelle, an der wir
noch nicht bedacht haben, was passiert, richtig?

00:08:35,040 --> 00:08:40,960
Also, dieses Multiplikationsliteral unifiziert sich auch
mit der zweiten Programmklausel für die Multiplikation.

00:08:42,320 --> 00:08:42,960
Auf welche Weise?

00:08:42,960 --> 00:08:47,440
Nun, lassen Sie uns jetzt dieses X, Y,
Z, et cetera durch X2, Y1, et cetera.

00:08:47,440 --> 00:08:53,680
Und dann unifizieren wir mit diesem Multiplikationsliteral
aus der Abfrage. Was müssen wir dann tun?

00:08:53,680 --> 00:09:01,600
Nun, dieses X sollte s(X2) sein, dieses Y2 und
dieses Y werden einfach unifiziert, und gut, da

00:09:01,600 --> 00:09:08,400
haben wir Z2 und U, und auch hier spielt es keine Rolle,
ob wir Z2 durch U oder U durch Z2 ersetzen.

00:09:09,360 --> 00:09:12,880
In jedem Fall erhalten Sie einen sehr allgemeinen Unifikator.

00:09:12,880 --> 00:09:14,320
Lassen Sie uns also diesen wählen.

00:09:15,280 --> 00:09:23,200
Das Wichtigste ist, dass das X aus dem
Literal und der Abfrage durch s(X2) ersetzt wird,

00:09:23,200 --> 00:09:28,480
denn so sieht diese Stelle aus
nach einer konsequenten Umbenennung der Variablennamen.

00:09:30,160 --> 00:09:32,000
Okay, wie lautet die nächste Abfrage?

00:09:32,000 --> 00:09:37,360
Nun, die Regel lautet, dass wir folgendes ersetzen müssen:
dieses Literal durch die rechte Seite

00:09:37,360 --> 00:09:41,040
der Klausel ersetzen, die wir zur Resolution verwendet haben.

00:09:41,040 --> 00:09:45,360
Wir ersetzen also dieses eine
Literal durch diese beiden Literale.

00:09:45,360 --> 00:09:49,760
Aber natürlich mit der angewandten Substitution.

00:09:49,760 --> 00:09:54,960
Das heißt insbesondere, dass
dieses U und dieses U durch Z2 ersetzt werden.

00:09:58,400 --> 00:10:03,840
Okay.

00:10:04,560 --> 00:10:06,080
Nun, eigentlich nicht ganz.

00:10:07,120 --> 00:10:09,920
Ich habe mich bereits selbst ein wenig verwirrt.

00:10:09,920 --> 00:10:11,400
Also, lassen Sie mich das Letzte zurücknehmen.

00:10:11,400 --> 00:10:14,320
Wir ersetzen dies also durch die rechte Seite.

00:10:14,320 --> 00:10:20,480
Aber natürlich sind dieses U und dieses U nicht das
U, weil ich die Variablen in der Abfrage umbenannt habe.

00:10:20,480 --> 00:10:28,880
Ich erhalte also mult(X2, Y2, U2),
add(U2, Y2, Z2).

00:10:28,880 --> 00:10:32,640
Und zusätzlich erhalte ich das, was
von der vorherigen Abfrage übrig geblieben ist.

00:10:33,440 --> 00:10:40,240
Dieser Teil, der durch den Resolutionsschritt nicht
ersetzt wurde, und aufgrund dieser beiden

00:10:42,160 --> 00:10:47,840
Ersetzungsteile muss ich
Z2 und Y2 ändern.

00:10:47,840 --> 00:10:50,480
Insgesamt erhalte ich also die folgende Abfrage,

00:10:51,200 --> 00:10:54,640
was bereits problematisch aussieht,
weil sie größer ist als diese.

00:10:54,640 --> 00:10:59,840
Und es ist nicht klar, ob Sie irgendwann einmal
in der Lage sein werden, diese Abfrage auf eine leere Abfrage zu reduzieren.

00:11:00,400 --> 00:11:05,600
Okay, aber im Moment ist das einfach das,
was sich aus diesem Resolutionsschritt ergibt.

00:11:06,800 --> 00:11:07,600
Okay, machen wir weiter.

00:11:08,880 --> 00:11:12,560
Die Strategie ist, dass wir uns das äußerste linke
Literal, das ist dieses hier,

00:11:12,560 --> 00:11:18,720
und wir überprüfen, ob es mit einem
Kopf von Klauseln aus dem Programm übereinstimmt.

00:11:18,720 --> 00:11:20,960
Okay, und da es sich hier nur um Variablen handelt,

00:11:20,960 --> 00:11:24,640
besteht eine gute Chance, dass es
mit diesen beiden Köpfen unifiziert werden kann.

00:11:24,640 --> 00:11:26,160
Und das ist der Fall.

00:11:26,160 --> 00:11:26,660
Ja.

00:11:27,040 --> 00:11:32,960
Wir haben also zum Beispiel 0, etwas, 0.
Das können wir eindeutig unifizieren.

00:11:32,960 --> 00:11:38,800
Und jetzt verwende ich für diesen Unterstrich _2,
um sicherzustellen, dass es keine Verwirrung gibt.

00:11:39,920 --> 00:11:45,520
Dann unifiziere ich dies, und nun, das
ist ein Unifikator, der diese unifiziert.

00:11:45,520 --> 00:11:47,680
Aber es gibt auch einen weiteren Nachfolger, denn

00:11:47,680 --> 00:11:51,120
dieser unifiziert sich auch mit
dem Kopf der zweiten Klasse.

00:11:51,840 --> 00:11:53,680
Aber konzentrieren wir uns zunächst auf diesen hier.

00:11:53,680 --> 00:11:58,480
Was wird passieren, wenn wir dies durch die
rechte Seite dieses Fakts ersetzen, die leer ist?

00:11:58,480 --> 00:11:59,680
Dies wird also verschwinden.

00:12:00,320 --> 00:12:07,280
Und für die übrigen Literale müssen wir
die Substitution anwenden, die wir hier entdeckt haben.

00:12:07,920 --> 00:12:11,520
Okay, wenn Sie das tun, erhalten Sie die nächste Abfrage.

00:12:12,800 --> 00:12:14,800
Okay, und eigentlich werde ich diese Suche nicht fortsetzen.

00:12:16,240 --> 00:12:21,440
Ich werde die Suche hier nicht fortsetzen, also werden
weitere Schritte hier unten stattfinden.

00:12:21,440 --> 00:12:24,640
Okay, aber wenn Sie sich diese
Abfrage ganz genau ansehen,

00:12:24,640 --> 00:12:30,080
werden Sie bereits sehen, dass es sicherlich keine
Lösung aus diesem Teilbaum hier ergeben wird.

00:12:30,080 --> 00:12:36,560
Denn diese Lösung würde darauf hinauslaufen,
eine Auswahl für diese beiden Variablen zu sein,

00:12:36,560 --> 00:12:39,120
so dass 0 plus diese Sache diese Sache ist.

00:12:39,120 --> 00:12:43,440
Natürlich kann dies nur mathematisch
wahr sein, wenn diese beiden Werte identisch sind.

00:12:43,440 --> 00:12:49,280
Aber dann gibt es noch eine andere Formel, die besagt,
dass die Summe dieser beiden Werte eins sein sollte.

00:12:49,840 --> 00:12:51,520
Das kann doch nicht wahr sein, oder?

00:12:51,520 --> 00:12:55,280
Es kann keine Ersetzung für diese beiden Variablen geben, so dass...



00:12:56,080 --> 00:12:59,440
Sowohl gilt, dass 0 plus dies gleich
dies, aber auch dies plus dies ist 1.

00:13:00,080 --> 00:13:02,240
Denn dies wäre derselbe Wert.

00:13:02,240 --> 00:13:03,600
Sie können sich nicht zu 1 addieren.

00:13:03,600 --> 00:13:05,760
Okay, es wird also keine
Lösung gefunden.

00:13:05,760 --> 00:13:10,160
Die Abfrage wird also letztendlich
auch auf diese Verzweigung schauen müssen.

00:13:10,800 --> 00:13:12,000
Was ist nun diese Verzweigung?

00:13:12,000 --> 00:13:20,880
Nun, sie ergibt sich aus der Verknüpfung dieses Literals mit
dem Kopf der zweiten Multiplikationsklausel.

00:13:20,880 --> 00:13:23,200
Und wir werden auch hier wieder Variablen umbenennen.

00:13:23,200 --> 00:13:26,080
Daraus wird also X3, Y3, Z3 und so weiter.

00:13:26,080 --> 00:13:29,840
Und wenn wir das tun, können wir tatsächlich einen Unifikator finden.

00:13:29,840 --> 00:13:31,760
Und wir erhalten eine neue Abfrage.

00:13:31,760 --> 00:13:37,840
Und diese hat wiederum weitere
Möglichkeiten zur Anwendung von Schritten.

00:13:37,840 --> 00:13:43,760
Und an diesem Punkt wird klar, dass
dies kein guter Prozess ist, der hier abläuft.

00:13:43,760 --> 00:13:46,320
Denn dieser Prozess wird immer
größer und größer, nicht wahr?

00:13:46,320 --> 00:13:49,920
Wir haben hier also ein Multiplikationsliteral und ein Additionsliteral.

00:13:49,920 --> 00:13:56,240
Dann verwenden wir diese Regel, um aufzulösen, aber das führte
zu einem Multiplikations- und zwei Additionsalternativen.

00:13:56,240 --> 00:14:00,640
Und tatsächlich haben wir an dieser Stelle bereits
ein Multiplikations- und drei Additionsliterale.

00:14:00,640 --> 00:14:02,400
Denn wir haben hier immer Variablen.

00:14:02,400 --> 00:14:05,600
Wir können also immer die
zweite Multiplikationsregel anwenden.

00:14:05,600 --> 00:14:11,600
Das Ganze wird also immer länger und länger und
wird niemals den ganzen Baum abschließen.

00:14:11,600 --> 00:14:14,480
Deshalb haben wir hier eine unendliche Suche.

00:14:14,480 --> 00:14:16,000
Wir finden eine Lösung.

00:14:16,000 --> 00:14:19,040
Aber danach sucht Prolog nach weiteren Lösungen.

00:14:19,040 --> 00:14:22,960
Er wird nie eine finden, aber er wird auch nie
den Prozess der Suche nach ihnen beenden.

00:14:27,120 --> 00:14:30,160
Okay, wir müssen also etwas tun,
damit dieses Programm besser funktioniert.

80 # slide
00:14:35,520 --> 00:14:43,840
Eine Sache, die wir versuchen könnten, ist, die Änderung der
Reihenfolge der Literale in der letzten Programmklausel hier vorzunehmen.

00:14:44,960 --> 00:14:49,520
Ja, wenn das Problem darin besteht, dass wir
diesen unendlichen Abstieg haben, bei dem wir immer

00:14:51,200 --> 00:14:54,640
ein Multiplikationsliteral wiederholen
und ein Additionsliteral hinzufügen.

00:14:54,640 --> 00:14:58,080
Aber wir kommen nie dazu, diese zu
überprüfen, weil die Multiplikation

00:14:58,080 --> 00:15:02,240
immer das Erste ist, was wir in
all diesen Schritten auf der vorherigen Folie.

00:15:02,240 --> 00:15:05,920
Dann ist es vielleicht besser, einfach die
Reihenfolge dieser Literale zu ändern.

00:15:05,920 --> 00:15:09,120
Also, logischerweise aus der logischen Lesart
und auch von der deklarativen Semantik des

00:15:09,120 --> 00:15:11,360
Programms ändert sich dadurch nichts, richtig?

00:15:11,360 --> 00:15:14,560
Es ist also immer noch die gleiche Aussage.

00:15:16,000 --> 00:15:19,360
Denn die Konjunktion ist kommutativ.

00:15:20,080 --> 00:15:22,400
Aber der Suchprozess könnte sich dadurch ändern.

00:15:22,400 --> 00:15:28,080
Denn wenn Sie diesen Zusatz nach vorn verschieben, wird er
während des Suchvorgangs zuerst untersucht.

00:15:28,080 --> 00:15:32,560
Und das könnte bedeuten, dass einige dieser
unendlichen Verzweigungen tatsächlich abgeschnitten werden.

00:15:32,560 --> 00:15:36,480
Denn wir finden keine
Lösung für diesen Zusatz.

00:15:36,480 --> 00:15:42,240
Und dann können wir sagen, dass ein ganzer Teil dieses
Suchbaums nicht erforscht werden muss.

00:15:42,240 --> 00:15:47,680
Anders als in dem Fall, in dem wir diese Multiplikation
hier als erstes Nachfolgeliteral haben.

00:15:47,680 --> 00:15:49,680
Und wir kommen nie dazu, tatsächlich
diese Additionen zu überprüfen.

00:15:50,800 --> 00:15:51,840
Okay, versuchen wir es also.

00:15:51,840 --> 00:15:55,440
Und lassen Sie uns einfach sehen, was passiert,
wenn wir dies für dieselbe Abfrage tun.

00:15:56,720 --> 00:16:01,120
Okay, natürlich ist das, was am Anfang passiert,
sehr ähnlich, richtig?

00:16:01,120 --> 00:16:07,600
Also, im ersten Schritt, wieder,
können wir diese Tatsache nicht anwenden.

00:16:07,600 --> 00:16:10,720
Wir haben also nur einen Nachfolger,
und das wird dieser sein.

00:16:10,720 --> 00:16:13,520
Der Unifikator ist also wie zuvor.

00:16:13,520 --> 00:16:17,680
Aber natürlich ist jetzt die Reihenfolge der Literale
in der nächsten Abfrage anders, richtig?

00:16:17,680 --> 00:16:19,760
Das ist also wie im vorherigen Beispiel.

00:16:19,760 --> 00:16:23,440
Aber jetzt ist natürlich die Reihenfolge dieser
zwei genau umgekehrt.

00:16:24,800 --> 00:16:25,520
Nun gut.

00:16:25,520 --> 00:16:28,400
Da Sie nun immer das erste
Literal aus der Abfrage,

00:16:28,400 --> 00:16:31,600
sehen wir uns dies anstelle
der Multiplikation an.

00:16:31,600 --> 00:16:32,560
Schauen wir uns das also an.

00:16:33,360 --> 00:16:39,760
Nun, dies ist tatsächlich mit beiden
der Köpfe der Additionsklassen.

00:16:39,760 --> 00:16:41,440
Wir erhalten also zwei Nachfolger.

00:16:41,440 --> 00:16:44,480
Der Erste ist durch Resolution mit dem Fakt.

00:16:44,480 --> 00:16:47,040
Dadurch wird die Abfrage tatsächlich kleiner.

00:16:47,040 --> 00:16:50,800
Denn mit dieser Unifikation,

00:16:50,800 --> 00:16:54,480
mit dieser Substitution können wir
dieses Literal und diesen Fakt unifizieren.

00:16:55,040 --> 00:16:58,240
Und der Nachfolger wird dies sein,
weil dieses Literal verschwindet.



00:16:58,240 --> 00:17:00,240
Denn es gibt keine rechte Seite dieser Klausel.

00:17:01,120 --> 00:17:05,120
Und wir bleiben mit dem zurück, was
in der Abfrage übrig ist.

00:17:05,120 --> 00:17:08,640
Aber natürlich müssen wir den
Substitutionsunifikator anwenden.

00:17:08,640 --> 00:17:12,640
Deshalb erhalten wir dies als unseren neuen Unteraufruf.

81 # slide
00:17:17,040 --> 00:17:19,360
Lassen Sie uns also von dort aus fortfahren.

00:17:21,840 --> 00:17:28,480
Natürlich ist dies nun der nächste Ort, an dem
wir nach Resolutionsmöglichkeiten suchen müssen.

00:17:29,120 --> 00:17:35,360
Und in der Tat, dies ist sowohl mit
diesem Kopf als auch mit diesem Kopf.

00:17:35,360 --> 00:17:38,240
Wir erhalten also wieder zwei Nachfolgeknoten.

00:17:39,120 --> 00:17:43,040
Der linke führt eigentlich
zu einem leeren Knoten, denn

00:17:43,840 --> 00:17:49,360
wenn wir diesen mit mult(0,_,0) unifizieren,
was mit dieser Substitution möglich ist.

00:17:49,360 --> 00:17:52,000
Dann ersetzen wir diesen durch die leere rechte Seite.

00:17:52,000 --> 00:17:55,120
Wir erhalten also eine leere Abfrage.

00:17:55,120 --> 00:17:58,400
Und wie zuvor können wir sehen, was
diese Lösung tatsächlich ist.

00:17:58,400 --> 00:18:02,000
N ist s(X), X wird hier nicht verändert.

00:18:02,000 --> 00:18:03,600
Aber X wird hier auf 0 geändert.

00:18:03,600 --> 00:18:09,680
N wird also zu s(0) und M
wird zu Y, Y wird zu s(0).

00:18:09,680 --> 00:18:14,080
Die Antwort lautet also N = s(0),
M = s(0).

00:18:14,080 --> 00:18:16,080
Okay, die erste Lösung.

00:18:16,800 --> 00:18:19,040
Wie suchen wir nach weiteren Lösungen?

00:18:19,040 --> 00:18:22,800
Nun, wir haben jetzt eigentlich zwei Stellen,
wo wir die Suche fortsetzen könnten.

00:18:23,360 --> 00:18:27,360
Aber die mündliche Beschreibung sagte, dass
Sie von diesen immer den ganz linken nehmen.

00:18:27,360 --> 00:18:35,040
Also erkunden wir diesen Weg nicht weiter,
wo wir ankommen würden, wenn wir dies

00:18:35,040 --> 00:18:39,840
mit der zweiten zusätzlichen Klausel;
stattdessen schauen wir uns zuerst diesen Knoten an.

00:18:39,840 --> 00:18:42,320
Okay, das wäre entstanden durch

00:18:42,320 --> 00:18:47,120
die Unifikation dieses Literals mit der zweiten
Programmklausel für die Multiplikation.

00:18:47,120 --> 00:18:50,640
Natürlich, nachdem wir die X,
Y, Z et cetera durch umbenannte Varianten ersetzt haben.

00:18:50,640 --> 00:18:55,280
Da wir hier also bereits X1 verwendet haben,
lassen Sie uns X2, Y2, Z2 usw. sagen.

00:18:55,280 --> 00:18:58,880
Und dann unifizieren Sie dies mit dem, was
wir hier im Literal haben,

00:18:58,880 --> 00:19:02,240
dann werden wir feststellen, dass dies der zu verwendende Unifikator ist.

00:19:02,880 --> 00:19:14,960
Ja, X wird zu s(X2), dieses Z2 wird zu
0, und dieses Y2 wird zu s(0).

00:19:15,840 --> 00:19:18,080
Okay, deshalb haben wir also diesen Unifikator hier.

00:19:18,080 --> 00:19:19,840
Und was wird die neue Abfrage sein?

00:19:19,840 --> 00:19:24,800
Nun, wir ersetzen dies durch die rechte Seite
der Klausel, die wir verwenden, aber

00:19:24,800 --> 00:19:29,040
wendet auch eine Ersetzung
auf diese rechte Seite an.

00:19:29,040 --> 00:19:32,640
So wird insbesondere Y2, das wir nach der
Umbenennung hier haben,

00:19:32,640 --> 00:19:36,080
zu s(0) und Z2 wird zu 0.

00:19:37,600 --> 00:19:41,200
Dies ist also die nächste Programmklausel,
die nächste Abfrage.

00:19:43,280 --> 00:19:45,040
Okay, wie kommen wir voran?

00:19:45,040 --> 00:19:47,360
Nun, schauen wir uns das ganz linke Literal an.

00:19:48,720 --> 00:19:53,920
Und lassen Sie uns versuchen, es mit einer der
Programmklauseln für Addition zu unifizieren.

00:19:54,640 --> 00:19:59,440
Okay, wir sehen, dass add(0, X, X)
sich nicht mit dieser unifizieren lässt.

00:19:59,440 --> 00:20:00,800
Denn diese beiden sind nicht dasselbe.

00:20:01,840 --> 00:20:02,480
Okay?

00:20:02,480 --> 00:20:04,400
Es kann also nur einen Nachfolger geben.

00:20:04,400 --> 00:20:09,920
add(s(X), Y, s(Z)) ist ebenfalls nicht
unifizierbar mit diesem Literal.

00:20:09,920 --> 00:20:13,120
Wegen der 0 hier und dem s(etwas) hier.

00:20:13,120 --> 00:20:17,200
Es gibt also tatsächlich keinen
Nachfolger für diese Abfrage.

00:20:18,240 --> 00:20:21,520
Ja, denn Sie müssen das Literal ganz links verwenden.

00:20:21,520 --> 00:20:26,400
Aber wir können es nicht mit einer der
Zusatzklauseln des Programms resolvieren.

00:20:26,400 --> 00:20:29,680
Es handelt sich also um einen fertigen
Knoten, der kein Nachfolgeknoten ist.

00:20:29,680 --> 00:20:31,120
Und dafür brauchen Sie ein Symbol.

00:20:31,120 --> 00:20:36,000
Lassen Sie uns also diesen Blitz hier verwenden, um
zu sagen, dass wir hier keine Fortschritte machen können.

00:20:36,000 --> 00:20:39,680
Es ist ein beendeter Knoten, aber kein erfolgreicher
Knoten, denn es ist kein leerer Knoten.

00:20:40,320 --> 00:20:44,320
Daher schreiben wir auch keine Lösung für ihn,
denn es gibt hier keine Lösung.

00:20:44,320 --> 00:20:52,480
Das ist ein gescheiterter Knoten, der einigermaßen erfolgreich ist
in dem Sinne, dass er die Suche abkürzt, nicht wahr?

00:20:52,480 --> 00:20:56,160
Denn, wenn wir die umgekehrte Reihenfolge hätten
der Multiplikation und der Addition hier,

00:20:56,160 --> 00:21:00,560
hätte es weitere Schritte gegeben
um diese Multiplikation aufzulösen

00:21:00,560 --> 00:21:02,800
und hätte nie gemerkt, dass es keine Lösung gibt.

00:21:02,800 --> 00:21:08,480
Aber wenn wir hier die Reihenfolge ändern, indem wir die
Addition zuerst, können wir tatsächlich die gesamte

00:21:08,480 --> 00:21:10,960
weitere Suche in diesem Teil des Baums.

00:21:11,600 --> 00:21:15,440
Das heißt aber noch nicht, dass wir fertig sind, denn
es gibt noch einen weiteren Knoten, der noch nicht fertig ist, richtig.

00:21:15,440 --> 00:21:20,000
Hier haben wir also bereits erwähnt, dass
es einen weiteren Nachfolgeknoten geben würde.



00:21:20,000 --> 00:21:24,560
Denn wir könnten dies auch
mit der zweiten Klausel für die Addition verbinden.

00:21:24,560 --> 00:21:25,440
Also, lassen Sie uns das tun.

00:21:26,080 --> 00:21:30,000
Denn dies ist jetzt der
äußerste linke, noch nicht beendete Knoten.

00:21:30,000 --> 00:21:30,240
Okay.

00:21:30,240 --> 00:21:33,520
Dies wäre also entstanden durch
die folgende Substitution.

00:21:33,520 --> 00:21:36,320
Ja, durch die Wiederholung von X3, Y3, Z3 und so weiter.

00:21:36,320 --> 00:21:40,960
Und dann unifizieren, zum Beispiel Z3
wegen dieser Position 0 sein muss.

00:21:41,520 --> 00:21:50,080
Und das U hier wird ab hier zu s(X3)
und das Y und Y3 werden einfach umbenannt,

00:21:51,520 --> 00:21:52,640
das eine wird in das andere umbenannt.

00:21:53,280 --> 00:21:56,480
Okay, was ist dann die rechte Seite
bei der neuen Abfrage hier?

00:21:56,480 --> 00:22:03,680
Nun, wir müssen dies durch die rechte Seite ersetzen
und die Seite durch dies ersetzen, während wir den Unifikator anwenden.

00:22:03,680 --> 00:22:06,080
So wird insbesondere das Z zu 0.

00:22:06,080 --> 00:22:07,760
Aber Sie müssen auch den Kontext beibehalten.

00:22:07,760 --> 00:22:10,320
Wir müssen also dieses Multiplikationsliteral beibehalten.

00:22:10,320 --> 00:22:14,880
Und darauf wenden wir auch den Unifikator an.

00:22:14,880 --> 00:22:16,640
Dies führt zu dieser neuen Abfrage.

00:22:16,640 --> 00:22:18,320
Zumindest ist sie nicht länger geworden.

00:22:19,120 --> 00:22:26,240
Ja, sie ist immer noch zwei Literale lang, also müssen wir
weitere Suchen, weitere Schritte durchführen.

00:22:26,960 --> 00:22:27,840
Okay, was machen wir?

00:22:27,840 --> 00:22:30,000
Wir schauen uns das äußerste linke
Literale an, das ist dieses hier.

00:22:30,000 --> 00:22:34,400
Wir versuchen, es mit den Klauseln für die Addition zu unifizieren.

00:22:34,400 --> 00:22:36,880
Wir können sehen, dass es nicht
mit der zweiten Klausel unifizieren lässt.

00:22:36,880 --> 00:22:38,960
Denn s(etwas) ist gleich 0.

00:22:38,960 --> 00:22:42,880
Das Einzige, was also passieren könnte,
ist, dass wir dies mit der ersten Klausel unifizieren

00:22:42,880 --> 00:22:44,080
Klausel, die eine Tatsache ist.

00:22:44,800 --> 00:22:45,840
Ist das unifizierbar?

00:22:45,840 --> 00:22:47,440
Ja, wenn Sie alles auf 0 setzen.

00:22:48,240 --> 00:22:52,320
Ja, mit diesem Unifikator sind sie

00:22:52,880 --> 00:22:54,960
Mit dieser Ersetzung sind diese beiden unifizierbar.

00:22:54,960 --> 00:22:58,400
Und hier sehen wir auch einen Fall,
wo ich das X in X4 umbenannt habe.

00:22:58,400 --> 00:23:01,680
Damit ich es nicht mit X3 verwechsle, usw.

00:23:01,680 --> 00:23:04,160
Okay, das ist also möglich.

00:23:04,160 --> 00:23:06,160
Dann erhalten wir eine neue Abfrage.

00:23:06,160 --> 00:23:08,960
Diese verschwindet, weil die
rechte Seite leer ist.

00:23:08,960 --> 00:23:14,880
Aber wir haben noch den Rest der Abfrage,
auf den wir ebenfalls den Unifikator anwenden müssen.

00:23:14,880 --> 00:23:17,280
Das ist also das nächste Beweisziel.

00:23:18,080 --> 00:23:19,280
Ja, das ist das X.

00:23:19,280 --> 00:23:22,720
Dieses Y3 wird zu 0, und
dieses X3 wird ebenfalls zu 0.

00:23:24,080 --> 00:23:26,320
Okay, sehen wir mal, ob wir Fortschritte machen können.

00:23:26,320 --> 00:23:30,720
Nun, lässt sich dies mit einer der
Programmklauseln für die Multiplikation?

00:23:30,720 --> 00:23:34,240
Es ist nicht unifizierbar mit der ersten
wegen der 0 gegen s(0).

00:23:34,240 --> 00:23:36,160
Es kann also nur einen Nachfolger geben.

00:23:36,160 --> 00:23:40,240
Aber diesen Nachfolger gibt es wirklich, denn
er ist tatsächlich unifizierbar mit dem

00:23:41,120 --> 00:23:43,040
Kopf der zweiten Multiplikationsklausel.

00:23:44,000 --> 00:23:47,440
Ja, ersetzen Sie diese durch X5, Y5, usw.

00:23:47,440 --> 00:23:50,480
Und die Durchführung der Unifikation
führt zu dieser Ersetzung.

00:23:51,680 --> 00:23:56,160
Okay, dann müssen wir also ersetzen
dies durch die rechte Seite ersetzen.

00:23:56,160 --> 00:23:57,840
Sie wird also wieder länger.

00:23:57,840 --> 00:24:05,360
Wir müssen sie also durch diese beiden Literale ersetzen,
wobei diese Substitution angewendet wird, was dies bedeutet.

00:24:06,880 --> 00:24:10,560
Okay, wir sind noch nicht fertig, wir
müssen auf der nächsten Folie weitermachen.

82 # slide
00:24:14,480 --> 00:24:17,280
So, das ist alles, was wir bis jetzt haben.

00:24:17,280 --> 00:24:21,360
Schauen wir uns also diesen rechten
Teil des Baums an und das war

00:24:21,360 --> 00:24:24,800
die Abfrage, mit der wir auf der vorherigen Folie geendet haben.

00:24:24,800 --> 00:24:32,400
Konzentrieren wir uns also auf das äußerste linke Literal und versuchen
es mit den Programmklauseln für die Addition zu unifizieren.

00:24:33,120 --> 00:24:36,880
Die erste brauchen wir nicht zu berücksichtigen,
da diese nicht dasselbe sind.

00:24:37,760 --> 00:24:38,000
Okay.

00:24:38,000 --> 00:24:43,040
Wir müssen also nur mit der
zweiten Programmklausel für die Addition.

00:24:43,040 --> 00:24:44,560
Und sie ist unifizierbar.

00:24:45,200 --> 00:24:48,640
Wie Sie hier sehen können, können wir eine 0 erhalten.

00:24:48,640 --> 00:24:50,400
Wir können dies auch auf 0 setzen.

00:24:50,400 --> 00:24:55,600
Und U5 wird zu s(X6).

00:24:56,960 --> 00:24:58,880
Ja, denn Sie haben hier bereits X5 verwendet.

00:24:58,880 --> 00:25:02,560
Wir ersetzen also jetzt diese
durch X6, Y6, Z6 und so weiter.

00:25:02,560 --> 00:25:09,680
Und dann können wir unifizieren. Nun, das Ergebnis ist,
dies wird ersetzt durch die rechte

00:25:09,680 --> 00:25:15,440
Seite dieser Abfrage, die diese Klausel ersetzt, die den Unifikator anwendet.

00:25:15,440 --> 00:25:21,680
Aber wir behalten auch den Rest der Abfrage bei
und wenden den Unifikator auch auf diesen Teil an.

00:25:22,320 --> 00:25:24,240
Das führt zu der folgenden Abfrage.



00:25:25,920 --> 00:25:38,480
Okay, X6 wegen dieser 0, 0, weil alle Y
und Z aus der Klausel durch 0 ersetzt wurden.

00:25:39,120 --> 00:25:44,240
Und in der restlichen Abfrage im Kontext hier
müssen wir die U5 durch s(X6) ersetzen?

00:25:45,040 --> 00:25:46,560
Okay, neue Abfrage.

00:25:46,560 --> 00:25:47,680
Wie kommen wir voran?

00:25:47,680 --> 00:25:49,920
Nun, schauen wir uns das ganz linke Literal an.

00:25:49,920 --> 00:25:52,960
Versuchen Sie, es zu unifizieren, wenn die Zusatzklauseln.

00:25:52,960 --> 00:25:57,200
Es lässt sich nicht mit der zweiten Klausel unifizieren
wegen des s(etwas) gegen 0.

00:25:57,200 --> 00:26:00,480
Aber es lässt sich natürlich mit dem Fakt hier unifizieren.

00:26:01,280 --> 00:26:06,160
Wenn Sie nämlich alles durch
0 ersetzen, dann stimmt (0,0,0) mit (0,0,0) überein.

00:26:06,960 --> 00:26:08,720
Okay, das lässt sich also machen.

00:26:08,720 --> 00:26:09,840
Was ist die nächste Abfrage?

00:26:10,720 --> 00:26:14,160
Nun, diese wird durch leer ersetzt.

00:26:14,160 --> 00:26:16,720
Denn es gibt keine rechte Hand
Seite für diese Klausel.

00:26:16,720 --> 00:26:19,520
Die Abfrage wird jetzt also wieder kleiner.

00:26:19,520 --> 00:26:27,440
Es bleibt dieser Rest der Abfrage übrig,
auf den wir die Ersetzung anwenden müssen.

00:26:27,440 --> 00:26:29,520
Wir erhalten also die neue Abfrage.

00:26:30,720 --> 00:26:31,220
Nun gut.

00:26:32,560 --> 00:26:35,520
Ist dieser Prozess nun ergiebig?

00:26:35,520 --> 00:26:36,720
Nicht wirklich.

00:26:36,720 --> 00:26:38,960
Denn, wenn Sie das noch einmal in ein paar Schritten machen,

00:26:38,960 --> 00:26:42,560
werden Sie feststellen, dass dies
immer noch ein unendlicher Zweig ist.

00:26:42,560 --> 00:26:43,520
Warum ist das so?

00:26:43,520 --> 00:26:47,280
Nun, wir können es tatsächlich sehen, wenn
Sie sich diese Stelle und diese Stelle ansehen.

00:26:47,280 --> 00:26:49,120
Sie sehen sich sehr ähnlich.

00:26:49,120 --> 00:26:51,760
Also, nur der Name der Variablen
ist hier anders.

00:26:51,760 --> 00:26:54,880
Aber alle Schritte, die wir gemacht haben, um von hier nach hier zu gelangen,

00:26:54,880 --> 00:26:58,240
könnten hier wieder gemacht werden und
müssen hier noch einmal gemacht werden.

00:26:58,240 --> 00:27:02,880
Also, nach drei weiteren Resolutionsschritten
sind wir wieder an einem sehr ähnlichen Ort.

00:27:02,880 --> 00:27:07,360
Dies ist natürlich kein so großer
Baum wie der vorherige unendliche Baum.

00:27:07,360 --> 00:27:09,520
Bei dem alle Abfragen immer länger wurden.

00:27:09,520 --> 00:27:13,280
Aber dennoch ist dies ein unendlicher Suchpfad.

00:27:14,000 --> 00:27:17,840
Also noch einmal, das Programm, das wir jetzt haben,
ist etwas schöner als das vorherige,

00:27:17,840 --> 00:27:19,200
aber es ist immer noch eine unendliche Suche.

00:27:19,200 --> 00:27:21,760
Wir müssen also vielleicht noch ein paar Änderungen vornehmen.

00:27:22,480 --> 00:27:29,600
Lassen Sie uns also im nächsten Video darauf zurückkommen.

