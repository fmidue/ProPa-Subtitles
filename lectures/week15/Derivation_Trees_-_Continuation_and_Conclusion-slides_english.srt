83 # slide
00:00:01,599 --> 00:00:07,459
Okay, before we go about fixing the program,
let us briefly convince ourselves that what

00:00:07,459 --> 00:00:15,440
we have been doing on the more complex example
actually agrees with the informal description

00:00:15,440 --> 00:00:17,940
of how these derivation trees are to be generated,
right?

00:00:17,940 --> 00:00:23,070
We had this verbal description at the end
of the last part one video.

00:00:23,070 --> 00:00:30,410
And we can put it side by side with the actual
derivation tree that we just constructed.

00:00:30,410 --> 00:00:31,410
And briefly go through this.

00:00:31,410 --> 00:00:37,159
Okay, so that's the program that we have after
the switching of the order of these two literals

00:00:37,159 --> 00:00:39,679
in the last program clause.

00:00:39,679 --> 00:00:42,469
And we looked at this query.

00:00:42,469 --> 00:00:45,710
And the idea was to generate this tree.

00:00:45,710 --> 00:00:53,131
And the first piece of the recipe was to put
the query that we are looking for a solution

00:00:53,131 --> 00:00:56,690
for into a root node.

00:00:56,690 --> 00:01:00,719
And in some way, remember that we have to
work on this, right?

00:01:00,719 --> 00:01:05,460
I mentioned that we need to keep in mind which
are the nodes that are not yet finished.

00:01:05,460 --> 00:01:10,860
Okay, as long as there are such nodes that
still need work, we select the leftmost one,

00:01:10,860 --> 00:01:12,170
which is just this one.

00:01:12,170 --> 00:01:19,860
We determine which of the facts or rules from
the program are unifiable in their head literal

00:01:19,860 --> 00:01:26,159
with the leftmost literal of the query.

00:01:26,159 --> 00:01:32,180
Okay, and in this case, this was only the
second one.

00:01:32,180 --> 00:01:34,219
Because the 0 and s(0).

00:01:34,219 --> 00:01:39,380
So, we generate with each of those, which is
exactly one in this case, a new successor node.

00:01:39,380 --> 00:01:46,229
Via resolution to resolve this with
this query we got this node, which, of course

00:01:46,229 --> 00:01:49,359
still needs further work.

00:01:49,359 --> 00:01:53,710
If there are several such nodes, we will arrange
from left to right in the order in which the

00:01:53,710 --> 00:01:54,710
rules appear in the program.

00:01:54,710 --> 00:01:57,720
Of course, in this case, there was only one
successor.

00:01:57,720 --> 00:02:03,650
We had to put the unifier at the connection,
which is also something that we did in the

00:02:03,650 --> 00:02:07,700
previous slides already.

84 # slide
00:02:07,700 --> 00:02:15,110
Then we continued by actually taking now this
node as the next one to work on.

00:02:15,110 --> 00:02:20,480
Again, only one choice for the left-most search
node is exactly this node.

00:02:20,480 --> 00:02:28,610
In that node, we select the leftmost literal
and check whether it is unifiable with one

00:02:28,610 --> 00:02:31,330
or more clauses from the program.

00:02:31,330 --> 00:02:36,830
In this case, actually, it is unifiable with
both of these clauses.

00:02:36,830 --> 00:02:41,970
Because this can be made to match, but also
the second one.

00:02:41,970 --> 00:02:46,760
So, there were two successors now.

00:02:46,760 --> 00:02:48,731
Resolution in both cases gave these results.

00:02:48,731 --> 00:02:51,290
Well, we are applying the fact.

00:02:51,290 --> 00:02:52,290
This disappeared.

00:02:52,290 --> 00:02:54,830
And we were left with this new literal.

00:02:54,830 --> 00:03:00,150
And by applying this recursive rule for addition,
we got a different additional literal, also

00:03:00,150 --> 00:03:02,120
a change to the multiplication literal.

00:03:02,120 --> 00:03:07,790
Because of having to apply the unifier that
was used for this resolution step also to

00:03:07,790 --> 00:03:12,680
the remaining literals.

00:03:12,680 --> 00:03:26,280
Like this context literal for these were the
two unifiers that we used for that.

85 # slide
00:03:26,280 --> 00:03:30,380
Then we focused on the left of these two nodes.

00:03:30,380 --> 00:03:35,390
Because we always select the leftmost node
for which we haven't yet finished.

00:03:35,390 --> 00:03:37,610
So, there's only one literal here.

00:03:37,610 --> 00:03:44,130
So, that's the literal that we now compare
against the heads of our program clauses.

00:03:44,130 --> 00:03:49,740
In this case, we again get two possibilities
for our resolution step.

00:03:49,740 --> 00:03:52,160
The first one leads to an empty node.

00:03:52,160 --> 00:03:54,060
Because this is a fact.

00:03:54,060 --> 00:03:57,510
Whereas the second one led to this node.

00:03:57,510 --> 00:04:08,750
Here are the two unifiers then, here this
was the annotation for an empty note and these

00:04:08,750 --> 00:04:10,560
are the success nodes.

00:04:10,560 --> 00:04:18,870
Where we can also write down what the solution
is and a node like this, where it's impossible

00:04:18,870 --> 00:04:26,760
to unify the leftmost literal with any program
clause is a failed node and we use this lightning

00:04:26,760 --> 00:04:31,310
symbol for these places.

00:04:31,310 --> 00:04:37,120
In the success node, we wanted to write down
the actual solution.

00:04:37,120 --> 00:04:44,160
So, how are the variables from the original
query to be given values?

00:04:44,160 --> 00:04:46,540
So, that there is a solution.

86 # slide
00:04:46,540 --> 00:04:51,540
So, that was by going which is not visible
on this slide, but it was visible on the previous

00:04:51,540 --> 00:04:54,690
slide where the full tree was shown, the full
tree development was shown.

00:04:54,690 --> 00:05:00,750
So, we would start at the root node somewhere
here go through all the substitutions along

00:05:00,750 --> 00:05:09,590
the path to this success node and basically
collect by composition what the results are

00:05:09,590 --> 00:05:14,320
for the two levels of interest.

00:05:14,320 --> 00:05:17,130
Okay, so that's roughly how we proceeded.

00:05:17,130 --> 00:05:22,900
And then, of course, we also worked further
on this node, but that was where the problem

00:05:22,900 --> 00:05:26,220
that occurred that we want to look at.

00:05:26,220 --> 00:05:32,530
But as you see here, I hope is that what we
did so far is really in line with this verbal

00:05:32,530 --> 00:05:34,290
description.

87 # slide
00:05:34,290 --> 00:05:41,840
Okay, so, that is the situation that we ended
up in before.

00:05:41,840 --> 00:05:48,230
And that we would get by further developing
the last unfinished node from the previous

00:05:48,230 --> 00:05:49,230
slide.

00:05:49,230 --> 00:05:50,230
Yes.

00:05:50,230 --> 00:05:54,590
And what we found earlier is that well, then
we get such an infinite search where we repeat

00:05:54,590 --> 00:05:57,660
this query again and again.

00:05:57,660 --> 00:05:59,150
Now let's take a closer look.

00:05:59,150 --> 00:06:01,200
And maybe also think about how we could prevent
this.

00:06:01,200 --> 00:06:05,240
If we do look at this query well, it says,
it's about the multiplication.

00:06:05,240 --> 00:06:08,680
Where one of the factors is 0, but the
result is non0.

00:06:08,680 --> 00:06:12,680
And then there is the rule saying how this could
be tried to solve.

00:06:12,680 --> 00:06:18,820
But, well, it isn't really solved because it
reduces to a state of similar kind.

00:06:18,820 --> 00:06:23,389
But with some mathematical knowledge, we could,
of course, say well this is not going to have

00:06:23,389 --> 00:06:24,590
a solution anyway.

00:06:24,590 --> 00:06:28,170
How could something like something times 0
be non0?

00:06:28,170 --> 00:06:29,170
Okay.

00:06:29,170 --> 00:06:32,210
So, now you only have to tell Prolog that
we don't want this.

00:06:32,210 --> 00:06:36,210
And well, maybe there is a point, the place
we have to do this is actually when applying

00:06:36,210 --> 00:06:37,210
this rule.

00:06:37,210 --> 00:06:41,620
So, maybe we don't want to apply this rule
that multiplication of successor of something

00:06:41,620 --> 00:06:44,660
and something else is a result on a certain
condition.

00:06:44,660 --> 00:06:47,730
Maybe we don't want to apply this rule if
this y is actually 0.

00:06:47,730 --> 00:06:50,230
Because if it's 0, then the result will
be 0.

00:06:50,230 --> 00:06:57,310
There's no point in reducing the multiplication
of something positive and 0 to some previous

00:06:57,310 --> 00:07:02,500
successor times 0, if any way for 0,
we expect that the result will be 0.

00:07:02,500 --> 00:07:05,990
Okay, so maybe we shouldn't even go down this
way of this.

00:07:05,990 --> 00:07:11,270
Because of unravelling of the first argument
position is the second argument position of

00:07:11,270 --> 00:07:12,270
0.

00:07:12,270 --> 00:07:16,370
That could be a strategy to simply prevent
this kind of infinite search.

00:07:16,370 --> 00:07:20,820
So, let's maybe try to do this.

88 # slide
00:07:20,820 --> 00:07:29,400
Okay, so one way to do this would be to simply
prevent this recursive descent.

00:07:29,400 --> 00:07:35,199
So, in the program, simply add a constraint
that y shouldn't be 0.

00:07:35,199 --> 00:07:41,330
And actually, do this before the multiplication
recursive call, in a sense.

00:07:41,330 --> 00:07:45,050
Okay, so remember that for negation, I gave
some caution in an earlier lecture that it

00:07:45,050 --> 00:07:47,680
should appear as late as possible.

00:07:47,680 --> 00:07:53,139
Well, simply putting it at the end of the
rule here wouldn't prevent this recursive

00:07:53,139 --> 00:07:54,139
descent.

00:07:54,139 --> 00:07:55,419
So, maybe we should put it here.

00:07:55,419 --> 00:07:57,050
And let's now simply see what happens.

00:07:57,050 --> 00:08:01,701
And even though I haven't formally defined
how negation works in Prolog, you will actually

00:08:01,701 --> 00:08:06,870
see here in these semantics, as opposed to
the declarative semantics, how this influences

00:08:06,870 --> 00:08:07,870
computation.

00:08:07,870 --> 00:08:14,270
Okay, let's do this again for the query that
we have considered before.

00:08:14,270 --> 00:08:19,540
And of course, in the first few steps, there
won't be much difference than before, except

00:08:19,540 --> 00:08:23,480
that we have to place this constraint in the
appropriate places, right?

00:08:23,480 --> 00:08:26,120
So, this is the same unifier as before.

00:08:26,120 --> 00:08:27,740
It's the same resolution step as before.

00:08:27,740 --> 00:08:33,380
But of course, since this now occurs, in the
right-hand side of the clause which we resolve,

00:08:33,380 --> 00:08:36,569
we have to, of course, also reproduce this
here, right?

00:08:36,569 --> 00:08:42,500
So, this is the only difference from the previous
search tree for this query up to this point.

00:08:42,500 --> 00:08:49,869
Then, something similar applies to the next
steps.

00:08:49,869 --> 00:08:56,480
Except that of course, now, we also make sure
that we apply our unification or substitution

00:08:56,480 --> 00:08:58,819
also to this new constraint.

00:08:58,819 --> 00:09:03,959
So, we get this in this place because this
addition has disappeared.

00:09:03,959 --> 00:09:09,959
But we don't get Y different from 0, we
get this: s(0) is different from 0.

00:09:09,959 --> 00:09:12,269
Because of the unifier here.

00:09:12,269 --> 00:09:15,000
Okay, now, we have to treat this.

00:09:15,000 --> 00:09:17,860
Well, but that's a fact that is obviously
true, right?

00:09:17,860 --> 00:09:19,670
s(0) is different from 0.

00:09:19,670 --> 00:09:27,930
So, here, Prolog would simply accept this constraint
and continue with the next interesting structural

00:09:27,930 --> 00:09:30,500
constraint, which actually requires application
of rules.

00:09:30,500 --> 00:09:35,959
So, in the left branch here, let's say that
we'd still find the solution because this

00:09:35,959 --> 00:09:38,300
constraint isn't hindering this.

00:09:38,300 --> 00:09:41,569
s(0) and 0 are different and they
are obviously different.

00:09:41,569 --> 00:09:43,459
So, and this can't be solved.

00:09:43,459 --> 00:09:50,449
And then continuing with this, just as before,
we find our solution, which is of course,

00:09:50,449 --> 00:09:51,759
nice.

00:09:51,759 --> 00:10:00,149
On the other side here, well, when we apply
resolution to this with the same unifier as

00:10:00,149 --> 00:10:07,820
in the previous tree, we of course again get
a new constraint here.

00:10:07,820 --> 00:10:09,160
Yes.

00:10:09,160 --> 00:10:11,839
And again.

00:10:11,839 --> 00:10:20,010
This is because for this literal we use this
right-hand side.

00:10:20,010 --> 00:10:25,459
And Y that occurs here is the Y2 and this
is matched to s(0).

00:10:25,459 --> 00:10:27,129
So, that's why we get this.

00:10:27,129 --> 00:10:29,470
This is not the constraint from here.

00:10:29,470 --> 00:10:34,720
This is the constraint from here for Y2 being
s(0).

00:10:34,720 --> 00:10:35,720
Okay.

00:10:35,720 --> 00:10:40,080
And then again, anyway, this doesn't even
become relevant.

00:10:40,080 --> 00:10:46,899
Because already this first literal here is
not unifiable with any of the program clause

00:10:46,899 --> 00:10:47,899
heads.

00:10:47,899 --> 00:10:52,980
Okay, that's also as before, so this part
of the tree isn't really much affected by

00:10:52,980 --> 00:10:55,320
this change in the program.

00:10:55,320 --> 00:10:57,819
What about the other side?

00:10:57,819 --> 00:11:07,899
So, this query now, yeah, this appears because
this could be resolved with the second program

00:11:07,899 --> 00:11:13,170
clause, which led to this as a new literal.

00:11:13,170 --> 00:11:18,890
And of course, we also had to apply the substitution
to the context of this query.

00:11:18,890 --> 00:11:24,379
So, that's how this Y different from 0
becomes Y3 different from 0.

00:11:24,379 --> 00:11:30,540
And here, we also get a slight instantiation,
because the U and s(X3).

00:11:30,540 --> 00:11:34,220
Okay, so this is our next goal then in this
place.

00:11:34,220 --> 00:11:41,699
Well, we, of course, start with the leftmost
literal, this is this, which is only unifiable

00:11:41,699 --> 00:11:44,279
with the first clause for addition.

00:11:44,279 --> 00:11:48,730
So, this is again, as before, everything is
set to 0 because of this 0 and this

00:11:48,730 --> 00:11:52,980
0, and these two requiring to be the same
term.

00:11:52,980 --> 00:11:56,459
So, that's what we had before.

00:11:56,459 --> 00:11:57,500
But now there is a difference.

00:11:57,500 --> 00:11:59,839
So, previously, we didn't have the red stuff.

00:11:59,839 --> 00:12:02,779
So, we simply had this query here.

00:12:02,779 --> 00:12:05,170
And this is exactly the query which led to
problems, right?

00:12:05,170 --> 00:12:08,910
Because if something times 0 is something
different from 0, so that's where previously

00:12:08,910 --> 00:12:12,930
we constructed this infinite search path.

00:12:12,930 --> 00:12:17,999
But now, thanks to this constraint, which
now actually, by substitution becomes 0

00:12:17,999 --> 00:12:21,980
is different from 0, and is the leftmost
literal.

00:12:21,980 --> 00:12:26,149
Prolog would not consider this and 0 different
from 0 is obviously wrong.

00:12:26,149 --> 00:12:31,410
So, Prolog could immediately mark this as
a failed node.

00:12:31,410 --> 00:12:37,250
Prolog wouldn't even have to explore solutions
for this literal here, which would lead to

00:12:37,250 --> 00:12:41,639
an infinite search because actually, 0
different from 0 is wrong.

00:12:41,639 --> 00:12:44,740
And hence, this query can never become true.

00:12:44,740 --> 00:12:50,739
So, actually, this addition of this constraint
here hasn't prevented the finding of the actual

00:12:50,739 --> 00:12:56,449
solution that you want to have, but it prevented
exploration of an infinite search path, which

00:12:56,449 --> 00:12:57,449
doesn't lead to solutions.

00:12:57,449 --> 00:13:02,649
So, in that sense, this seems to be very successful.

00:13:02,649 --> 00:13:08,639
This change to the program.

89 # slide
00:13:08,639 --> 00:13:14,989
Let us confirm the success by also looking
at the other, more complicated query that

00:13:14,989 --> 00:13:17,269
we actually started our motivation with.

00:13:17,269 --> 00:13:22,740
So, where we also find the missing solution
in this case, yes.

00:13:22,740 --> 00:13:29,749
So, that was the two solutions that we saw
before already, with the unchanged program

00:13:29,749 --> 00:13:31,069
for addition, multiplication.

00:13:31,069 --> 00:13:37,429
But then, remember the first video today we
had a problem that actually if we looked for

00:13:37,429 --> 00:13:40,779
further solutions, then we had to abort because
we went into an infinite search.

00:13:40,779 --> 00:13:47,069
Now, actually, with this changed program,
we do get the final answer here as well.

00:13:47,069 --> 00:13:54,389
Four times one is also a solution for n times
m being four.

00:13:54,389 --> 00:13:56,499
Okay, now all happy.

00:13:56,499 --> 00:13:57,549
Well, not really.

00:13:57,549 --> 00:13:59,660
Say yeah, it's only partial success.

00:13:59,660 --> 00:14:00,660
Why?

00:14:00,660 --> 00:14:04,699
Well, if we start trying out some further
queries, we find some unfortunate solutions

00:14:04,699 --> 00:14:08,949
or answers, like for example, asking whether
one times 0 is 0?

00:14:08,949 --> 00:14:10,819
Prolog will suddenly say, false.

00:14:10,819 --> 00:14:13,480
So, we did repair the program in some sense.

00:14:13,480 --> 00:14:16,889
So, that it behaves nicer in queries like
this.

00:14:16,889 --> 00:14:24,720
But now it actually fails or gives the wrong
answers on some, actually, very simple queries.

00:14:24,720 --> 00:14:29,689
So, you should probably investigate what's
happened here.

00:14:29,689 --> 00:14:37,189
And well, if you actually look at the program,
then you see that there is now a no-good story

00:14:37,189 --> 00:14:43,889
for something non-0 times 0, being whatever,
right?

00:14:43,889 --> 00:14:45,740
The first rule will not apply to this.

00:14:45,740 --> 00:14:48,939
Because 0 and s(0) don't match.

00:14:48,939 --> 00:14:54,019
But the second rule is also not good for proving
this query.

00:14:54,019 --> 00:14:57,749
Because of this constraint that the second
argument shouldn't be 0.

00:14:57,749 --> 00:15:01,839
Okay, so we made a mistake in making this change.

00:15:01,839 --> 00:15:07,410
We should also have provided a case for the
second argument indeed being 0.

00:15:07,410 --> 00:15:09,870
But we can fix this simply.

90 # slide
00:15:09,870 --> 00:15:13,449
So, here's the fix.

00:15:13,449 --> 00:15:19,870
We simply introduce a rule for the case, actually,
it's just the fact that we have to add for

00:15:19,870 --> 00:15:23,249
the case that we multiply something different
from 0 with 0.

00:15:23,249 --> 00:15:28,180
Yes, we don't need the case that 0 and
0 are the arguments because this is already

00:15:28,180 --> 00:15:29,569
captured by the first fact.

00:15:29,569 --> 00:15:37,860
So, by adding this fact, we indeed get again,
the correct result for, for example, one times

00:15:37,860 --> 00:15:38,860
0.

00:15:38,860 --> 00:15:40,019
Unlike in the previous slide.

00:15:40,019 --> 00:15:41,019
Okay.

00:15:41,019 --> 00:15:51,579
And indeed, this still works for the cases
where we want to factorize.

00:15:51,579 --> 00:15:57,769
So, where we provide the result and ask for
the arguments, right?

00:15:57,769 --> 00:15:59,269
Like N times M is four.

00:15:59,269 --> 00:16:01,839
So, this still works, but also this works.

00:16:01,839 --> 00:16:03,910
Okay, are we done yet?

00:16:03,910 --> 00:16:08,139
Is this now the perfect program that you want
to use for addition, multiplication?

00:16:08,139 --> 00:16:09,509
Well, unfortunately, not.

00:16:09,509 --> 00:16:12,989
So, there is something else, which doesn't
work anymore.

00:16:12,989 --> 00:16:16,490
So, actually, now we can't usefully work forward.

00:16:16,490 --> 00:16:22,129
So, we can or if we ask what is one times
one, then we do get a solution.

00:16:22,129 --> 00:16:28,569
But then if we continue our search then unlike we
would like to have actually, we again, get

00:16:28,569 --> 00:16:29,569
an infinite search.

00:16:29,569 --> 00:16:30,569
Okay.

00:16:30,569 --> 00:16:35,369
And actually, this is not just caused by this
program, this already occurred for one of

00:16:35,369 --> 00:16:39,429
the earlier versions of this intermediate
program that we saw.

00:16:39,429 --> 00:16:43,129
It simply didn't appear because we didn't
try it.

00:16:43,129 --> 00:16:47,749
Okay, so this is still not the program that
we should be very happy with.

00:16:47,749 --> 00:16:52,670
It works in some ways, in some directions,
but it isn't as general as we would like.

00:16:52,670 --> 00:16:54,089
So, what can we do?

00:16:54,089 --> 00:16:58,199
Well, what we should do is build a derivation
tree for this query.

00:16:58,199 --> 00:17:02,459
Because that's the way how we investigate
problems like this.

00:17:02,459 --> 00:17:07,870
So, we take this query, and this now candidate
program and see what the derivation tree looks

00:17:07,870 --> 00:17:08,870
like for this.

00:17:08,870 --> 00:17:15,380
And hopefully, by doing so we see what we
can do to improve the situation.

91 # slide
00:17:15,380 --> 00:17:19,390
So, let's go about this derivation tree.

00:17:19,390 --> 00:17:25,019
And actually, I will not comment on each step
of the construction because by now this has

00:17:25,019 --> 00:17:27,400
been done several times for different trees.

00:17:27,400 --> 00:17:32,059
So, well, we can see that for example, here
we only have one successor.

00:17:32,059 --> 00:17:36,620
Because the first two clauses, the facts about
multiplication, do not apply, apparently.

00:17:36,620 --> 00:17:38,419
So, we get something like this.

00:17:38,419 --> 00:17:43,830
Here, we also see the different from 0
constraints still applying and we also see

00:17:43,830 --> 00:17:48,010
that in this step, it will be instantiated
something that will not cause problems.

00:17:48,010 --> 00:17:49,360
Because it's obviously true.

00:17:49,360 --> 00:17:53,250
So, this will simply vanish when we encounter
it.

00:17:53,250 --> 00:17:59,529
We have these two successors here because
this "add" literal matches both of the clauses

00:17:59,529 --> 00:18:00,529
for addition.

00:18:00,529 --> 00:18:05,039
On the left side, we will ultimately find
our solution.

00:18:05,039 --> 00:18:14,520
So, this is simply applying the resolution
idea as we have done several times now.

00:18:14,520 --> 00:18:19,659
And it actually leads to a solution because
N is set that is s(0), so we get the correct

00:18:19,659 --> 00:18:20,659
answer N.

00:18:20,659 --> 00:18:28,000
But of course, the interesting bit is what
happens in this other search path.

00:18:28,000 --> 00:18:32,890
Because, as we saw on the previous slide, apparently
there was some infinity going on.

00:18:32,890 --> 00:18:36,350
And well, if you see what happens here.

00:18:36,350 --> 00:18:40,050
So, this will be unified with this clause.

00:18:40,050 --> 00:18:43,760
So, on the right-hand side, we will have another
addition.

00:18:43,760 --> 00:18:52,309
Namely, the one from here, but with unifier
applied, so this leads to the following new

00:18:52,309 --> 00:18:53,309
query.

00:18:53,309 --> 00:18:58,669
So, this is what we get from the right-hand
side under this unifier.

00:18:58,669 --> 00:19:05,100
And then the rest remains, except that we also
apply the substitution to these context literals.

00:19:05,100 --> 00:19:07,950
So, that changes the multiplication literals
slightly.

00:19:07,950 --> 00:19:10,649
But the actual problem is already with the
addition.

00:19:10,649 --> 00:19:16,220
If you look at this and at this, then again,
this doesn't look good in the sense that this

00:19:16,220 --> 00:19:18,440
is really a renaming of this literal.

00:19:18,440 --> 00:19:24,740
So, if you look at this, we see that there's
no hope that this will be a finite search

00:19:24,740 --> 00:19:25,780
tree here.

00:19:25,780 --> 00:19:29,820
Because whatever we did from here to here
can be done again through a change slightly

00:19:29,820 --> 00:19:32,500
what happens with the multiplication literal
here.

00:19:32,500 --> 00:19:39,470
But it doesn't change the fact that this search
will never end.

00:19:39,470 --> 00:19:46,020
Maybe we can apply the first clause, the fact
to get something on the left here.

00:19:46,020 --> 00:19:50,230
But it doesn't really matter because we can
also apply the second clause and this will

00:19:50,230 --> 00:19:52,570
lead to an infinite branch here.

00:19:52,570 --> 00:19:55,380
Okay, so what can we do?

00:19:55,380 --> 00:19:57,320
Now, this is a bit more subtle.

00:19:57,320 --> 00:20:03,929
And actually, a similar case is that not in
this detail, but it's a subtle observation

00:20:03,929 --> 00:20:06,370
was already made in the last week.

00:20:06,370 --> 00:20:09,830
There we had something about addition and
subtraction, actually.

00:20:09,830 --> 00:20:11,639
So, we define subtraction in terms of addition.

00:20:11,639 --> 00:20:20,519
And we're looking for cases where one of the
summands is set to one and the other two are

00:20:20,519 --> 00:20:21,519
variables.

00:20:21,519 --> 00:20:23,649
So, the other summand and result is a variable.

00:20:23,649 --> 00:20:29,680
And we observe that then it can be very subtle
whether we pose a query like this.

00:20:29,680 --> 00:20:36,130
Where we say something like U plus one should
be Z, or whether we ask that one plus U should

00:20:36,130 --> 00:20:37,130
be Z.

00:20:37,130 --> 00:20:40,720
In one case, we got all the infinitely many
solutions.

00:20:40,720 --> 00:20:44,640
And in the other case, we got to one closed
form solution.

00:20:44,640 --> 00:20:49,240
And now what we have here in this problematic
situation is something like this, a query

00:20:49,240 --> 00:20:54,570
like this, which leads to infinitely many
further steps.

00:20:54,570 --> 00:20:58,580
And there's always one branch that is not
finished.

00:20:58,580 --> 00:21:04,570
If we instead had been in a situation like
this, where there is exactly one closed answer

00:21:04,570 --> 00:21:06,120
to a question like this.

00:21:06,120 --> 00:21:09,300
Then we would be in a much better situation.

00:21:09,300 --> 00:21:11,539
So, maybe that is a solution.

00:21:11,539 --> 00:21:14,850
So, maybe we should exploit this commutativity,
right?

00:21:14,850 --> 00:21:17,120
Because these are almost the same query.

00:21:17,120 --> 00:21:19,870
Simply, the argument of addition has been
changed.

00:21:19,870 --> 00:21:24,580
And since we know that addition is commutative,
that mathematically doesn't make a difference.

00:21:24,580 --> 00:21:26,620
So, maybe we can do the same here.

00:21:26,620 --> 00:21:32,399
So, to arrange that actually, we have one
plus variable instead of variable plus one

00:21:32,399 --> 00:21:33,399
is variable.

00:21:33,399 --> 00:21:37,400
We only have to change the two arguments of
addition here.

00:21:37,400 --> 00:21:39,419
Logically, this shouldn't make a difference,
right?

00:21:39,419 --> 00:21:44,159
In terms of mathematical soundness of this
program, of these rules.

00:21:44,159 --> 00:21:47,170
It doesn't matter whether we have U, Y or
Y, U here.

00:21:47,170 --> 00:21:48,509
So, let's try this.

92 # slide
00:21:48,509 --> 00:21:51,990
Yes, so this is the same program as before.

00:21:51,990 --> 00:21:54,919
I simply switched this here.

00:21:54,919 --> 00:22:02,120
In the hope of being in a situation like this,
instead of the less comfortable one here.

93 # slide
00:22:02,120 --> 00:22:12,070
Okay, to see whether this really helps, we
should now take this program and run it on

00:22:12,070 --> 00:22:15,740
our query that was problematic in the last
instance.

00:22:15,740 --> 00:22:16,740
Okay.

00:22:16,740 --> 00:22:20,009
Now, let's see what will happen.

00:22:20,009 --> 00:22:24,649
Well, again, the first two clauses here do
not apply to this query.

00:22:24,649 --> 00:22:28,610
So, we right away go for the last clause of
the program.

00:22:28,610 --> 00:22:34,950
Now, of course, thanks to this switching
here, we also get the opposite order of these

00:22:34,950 --> 00:22:37,269
two arguments in this place here.

00:22:37,269 --> 00:22:41,090
So, this is the place where previously, we
then devolved into an infinite branch.

00:22:41,090 --> 00:22:43,100
So, let's see what happens now.

00:22:43,100 --> 00:22:50,250
Well, what happens now is that the first addition
clause isn't applicable anymore, so

00:22:50,250 --> 00:22:51,529
only the second one will apply.

00:22:51,529 --> 00:22:57,559
So, we don't get a branching, we get this
as our next step.

00:22:57,559 --> 00:23:06,130
And more importantly, after this one step,
we now can only apply the first addition clause.

00:23:06,130 --> 00:23:12,039
So, we don't get these growing orders, this
extension of the path because this has no

00:23:12,039 --> 00:23:13,039
effect.

00:23:13,039 --> 00:23:18,630
So, actually, after this step, the query will
really become shorter.

00:23:18,630 --> 00:23:24,889
So, this matches perfectly with the head here,
so this simply disappears, basically.

00:23:24,889 --> 00:23:30,010
Then we have this constraint that s(0)
is different from 0, which is true.

00:23:30,010 --> 00:23:33,890
So, this disappears.

00:23:33,890 --> 00:23:38,490
So, this can be deleted.

00:23:38,490 --> 00:23:39,490
Because it is true.

00:23:39,490 --> 00:23:43,149
And then we are left with this literal.

00:23:43,149 --> 00:23:47,110
And well, this matches exactly one of the
multiplication clauses.

00:23:47,110 --> 00:23:52,920
Namely, the first one and leads to a success
node.

00:23:52,920 --> 00:23:54,809
What is the solution?

00:23:54,809 --> 00:23:58,659
Well, N is Z, Z is s(Z1), Z1 is X2, X2 is
0.

00:23:58,659 --> 00:24:03,330
So, the answer is N is s(0), which is,
of course, the correct answer for multiplication

00:24:03,330 --> 00:24:05,840
of one by one.

00:24:05,840 --> 00:24:11,000
But more importantly, there is no remaining
infinite search path.

00:24:11,000 --> 00:24:12,720
So, we get the solution.

00:24:12,720 --> 00:24:18,220
And then Prolog is ready to say well, there
are no further opportunities to explore.

00:24:18,220 --> 00:24:22,010
And that was achieved by this small change
to the program.

00:24:22,010 --> 00:24:30,100
And we could only discover this by exploring
these derivation trees, I think.

94 # slide
00:24:30,100 --> 00:24:37,160
And indeed, it turns out that this is now
a very nicely behaving program.

00:24:37,160 --> 00:24:38,160
Indeed.

00:24:38,160 --> 00:24:41,679
It's slightly more complicated than the one
we started with, but we have massaged it in

00:24:41,679 --> 00:24:46,750
a way that now really interesting call modes
are supported.

00:24:46,750 --> 00:24:54,259
So, we can now ask, as we actually wanted
in the beginning, what is all choices or all

00:24:54,259 --> 00:24:59,419
the ways of factorizing certain numbers or
asking what are N and M such that a multiplication

00:24:59,419 --> 00:25:00,419
is four.

00:25:00,419 --> 00:25:06,940
We will now indeed give all the three desired
results and then a finite answer false.

00:25:06,940 --> 00:25:08,850
Instead of an infinite search.

00:25:08,850 --> 00:25:16,380
But we can also use it forward, so we can now,
unlike the version before the last fix, we

00:25:16,380 --> 00:25:18,250
can also run it forwards.

00:25:18,250 --> 00:25:24,590
So, we can really multiply two values and
actually also several further call modes work

00:25:24,590 --> 00:25:26,190
nicely now.

00:25:26,190 --> 00:25:30,580
Yes, so, except for the call mode, where we
leave everything unknown.

00:25:30,580 --> 00:25:36,919
So, we really just asked: What is multiplication
of X, Y, Z without any fixed values? This

00:25:36,919 --> 00:25:42,020
is a call which is not nicely supported by the
program, but anything else, forward multiplication,

00:25:42,020 --> 00:25:49,130
backward division factorization, checking
whether simply three arguments have this

00:25:49,130 --> 00:25:53,760
multiplication property, all these calls will
now work nicely.

00:25:53,760 --> 00:25:54,760
Okay.

00:25:54,760 --> 00:26:02,830
And in the last line, we actually also see
a query that is, in some sense, very short

00:26:02,830 --> 00:26:05,159
Prolog prime number generator.

00:26:05,159 --> 00:26:11,950
Because we basically asked for values which
are not the product of two things, which are

00:26:11,950 --> 00:26:13,610
both at least two.

00:26:13,610 --> 00:26:19,250
Okay, so maybe you want to try out this last
line with the program above to see how prime

00:26:19,250 --> 00:26:21,360
numbers are generated by this.

00:26:21,360 --> 00:26:27,730
But it's just playing around a bit.

95 # slide
00:26:27,730 --> 00:26:33,750
As a more general conclusion, let us reflect
on what we have achieved with operational semantics.

00:26:33,750 --> 00:26:40,200
So, the most important things that really
shows how Prolog searches for solutions.

00:26:40,200 --> 00:26:46,049
So, it explains how the Prolog search process
works, which you can also observe by using

00:26:46,049 --> 00:26:47,259
the tracing mode.

00:26:47,259 --> 00:26:48,669
But then you don't get this tree structure.

00:26:48,669 --> 00:26:53,769
You have to reconstruct it from the intermediate
steps that are shown on the console.

00:26:53,769 --> 00:27:00,970
So, with this tree structure and actually
just backtracking, so looking for yet unexplored

00:27:00,970 --> 00:27:07,440
alternatives in the left to right fashion,
this really explains how results are produced

00:27:07,440 --> 00:27:08,440
by Prolog.

00:27:08,440 --> 00:27:11,029
And also, in which order they are produced.

00:27:11,029 --> 00:27:15,029
And of course, also situations where no further
results will be produced because of infinite

00:27:15,029 --> 00:27:16,029
search.

00:27:16,029 --> 00:27:19,899
Okay, so the semantics build on unification
and resolution steps.

00:27:19,899 --> 00:27:27,529
So, unification to select the rules to apply
and also make the proper instantiations.

00:27:27,529 --> 00:27:33,360
Resolution is this one-step procedure where
one part of a query is solved according to

00:27:33,360 --> 00:27:35,629
one rule from the program.

00:27:35,629 --> 00:27:42,540
And then these are combined, or several resolution
steps are combined in this derivation tree

00:27:42,540 --> 00:27:47,649
structure, to explain how the overall search
works.

00:27:47,649 --> 00:27:54,179
But the base steps on unification and resolution
as known from just first order logic, predicate

00:27:54,179 --> 00:27:57,529
logic, and also from the previous lecture.

00:27:57,529 --> 00:28:03,639
Okay, so these semantics allow us to understand
things like non-termination.

00:28:03,639 --> 00:28:10,580
So, why does a program not return results,
or not return all results, or after returning

00:28:10,580 --> 00:28:14,769
all results goes into an infinite search, or
something like this.

00:28:14,769 --> 00:28:19,570
So, that's what happened in the program that
we discussed today.

00:28:19,570 --> 00:28:23,230
And with the derivation trees, you could actually
unlock what the problem is.

00:28:23,230 --> 00:28:28,460
And also with some insight, with some maybe
also trial and error, fix the program.

00:28:28,460 --> 00:28:33,270
And in the end, we had a nice program that
was applicable to more situations,

00:28:33,270 --> 00:28:40,049
certainly, than the original one that was
just by logical thinking and not thinking

00:28:40,049 --> 00:28:43,110
about the search process.

00:28:43,110 --> 00:28:49,040
Okay, and unlike the declarative semantics,
these operational semantics allows us also to

00:28:49,040 --> 00:28:55,120
understand the impact of changes, like changing
the order of facts and rules or changing the

00:28:55,120 --> 00:28:57,140
order of literals inside facts and rules.

00:28:57,140 --> 00:29:01,210
So, we have seen this in the exploration of
this example program that this can really

00:29:01,210 --> 00:29:02,210
make a difference.

00:29:02,210 --> 00:29:04,830
And we knew this from the Prolog execution.

00:29:04,830 --> 00:29:10,990
But the declarative semantics with the ground
terms and the Herbrand model wasn't able to

00:29:10,990 --> 00:29:12,110
explain this.

00:29:12,110 --> 00:29:17,299
Yes, that's one motivation for using the operational
semantics.

00:29:17,299 --> 00:29:25,039
Okay, now, you, of course, don't have to make
a case study like in this lecture today.

00:29:25,039 --> 00:29:31,639
So, your task for example, in exercise or
exam would not be to take a program and improve

00:29:31,639 --> 00:29:33,610
it to capture more call modes.

00:29:33,610 --> 00:29:38,100
So, the strategy for this would be to use
the operative semantics, but that requires

00:29:38,100 --> 00:29:39,620
more experience with Prolog, I think.

00:29:39,620 --> 00:29:42,669
So, that's not something that we would ask
of you.

00:29:42,669 --> 00:29:47,580
But of course, executing the operational semantics
on an example is something that you should

00:29:47,580 --> 00:29:52,380
really practice and be prepared to solve as
a task.
