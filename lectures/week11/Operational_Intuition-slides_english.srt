13 # slide
00:00:02,000 --> 00:00:06,800
Let me provide, at this point already,
some operational intuition for Prolog.

00:00:06,800 --> 00:00:10,400
So, how you could think about execution going on.

00:00:10,400 --> 00:00:12,960
This will not be done in detail here.

00:00:12,960 --> 00:00:18,400
Also, we will actually handle this
more formally later in another week (optionally).

00:00:18,400 --> 00:00:26,480
But it's useful at the beginning to already have
some idea of what's going on in principle.

00:00:26,480 --> 00:00:34,480
Of course, the idea of deducing new information
from given information is already the main idea.

00:00:34,480 --> 00:00:37,760
But how could this play out on a concrete program?

14 # slide
00:00:38,640 --> 00:00:44,160
Okay, and I will do this on this program,
whose content is not so interesting.

00:00:44,160 --> 00:00:45,200
It's an old example.

00:00:45,200 --> 00:00:46,720
That's also why it's in German

00:00:47,280 --> 00:00:50,640
despite the rest of the
slides being in English.

00:00:51,760 --> 00:00:57,840
So, one thing I already called out
earlier is the fact that we don't have

00:00:58,720 --> 00:01:01,440
evaluation of expressions to values as in Haskell.

00:01:02,480 --> 00:01:05,360
So, instead, given such a program,
which basically defines some

00:01:07,040 --> 00:01:10,960
relations or relationships,
we work with queries.

00:01:10,960 --> 00:01:14,240
And as an outcome, we get true or false.

00:01:14,240 --> 00:01:17,680
Or if we have variables in the
query, then variable substitutions.

00:01:17,680 --> 00:01:23,280
So, we don't put an expression here that evaluates
to a value like a number or picture or whatever,

00:01:23,280 --> 00:01:27,360
but we put something which could be
interpreted as a question / as the query,

00:01:28,080 --> 00:01:32,880
which has a yes- or no-answer. Then
there is so-called resolution going on.

00:01:32,880 --> 00:01:35,680
That's exactly the notion of the logical

00:01:35,680 --> 00:01:40,320
concept that we will use when we do
operational semantics more formally.

00:01:41,040 --> 00:01:43,600
And in the end, we either have false or true,

00:01:43,600 --> 00:01:46,960
or in the case like this, where we have
variables, we get variable substitutions.

00:01:46,960 --> 00:01:51,360
We have already seen how this can be
something or something else, for example.

00:01:51,360 --> 00:01:54,240
So, here, there will be two solutions for this query.

00:01:54,240 --> 00:01:56,960
And that's why we get two variable substitutions.

15 # slide
00:01:59,840 --> 00:02:03,120
Okay, how would this happen in a bit more detail?

00:02:03,120 --> 00:02:08,480
So, how does this resolution work? It would later be done
with an explicit tree representation.

00:02:08,480 --> 00:02:13,280
But here, I will just explain it in
some steps based on this example.

00:02:13,280 --> 00:02:14,720
Let's say we have these facts.

00:02:14,720 --> 00:02:16,080
And these are two rules.

00:02:16,640 --> 00:02:18,320
And we have a query like this.

00:02:18,880 --> 00:02:22,880
Then, well, the facts don't apply because
there is no fact about Grossvater.

00:02:22,880 --> 00:02:28,800
And then well, what Prolog has and will
do is try to apply some of these rules.

00:02:28,800 --> 00:02:34,080
And the way to apply them is to see
whether one of them or both of them match

00:02:34,080 --> 00:02:36,640
the thing that you want to prove in the head.

00:02:37,360 --> 00:02:41,920
And if so, then we can reduce this to trying
to find solutions for the right-hand side.

00:02:41,920 --> 00:02:46,240
Because if we know the right-hand side, then
we can imply the thing you want to know about.

00:02:46,880 --> 00:02:50,960
Okay, so the first thing is to match this
thing that we are looking for, the solution

00:02:50,960 --> 00:02:55,440
that we want to have against the head of our rules.

00:02:55,440 --> 00:02:59,600
And that could be seen as a form of
pattern matching or parameter passing.

00:02:59,600 --> 00:03:00,960
Because basically, we say, well,

00:03:00,960 --> 00:03:04,800
the rule is generally about G and
E and we have Kurt and some X.

00:03:04,800 --> 00:03:09,840
So, and the G will be "kurt"
and the X will be whatever E is.

00:03:09,840 --> 00:03:12,960
Okay, so we match this or pass some parameters.

00:03:14,160 --> 00:03:17,440
Okay, so that's for the
first rule. First, we try this,

00:03:17,440 --> 00:03:20,480
we already know if we have two rules with
the same head, then both will be tried.

00:03:20,480 --> 00:03:21,440
So, there are alternatives.

00:03:21,440 --> 00:03:24,560
So, let's use the first alternative.

00:03:24,560 --> 00:03:30,080
Then basically these match values are
transmitted to the right-hand side.

00:03:30,080 --> 00:03:34,560
So, actually, it is this right-hand
side constraint concerning G

00:03:34,560 --> 00:03:40,240
and V is now translated or
reduced to this constraint

00:03:40,240 --> 00:03:43,840
with if G being "kurt" because this
was a constant that was passed here.

00:03:44,880 --> 00:03:48,240
As this, a V is one of these free
variables, so it remains a variable.

00:03:48,240 --> 00:03:52,640
There's no reason at this moment to
instantiate it to something very specific.

00:03:54,720 --> 00:03:56,320
Okay, so that's how far we are.

00:03:56,880 --> 00:04:03,440
Then we know, well, in order to make these two
things true because this comma is an "and".

00:04:03,440 --> 00:04:04,800
So, they both have to be true.

00:04:04,800 --> 00:04:08,160
So, this should be true for
this choice of G being "kurt".

00:04:08,160 --> 00:04:09,520
Okay. How could this be true?

00:04:09,520 --> 00:04:13,760
Well, there is no rule that matches here that
would be relevant. The facts are relevant.

00:04:13,760 --> 00:04:18,320
And if you see here, well then actually there
is exactly one statement about "kurt" being

00:04:19,280 --> 00:04:23,840
vaterVon (father of) something, somebody
("fritz"). So, this means

00:04:23,840 --> 00:04:27,840
that by matching against
the fact now, that V should be "fritz".

16 # slide
00:04:29,200 --> 00:04:32,640
Okay, so the first principle
here is reduction to subproblems.

00:04:32,640 --> 00:04:38,000
That's what happens here. And then there
are new subqueries from left to right.

00:04:38,000 --> 00:04:41,040
Well, this is the first subquery
which we have solved here.

00:04:41,040 --> 00:04:46,880
And then there might be more to discover or more
to find out in subqueries to the right.

00:04:46,880 --> 00:04:52,160
Indeed, now that we know that V should be
"fritz" if at all, this can be made true.

00:04:52,160 --> 00:04:55,520
This also means, of course, that this
occurrence of V should be "fritz".

00:04:55,520 --> 00:04:59,760
Because you know, in the same rule, the same
variables correspond to the same entities.

00:05:01,360 --> 00:05:08,320
So, a second reduction we need to find out
whether this now instantiated for V equals "fritz",

00:05:08,320 --> 00:05:10,160
is also true or can be made true.

00:05:10,880 --> 00:05:11,200
Okay.

00:05:11,200 --> 00:05:15,760
Again, this is something that might
match against our database of facts.

00:05:15,760 --> 00:05:18,400
And indeed, it does twice even.

00:05:18,400 --> 00:05:24,960
So, by checking this from top to bottom, which is
exactly what Prolog will do in its search process,

17 # slide
00:05:26,080 --> 00:05:33,120
and E will be found out to be "paul", or
at least this will be one possibility.

00:05:34,000 --> 00:05:34,640
Okay.

00:05:34,640 --> 00:05:37,840
And then, hence, we are at the end of this first

00:05:38,720 --> 00:05:41,200
line, first rule, so there's
nothing more to check.

00:05:41,200 --> 00:05:43,360
Now we know that E is "paul".

00:05:43,360 --> 00:05:47,280
And we should still somehow
transmit this to the original

00:05:47,280 --> 00:05:49,360
query because there we have used variable X.

```
00:05:49,360 --> 00:05:51,520
And well, basically, since we have found the

00:05:51,520 --> 00:05:55,520
instantiation for E now, we
know that this E is "paul".

00:05:55,520 --> 00:05:57,520
And this is also the return result,

00:05:58,160 --> 00:06:01,360
which is not as a value return, but
actually as a variable substitution.

00:06:01,360 --> 00:06:03,840
Yes, in this matching, we
found out that X should be E.

00:06:03,840 --> 00:06:05,600
Now we have found a solution for E.

00:06:05,600 --> 00:06:07,440
So, that's also the answer for X.

00:06:07,440 --> 00:06:11,760
That's how on the previous slide
the X = E came about.

00:06:12,880 --> 00:06:14,640
Now, is this the only solution here?

00:06:14,640 --> 00:06:17,280
No, we already know from the example
in the previous slide, or from what I

00:06:17,280 --> 00:06:20,560
showed there, that there's also
a solution where X is "hans".

00:06:20,560 --> 00:06:21,760
How does this come about?

00:06:22,320 --> 00:06:31,200
Well, at this point, where we had this "fritz" and
E, I looked here and found out that E can be "paul".

00:06:31,200 --> 00:06:33,200
But I already mentioned that E could also be "hans".

00:06:33,200 --> 00:06:36,960
How is this actually found or chosen by Prolog?

18 # slide
00:06:37,520 --> 00:06:47,840
Well, actually, when looking for matching rules
or facts from top to bottom, we first found E.

00:06:48,560 --> 00:06:53,040
But then actually since a relation is
not a unique mapping, exactly like here,

00:06:53,040 --> 00:06:57,120
so, there's not exactly one
person of which "fritz" is Vater (father).

00:06:57,840 --> 00:07:03,440
And Prolog will also consider further
rule choices via backtracking.

00:07:03,440 --> 00:07:07,760
So, if after this, we decide we want to
retry, you want to find another solution,

00:07:07,760 --> 00:07:14,720
then Prolog would go back to this point and see:
well, regarding this fact I have just used,

00:07:14,720 --> 00:07:17,040
is there another possibility
to find a solution for E?

00:07:17,680 --> 00:07:19,280
And of course, there is we notice, right?

00:07:19,280 --> 00:07:22,720
So, this was the last position
where something was tried.

00:07:22,720 --> 00:07:25,920
Now, if we do backtracking/retrying,
then the search continues there.

00:07:25,920 --> 00:07:30,960
So, Prolog will see: in the later rules, from
top to bottom, are there other possible choices?

00:07:30,960 --> 00:07:33,200
Yes, "paul" is now not active anymore.

00:07:33,200 --> 00:07:35,600
And well, indeed, there is another solution found.

00:07:35,600 --> 00:07:37,680
Namely, by this last rule.

00:07:37,680 --> 00:07:38,640
E could also be "hans".

00:07:39,760 --> 00:07:43,840
And how is this then used
in the whole search process?

19 # slide
00:07:44,800 --> 00:07:50,720
Well, basically, at that point where we could
do this retry, and the rest is replayed, right?

00:07:50,720 --> 00:07:54,720
So, now, instead of up to
here, we had found that V should be "fritz".

00:07:54,720 --> 00:07:56,320
Then we found E is "paul".

00:07:56,320 --> 00:08:01,600
If you retry, then we retry this
part again, and find that E is "hans".

00:08:01,600 --> 00:08:07,520
And this is then, of course, also
transmitted as a final result to the output.

00:08:09,120 --> 00:08:12,640
So, that's how X = "hans" comes into play.

00:08:14,080 --> 00:08:15,120
Now, is that all?

00:08:16,320 --> 00:08:21,600
No, we can have other choices, other
places where we can make another choice.

00:08:21,600 --> 00:08:22,960
We don't have another choice here, right?

00:08:22,960 --> 00:08:23,840
So, if you have used this

00:08:25,920 --> 00:08:29,840
line here, this fact here, then there's
nothing else to try for istVaterVon.

00:08:29,840 --> 00:08:33,360
Because this is already the last
one in the top to bottom attempts.

00:08:34,000 --> 00:08:36,960
But actually, in an earlier place,
we already had a choice, right?

00:08:36,960 --> 00:08:39,840
Here, we didn't have a choice because
here we had something with "kurt" and

00:08:40,640 --> 00:08:42,320
someone else, and there was only one rule.

00:08:42,320 --> 00:08:43,680
So, there isn't any choice.

00:08:43,680 --> 00:08:46,480
But actually, the first thing that
we tried also had an alternative.

00:08:46,480 --> 00:08:47,680
I mentioned this already, right?

00:08:47,680 --> 00:08:50,000
We didn't have to use this first rule.

00:08:50,000 --> 00:08:52,640
Well, we did have because we
want to go from top to bottom.

00:08:52,640 --> 00:08:55,840
But after we have explored
this, we might reconsider well,

00:08:55,840 --> 00:08:57,600
maybe we should have taken a second one.

00:08:57,600 --> 00:08:58,800
We haven't checked this yet.

00:08:59,920 --> 00:09:02,080
But we have to.

20 # slide
00:09:02,080 --> 00:09:05,920
So, the backtracking also concerns
trying further matching rules

00:09:06,560 --> 00:09:13,600
like this one and not just choosing different
facts, but also trying other rules like this one.

00:09:15,280 --> 00:09:16,480
How will this play out?

00:09:18,400 --> 00:09:25,760
Well, then we have to try this right-hand
side, which looks very similar.

00:09:25,760 --> 00:09:28,240
Except for different
variables, so again for this M,

00:09:28,800 --> 00:09:36,480
we will find the solution "fritz"
from this first fact here.

00:09:36,480 --> 00:09:41,440
Then this reduces to the right constraint, right?

00:09:41,440 --> 00:09:44,000
The second one, the second
constraint in the left to right

00:09:44,000 --> 00:09:49,840
trying of this rule. We
now have to establish this.

00:09:50,400 --> 00:09:51,200
Can we do this?

00:09:51,200 --> 00:09:52,160
No, not really.

00:09:52,160 --> 00:09:56,720
Because well, in this case, there isn't
even a predicate of this name existing.

00:09:57,440 --> 00:10:03,120
So, this is fail, either really by an error
method that Prolog doesn't know about this

00:10:03,680 --> 00:10:07,200
predicate, or it will simply not find a solution.

00:10:07,200 --> 00:10:09,280
Without error method, as a silent failure.

00:10:09,280 --> 00:10:11,840
But in any case, there is no
fail solution found for E.

00:10:11,840 --> 00:10:16,320
So, there's also nothing that is somehow
transmitted back here to be propagated to X.

00:10:16,320 --> 00:10:18,560
Actually, the two things we
have already found for X,

00:10:18,560 --> 00:10:20,960
namely, "paul" and "hans" will be the only solutions.

00:10:22,480 --> 00:10:24,640
And then the search will be complete.

00:10:24,640 --> 00:10:26,800
And we would have given two solutions.

00:10:26,800 --> 00:10:31,840
And then Prolog gives the prompt
again, for the next variable.

21 # slide
00:10:35,520 --> 00:10:38,080
Okay, there is another way to look at this.

00:10:38,080 --> 00:10:40,720
The same idea but presented differently.

00:10:40,720 --> 00:10:41,600
And that's interesting.

00:10:41,600 --> 00:10:46,080
And so far, as you can have
a simulation of the

00:10:47,200 --> 00:10:51,680
execution using the command
"trace" in most Prolog systems.

00:10:51,680 --> 00:10:56,080
And what I'm showing here, which corresponds
to what we saw on previous slides,

00:10:56,080 --> 00:11:00,080
and can be better compared and
aligned with what the Prolog system does.

00:11:00,080 --> 00:11:05,680
So, you might actually want to try
to load this program into the Prolog interpreter.

00:11:06,560 --> 00:11:13,440
Issue it with this trace command. And afterwards,
look at this query and then compare what you

00:11:13,440 --> 00:11:17,600
are shown in this debug mode against what
is on the previous slides and this slide.

00:11:18,640 --> 00:11:20,320
Okay, actually what's happening here is:

00:11:20,320 --> 00:11:30,880
We started with this query, then we saw that this
reduces via the first rule here to this subquery

00:11:30,880 --> 00:11:38,400
or reduced query. It is not smaller, but it's reduced
in the sense that we reduce this head to the body.
```

00:11:38,400 --> 00:11:42,560
So, to some subproblem in a sense, because
now we only have to find solutions for this.

00:11:42,560 --> 00:11:44,560
And then we would have the
solution for the original query.

00:11:46,080 --> 00:11:47,920
We saw that the "kurt" is set here.

00:11:47,920 --> 00:11:52,800
Because it was passed as a parameter,
whereas the V is, of course, unknown.

00:11:52,800 --> 00:11:54,080
It's a free variable.

00:11:54,080 --> 00:11:57,120
And whatever comes out here
will also be the result for X.

00:11:57,120 --> 00:12:00,000
So, in the previous slides,
I had still the E here.

00:12:00,000 --> 00:12:03,360
But actually, we know that ultimately,
this E is matched against the X.

00:12:03,360 --> 00:12:06,800
So, actually, we could also see this as X here.

00:12:07,520 --> 00:12:13,360
Okay, so actually also pass this variable.
Not just pass the constant "kurt" to G,

00:12:13,360 --> 00:12:16,560
but also pass the variable X to the variable E.

00:12:17,200 --> 00:12:18,560
Then we have this subproblem.

00:12:19,680 --> 00:12:24,000
Then, we saw that this
can be solved by choosing V

00:12:24,000 --> 00:12:27,680
to be "fritz" because of the first fact here.

00:12:27,680 --> 00:12:31,760
So, this means then that this
is satisfied, is fulfilled.

00:12:31,760 --> 00:12:37,840
We still have to satisfy the second part from left
to right, where now V is of course "fritz" already.

00:12:38,800 --> 00:12:40,640
Okay, then we have this subproblem.

00:12:40,640 --> 00:12:43,360
And this matches one of
the facts, namely, this one,

00:12:44,320 --> 00:12:50,080
telling us that X could "paul", which is exactly
the first result that Prolog would deliver.

00:12:50,080 --> 00:12:51,760
And then there's nothing left to check, right?

00:12:51,760 --> 00:12:54,640
So, this would also be resolved now.

00:12:54,640 --> 00:12:59,280
And then Prolog has nothing more to prove,
and can actually output the first solution.

00:13:00,560 --> 00:13:02,320
Then that was the point where the user might say,

22 # slide
00:13:02,320 --> 00:13:05,840
well, I want to have another
solution via issuing a semicolon.

00:13:06,560 --> 00:13:08,160
So, that would basically mean backtracking.

00:13:08,160 --> 00:13:13,200
So, avoid or take back this last choice,
go back to this point where we still had

00:13:13,200 --> 00:13:20,240
the choice and say, well, this time, let me
not take this fact here which led to "paul".

00:13:20,240 --> 00:13:21,280
Let me try another one.

00:13:21,280 --> 00:13:29,120
And well, the next one already applies as well,
which is, then again, resolving this subquery

00:13:29,760 --> 00:13:31,320
with the solution: X is "hans", right?

00:13:31,320 --> 00:13:36,320
So, this is again finished,
but now with this result.

00:13:37,600 --> 00:13:40,400
Okay, then we can say: well, let
me also undo this and actually

00:13:40,400 --> 00:13:43,760
see whether there are other
things that could be dropped.

23 # slide
00:13:43,760 --> 00:13:46,960
And well, then, actually,
as on the previous slides,

00:13:46,960 --> 00:13:50,560
turns out that the other point
that we had a choice was this one,

00:13:50,560 --> 00:13:53,280
where I didn't have to choose the first
rule, I could have chosen another one.

00:13:53,280 --> 00:13:56,160
There was no other choice in between
that could have some alternatives.

00:13:56,160 --> 00:13:58,800
But this first choice for this
rule had some alternatives.

00:13:58,800 --> 00:14:01,280
Because instead of using this "istVaterVon",

00:14:01,280 --> 00:14:04,720
istVaterVon", you could have used
the "istVaterVon, istMutterVon" rule.

00:14:04,720 --> 00:14:06,400
Okay, this is what will happen now.

00:14:06,400 --> 00:14:10,160
So, this will now be reduced to this subquery.

00:14:10,800 --> 00:14:16,240
Now, with these two choices of
course, again, "kurt" is set for the G.

00:14:16,800 --> 00:14:22,080
There is the free variable M and whatever
comes out will also be the outcome for X.

00:14:22,080 --> 00:14:23,440
So, that's the subproblem.

00:14:24,480 --> 00:14:27,040
Then, Prolog can make some progress.

00:14:27,040 --> 00:14:31,520
It can choose the first rule here
to decide that M should be "fritz".

00:14:32,880 --> 00:14:39,920
That does away with this check. But this
requirement still remains now with M being "fritz".

00:14:39,920 --> 00:14:42,400
And then that's the point where we get a failure

00:14:42,400 --> 00:14:44,640
because there's nothing
known about this predicate.

00:14:46,080 --> 00:14:49,520
Okay, ultimately, Prolog would then be finished.

00:14:49,520 --> 00:14:52,800
And so far, it has found these two
solutions and there are no further ones.

00:14:52,800 --> 00:14:57,840
So, that would be the result of execution.

00:15:01,360 --> 00:15:07,040
Okay, and well, you can see how this plays out,

00:15:07,040 --> 00:15:09,360
if you play this trick in the trace mode.

00:15:09,360 --> 00:15:19,840
You won't see exactly these lines here, but
something that mirrors what's going on here.
