24 # slide
00:00:01,760 --> 00:00:01,920
To finish up for this week:

00:00:01,920 --> 00:00:05,920
Let us have a brief look at some

00:00:06,480 --> 00:00:11,760
syntax properties or things that you have to
keep in mind also in comparison to Haskell.

00:00:11,760 --> 00:00:16,880
So, the next few slides will point out some
differences that I have already brushed

00:00:16,880 --> 00:00:21,400
on, concerning, for example, lower
and upper-case syntax for variables,

00:00:21,400 --> 00:00:24,960
vs. data constructors
between Prolog and Haskell.

00:00:24,960 --> 00:00:31,440
But I will also provide some terminology
that we have implicitly already been using

00:00:31,440 --> 00:00:35,280
when talking about predicates and rules
and clauses maybe in the previous videos.

00:00:35,280 --> 00:00:40,960
So, these are notions that are
usual terminology for Prolog.

00:00:40,960 --> 00:00:45,200
You will also find them in the
books, probably, if you use a book.

00:00:45,200 --> 00:00:49,120
And also when we would discuss
the operational semantics,

00:00:49,120 --> 00:00:51,440
so how Prolog programs are actually executed

00:00:52,000 --> 00:00:55,040
beyond just the intuition I
provided in the previous video,

00:00:55,040 --> 00:00:57,840
we would use this terminology.

25 # slide
00:01:00,000 --> 00:01:03,360
Okay, so this is one of the
programs that you have already seen.

00:01:03,920 --> 00:01:09,360
And based on this, I can point out these notions.

00:01:09,360 --> 00:01:12,960
So, let's go through them one at a time.

00:01:12,960 --> 00:01:16,800
So, that's already something I
have used several times already.

00:01:16,800 --> 00:01:20,880
So, predicates are the properties
that you want to express about

00:01:21,840 --> 00:01:24,240
entities or pairs of entities, et cetera.

00:01:24,240 --> 00:01:26,720
Right?
So, sometimes they are also called relations.

00:01:27,440 --> 00:01:31,440
Because, of course, mathematically that's
what something like these expresses.

00:01:31,440 --> 00:01:38,080
A binary predicate would be a binary relation,
but the programming notion for this is "predicate".

00:01:38,080 --> 00:01:38,880
So, this is a predicate,

00:01:38,880 --> 00:01:42,720
and predicates are defined in the
program and used in the queries.

00:01:43,840 --> 00:01:48,240
Okay, then the entities to
which the predicates may refer

00:01:48,240 --> 00:01:53,280
are in the example so far have simply been
named constants like "kurt", "fritz", et cetera.

00:01:53,280 --> 00:01:57,600
You will see in a moment that there are also
other things that could appear here,

00:01:57,600 --> 00:02:02,880
namely structured objects, but in the most
simple cases, these are simply the constants.

00:02:02,880 --> 00:02:05,840
And they are written in
lowercase, just as predicates are.

00:02:06,800 --> 00:02:07,760
Okay, then something like this.

00:02:07,760 --> 00:02:09,440
I've already referred to as facts.

00:02:09,440 --> 00:02:12,640
So, that's very simple rules that
don't have any preconditions,

00:02:12,640 --> 00:02:17,520
simply statements that are made in the program
that you can load and then ask queries again.

00:02:17,520 --> 00:02:19,600
So, these are facts because
they don't have preconditions.

00:02:20,320 --> 00:02:23,440
Then, if you have something where we do
have preconditions, we use implication.

00:02:23,440 --> 00:02:30,240
And we use this symbol which should be seen
as an implication arrow from right to left.

00:02:30,240 --> 00:02:33,760
Well, this probably doesn't
really look like an arrow.

00:02:33,760 --> 00:02:37,600
But that's how this is meant as
an implication from right to left.

00:02:38,960 --> 00:02:41,120
If we have a comma on the right-hand side,

00:02:41,120 --> 00:02:44,720
or actually also in queries then
this stands for conjunction.

00:02:44,720 --> 00:02:49,040
I also already mentioned that a semicolon
stands for disjunction, but that I will

00:02:49,040 --> 00:02:53,360
very rarely use this, maybe not
at all in the following examples.

00:02:53,360 --> 00:02:56,400
But the comma for conjunction
will occur again and again.

00:02:57,680 --> 00:03:02,000
Okay, then these are rules as opposed to
facts because there are preconditions.

00:03:02,000 --> 00:03:06,800
So, facts could be seen as very simple rules,
but we really say "facts" and here we say "rules".

00:03:06,800 --> 00:03:07,920
Because they have preconditions.

00:03:09,240 --> 00:03:14,800
And here we have variables occurring and I
already mentioned that variables in Prolog

00:03:14,800 --> 00:03:16,960
are upper case or at least
have to start upper case.

00:03:16,960 --> 00:03:20,400
So, we have multi-letter
variables then only the first

00:03:21,280 --> 00:03:25,520
letter has to be uppercase in order
to see that this is a variable.

00:03:26,080 --> 00:03:29,520
There are also the anonymous
variables, the underscore which

00:03:29,520 --> 00:03:31,360
does not appear on this specific slide.

00:03:31,360 --> 00:03:33,200
But you have already seen it in another example.

00:03:34,400 --> 00:03:34,960
What else?

00:03:34,960 --> 00:03:35,840
Well, this is a literal.

00:03:35,840 --> 00:03:40,160
So, a literal is the application
of a predicate to some entities.

00:03:40,160 --> 00:03:44,720
Be it variables or constants or structures, right?

00:03:44,720 --> 00:03:47,600
So, the predicate here is really
just the name of the predicate.

00:03:47,600 --> 00:03:50,080
So, not the whole thing that we see here.

00:03:50,080 --> 00:03:54,880
The whole thing, the application of the predicate
to some arguments, would be called "literal".

00:03:54,880 --> 00:03:58,000
So, literals occur in the
head, in the body of rules.

00:03:58,000 --> 00:04:01,280
And of course, also queries are literals.

00:04:04,560 --> 00:04:05,060
Okay.

00:04:06,400 --> 00:04:11,680
And all types of combinations of literals or be it

00:04:11,680 --> 00:04:17,840
simple facts or be it rules in the program
or be it queries are together called clauses.

00:04:17,840 --> 00:04:20,720
Where we say a clause could be
any of these three things.

00:04:20,720 --> 00:04:25,440
So, this is a notion, mainly,
that will occur or comes from the

00:04:26,080 --> 00:04:28,880
resolution principles or the execution mechanism.

00:04:30,640 --> 00:04:32,480
Talks about clauses in general.

00:04:34,480 --> 00:04:37,840
Okay, what's not seen here
in this example is negation.

00:04:38,400 --> 00:04:41,840
Right?
We had one example with this unequal sign.

00:04:42,800 --> 00:04:45,200
There's also an operator for negation

00:04:45,200 --> 00:04:51,040
in Prolog, so that could occur in queries
or on the right-hand side of rules.

00:04:51,040 --> 00:04:56,080
What is not only not in this
example, but in general, not allowed

00:04:56,080 --> 00:05:00,960
is to use negation in the head
of a rule or in a stated fact.

00:05:00,960 --> 00:05:02,800
Okay, so in this example there is no negation at all.

00:05:02,800 --> 00:05:04,480
When we come back to negation

00:05:04,480 --> 00:05:09,840
and it will only be allowed to be used
in queries or in the bodies of rules.

26 # slide
00:05:13,840 --> 00:05:19,840
Okay, so to build clauses, there are these
different ingredients that follow their syntactic rules.

00:05:19,840 --> 00:05:24,480
So, I already mentioned constants and
this can basically be either numbers,

00:05:24,480 --> 00:05:28,240
or lowercase identifiers like "kurt", et cetera.

00:05:28,240 --> 00:05:29,760
These are called atoms.

00:05:29,760 --> 00:05:38,800
So, atomic constants that have no further internal
structure or meaning, simply named identifiers.

00:05:39,600 --> 00:05:42,560
And they have to be lowercase to
distinguish them from variables.

00:05:42,560 --> 00:05:43,760
Okay, these will be constants.

00:05:44,640 --> 00:05:49,200
Then, of course variables, as I already
mentioned, upper case, starting upper case at least.

00:05:49,200 --> 00:05:51,360
Or anonymous. And there are also special

00:05:51,360 --> 00:05:56,880
variables that start with an underscore
but then have some cryptic naming scheme.

00:05:56,880 --> 00:06:01,360
So, these will be variables that are
introduced by the runtime system as helpers.

00:06:01,360 --> 00:06:04,160
So, that's not something that you
will usually put into your program.

00:06:04,160 --> 00:06:09,040
But it could occur in the output of an execution
where you will see examples like this.

00:06:09,040 --> 00:06:14,000
And this will often simply be a variable
name that has been introduced by Prolog.

00:06:15,440 --> 00:06:20,080
Okay, then there can be operator terms or things
like what would be arithmetic expressions in

00:06:20,720 --> 00:06:21,760
other languages.

00:06:21,760 --> 00:06:23,600
So, we will see things like this.

00:06:23,600 --> 00:06:28,000
But we have to be careful that
they are really written like this

00:06:29,440 --> 00:06:32,640
occurring in a rule, for example,
they are really just structural terms.

00:06:32,640 --> 00:06:35,760
So, it is not like one plus
three times four is 13.

00:06:35,760 --> 00:06:38,000
It's really just the term that we see here.

00:06:38,000 --> 00:06:42,320
It's not much different from
any other data structure.

00:06:43,120 --> 00:06:43,840
Okay.

00:06:43,840 --> 00:06:50,080
So, these are the structures that
correspond roughly to data types in Haskell.

00:06:50,080 --> 00:06:54,960
So, remember the enumeration and then
also more structured types that we use.

00:06:54,960 --> 00:07:00,800
We also use the date and time at some point
for an example or we use this flight modeling.

00:07:00,800 --> 00:07:02,960
You could also model persons with their properties.

00:07:02,960 --> 00:07:10,720
So, these are data structures, and they
use atoms as the data constructors, right?

00:07:10,720 --> 00:07:13,760
So, here we have also a lowercase identifier.

00:07:13,760 --> 00:07:18,160
And in the argument positions, we could
have, for example, numbers or other atoms.

00:07:18,160 --> 00:07:21,760
So, this gives us recursive
structures that are composite.

00:07:22,400 --> 00:07:24,000
They can be recursive.

00:07:24,000 --> 00:07:26,960
So, it can, for example, represent
trees or deep nesting.

00:07:26,960 --> 00:07:33,520
They can also be thought of as essentially
being infinite or it could be constructed

00:07:33,520 --> 00:07:37,440
in an infinite manner, similarly to
infinite lists in Haskell, for example.

00:07:37,440 --> 00:07:40,880
So, we will probably not really
have to deal with this in Prolog.

00:07:40,880 --> 00:07:44,880
But in principle, you could also see or imagine

00:07:44,880 --> 00:07:47,760
constructions like this, where
you have an infinite nesting.

00:07:47,760 --> 00:07:51,440
Of course, not for data processing,
but for others, maybe tree structures.

00:07:52,800 --> 00:07:55,600
Okay, an important point here to note
is that Prolog has no type system.

00:07:55,600 --> 00:07:59,200
So, even though I just said that these
are similar to data types in Haskell,

00:07:59,200 --> 00:08:00,640
they are not actually types, right?

00:08:00,640 --> 00:08:03,840
So, there's no discipline
requiring, for example, that

00:08:04,560 --> 00:08:11,840
after this date, you have to have
three numbers or something like that.

27 # slide
00:08:11,840 --> 00:08:13,600
So, what about these structures?

00:08:13,600 --> 00:08:16,320
So, let's just mention they represent objects

00:08:16,320 --> 00:08:20,960
made up of other objects, lists,
trees, subtrees, et cetera.

00:08:20,960 --> 00:08:24,240
We have already seen that in

00:08:24,240 --> 00:08:28,080
an example on the previous slide, so here is this
again, or maybe in a slightly different form.

00:08:28,080 --> 00:08:31,200
Where you also see this nesting.

00:08:31,200 --> 00:08:35,520
So, what you see is just the record where a
person has two arguments, which are constants.

00:08:35,520 --> 00:08:40,480
But for example, the birthdate could
be another nested data structure.

00:08:40,480 --> 00:08:47,040
So, then these things are the data constructors
and these are the atoms that are used

00:08:47,600 --> 00:08:53,360
or the constants that are used at the leaves and
this is a substructure of the whole structure.

00:08:53,360 --> 00:08:57,840
So, these data constructors for historical reasons
are not called data constructors in Prolog.

00:08:57,840 --> 00:09:01,360
So, they are called functors, which
is a bit of an unfortunate name

00:09:01,360 --> 00:09:04,880
because functor in functional
programming means something else.

00:09:04,880 --> 00:09:09,360
But well, in the Prolog literature in the
logical programming literature, these things will

00:09:09,360 --> 00:09:16,000
be called functors, which should be thought of
as something like functions, but well, just symbolic.

00:09:16,000 --> 00:09:22,400
Okay, so that's just what literature uses for this
and I will probably not refer to them as functor.

00:09:22,400 --> 00:09:26,000
But if you read other sources,
then that's what is meant

00:09:26,000 --> 00:09:27,760
when Prolog people talk about functors.

00:09:27,760 --> 00:09:30,480
They mean the things that are
called data constructors in Haskell.

00:09:32,080 --> 00:09:33,440
They have to be atoms, right?

00:09:33,440 --> 00:09:39,920
So, just like for the name, the same naming
or syntactical scheme is used for constants.

00:09:40,560 --> 00:09:43,680
Indeed, the same string the same identifier could

00:09:43,680 --> 00:09:49,840
be used both as a functor and as an
atom for a constant at the leaf place.

00:09:51,760 --> 00:09:56,880
Okay, so I already mentioned that there is no
type system for Prolog, but at least there are some

00:09:56,880 --> 00:10:00,800
for documentation purposes,
usually at least the arity of

00:10:01,520 --> 00:10:04,240
the functor or data constructors is noted down.

00:10:04,240 --> 00:10:08,320
So, if you see something like this:
person/3, then this means

00:10:08,320 --> 00:10:12,960
that person is a data constructor of this
for such use, and it has three arguments.

00:10:12,960 --> 00:10:18,960
There's no notation for what types
these arguments should be of.

00:10:18,960 --> 00:10:21,680
Whether there should be a number,
or other structures, et cetera.

00:10:21,680 --> 00:10:24,080
But at least the arity is expressed.

00:10:24,080 --> 00:10:28,080
And sometimes in the same program, you might
have the same constructor with different arities.

00:10:28,080 --> 00:10:31,280
And then it makes sense to
actually provide these different...

00:10:31,280 --> 00:10:35,440
that explicitly write out what the arity is, and
this is also done for predicates, actually.

00:10:35,440 --> 00:10:38,400
So, not only for the data constructors here.

00:10:38,400 --> 00:10:39,840
But also, when you see a predicate.

00:10:39,840 --> 00:10:44,480
And often documentation of a Prolog library,
for example, will use this notation to express

00:10:44,480 --> 00:10:48,320
how many arguments this predicate expects to take.

00:10:48,320 --> 00:10:49,840
Of course, there is no type signature

00:10:49,840 --> 00:10:52,960
like in Haskell, where you would also
see what the number of arguments is.

00:10:54,800 --> 00:10:58,080
Okay, so this gives us something
like algebraic data types, of course,

00:10:58,080 --> 00:10:59,840
but not actually in a type sense.

00:11:01,600 --> 00:11:03,760
So, something like this would
also be a legal structure.

00:11:04,880 --> 00:11:09,440
Without any specific meaning we
give a character or something else

00:11:09,440 --> 00:11:11,760
in place of the birthdate of the person, right?

00:11:11,760 --> 00:11:13,680
This is simply not prevented.

00:11:13,680 --> 00:11:17,120
Also, the numbers here are not prevented
even though we would expect names here,

00:11:17,840 --> 00:11:20,160
the Prolog system would not enforce this.

00:11:20,160 --> 00:11:22,560
It's something that would then be disciplined

00:11:22,560 --> 00:11:27,840
by the programmer to make sure that the
constructors are used in a reasonable way.

00:11:28,800 --> 00:11:32,240
Okay, and so I already mentioned,
this can be nested arbitrarily deep

00:11:32,240 --> 00:11:37,760
in principle infinite, even though there's
not that much support for programming within

00:11:37,760 --> 00:11:41,840
infinite structures in Prolog as there is in
Haskell as we have seen in some examples.

28 # slide
00:11:45,120 --> 00:11:48,240
Okay, then there is special
syntax for certain structures,

00:11:48,240 --> 00:11:53,520
I already mentioned that of course lists, which
are, in some sense, special trees could also be

00:11:53,520 --> 00:11:57,200
seen as data structures of the kind
from the previous slide, right?

00:11:57,200 --> 00:12:01,440
So, just as in Haskell, we introduced
or we discussed that lists can be seen

00:12:01,440 --> 00:12:04,640
as algebraic data structures with a nil
and cons constructor, you could also

00:12:04,640 --> 00:12:08,000
do the similar let's say like
encoding in Prolog, if these

00:12:08,000 --> 00:12:11,440
normal data structures, then use some
constructor like nil and another one cons.

00:12:12,080 --> 00:12:14,960
But actually, just as in Haskell,
there is also special syntax for

00:12:15,520 --> 00:12:20,640
lists in Prolog, you don't have to
model lists as specific structures.

00:12:20,640 --> 00:12:22,480
You can use a special syntax for them.

00:12:22,480 --> 00:12:27,200
So, in some sense, we have a predefined list
type, except that it's not a typed language.

00:12:28,000 --> 00:12:34,400
So, it is a recursive tree structure, the
syntax is as in Haskell on the surface, right?

00:12:34,400 --> 00:12:36,960
You can write it with these
square brackets and commas.

00:12:36,960 --> 00:12:40,640
And of course, the list does not have
to be homogeneous, so unlike in Haskell,

00:12:40,640 --> 00:12:45,200
you can write 1, 2, a, even though these
are different types: letters and numbers.

00:12:45,760 --> 00:12:49,840
And then there are certain alternative syntaxes.

00:12:49,840 --> 00:12:53,040
And there's one where you write
more explicitly the tree structure.

00:12:53,040 --> 00:12:55,680
So, this corresponds to the
Haskell notation with the

00:12:55,680 --> 00:13:01,120
colon as the internal node and then left and
right successor for the head and the tail.

00:13:02,000 --> 00:13:08,080
So, similar to what we saw there, but now
a single dot is used instead of the colon.

00:13:08,080 --> 00:13:10,160
And then there are other syntaxes.

00:13:10,160 --> 00:13:12,160
There are, for example,
here, with this vertical bar.

00:13:12,160 --> 00:13:14,960
This is not a list comprehension,
that doesn't exist in Prolog,

00:13:14,960 --> 00:13:19,840
what this means is we have a list of which
this is the head, and this is the tail.

00:13:20,560 --> 00:13:22,080
Or you can even say something like this.

00:13:22,080 --> 00:13:26,880
So, this corresponds a bit to pattern matching
in Haskell when you match against a prefix

00:13:26,880 --> 00:13:30,720
of a list, you can say something like this,
or this is the same list as this list,

00:13:30,720 --> 00:13:36,400
but expressed in a way of saying as a prefix
1 and 2, and then there's a rest list.

00:13:36,400 --> 00:13:40,240
So, this means we have 1 and 2, and then
we have a tail after the second element,

00:13:40,240 --> 00:13:42,240
and a tail is the list containing exactly the 'a'.

00:13:43,520 --> 00:13:47,440
Okay, and then of course, you would also
mix these notations, for example, this

00:13:47,440 --> 00:13:54,160
list of 'a' could in this style be written as
cons with head 'a' and tail the empty list.

00:13:54,160 --> 00:13:57,200
So, this is yet another way
to express the very same list.

00:13:58,480 --> 00:14:05,920
Okay, we will need to be aware of these different
syntaxes for lists when we define predicates.

00:14:05,920 --> 00:14:09,840
Because then we could use ways like
this or this for pattern matching.

00:14:12,160 --> 00:14:17,920
Okay, Strings also exist and they are as
in Haskell essentially lists of characters

00:14:17,920 --> 00:14:26,240
except that in Prolog or most Prolog systems at
least, the Strings are more directly expressed

00:14:26,240 --> 00:14:30,800
as actually not lists of characters, but of
lists of the ASCII code of the characters.

00:14:30,800 --> 00:14:36,480
So, actually, when you have a predicate that
answers some kind of String, your output is then often...

00:14:36,480 --> 00:14:41,760
Prolog will unfortunately, instead of giving you
a nice String representation, actually give you

00:14:41,760 --> 00:14:45,840
a list like this, which you have then
to know the ASCII codes of in order to

00:14:46,400 --> 00:14:48,480
be sure what this actually means, right?

00:14:48,480 --> 00:14:53,360
So, these are the ASCII codes have
character P and lowercase r, et cetera.

00:14:53,360 --> 00:14:57,120
So, for a good answer something like this,
when you actually want to see a string.

00:14:57,120 --> 00:15:02,240
For this reason, also the examples that we use in
the exercise will not really deal with Strings.

00:15:02,240 --> 00:15:08,080
Because then you will always have to bother with
this mapping from ASCII codes to characters.

00:15:08,080 --> 00:15:10,960
So, instead, we will, for example, work with

00:15:10,960 --> 00:15:13,280
numbers directly, so then we
don't run into this problem.

00:15:13,280 --> 00:15:14,240
But you should be aware of this.

00:15:14,240 --> 00:15:18,320
Because if you want to try String
processing, then you might at first

00:15:18,320 --> 00:15:21,360
be surprised that you will see these
numbers instead of actual characters.

00:15:22,640 --> 00:15:26,000
Okay, and there's also something I already
mentioned the operators, what you

00:15:26,000 --> 00:15:28,720
would use for arithmetic expressions, for example.

00:15:29,280 --> 00:15:35,360
So, they are also just structures made
from the atoms which could be symbols as well.

00:15:35,920 --> 00:15:44,240
And then the substructures and leaves and specific
functors, atoms, namely ones that are symbolic.

00:15:44,240 --> 00:15:45,840
Can be written infix and then you get

00:15:46,960 --> 00:15:50,240
something corresponding to syntax
trees of arithmetic expressions.

00:15:51,440 --> 00:15:55,920
Okay, so this would actually
correspond to this structure.

00:15:56,560 --> 00:16:04,240
Where explicitly the + and * are
used as constructors in the same way as

00:16:04,240 --> 00:16:07,840
other data constructors are used in
the other structures we have seen.

00:16:07,840 --> 00:16:10,000
Okay, an important thing here
is as I already mentioned

00:16:10,880 --> 00:16:14,800
that something like this is
considered purely symbolically, right?

00:16:14,800 --> 00:16:19,120
So, this is really, if you write something
like this is not evaluated to 13.

00:16:19,120 --> 00:16:24,720
It is actually really just considered as this
syntax tree, as this recursive structure,

00:16:24,720 --> 00:16:28,640
where you actually see all the operators
and not the results of the evaluation.

00:16:28,640 --> 00:16:32,560
That's an important difference because in
Prolog, there is no evaluation going on, right?

00:16:32,560 --> 00:16:35,600
Everything works by solving constraints.

00:16:35,600 --> 00:16:39,040
There are certain constructs that allow you
to do mathematics to really compute things,

00:16:39,040 --> 00:16:41,200
but not if you simply write
down a structure like this.

00:16:41,200 --> 00:16:46,720
Yes, you need special operators to
actually perform mathematical operations.

00:16:46,720 --> 00:16:50,960
And you will see this when
we encounter it in an example.

29 # slide
00:16:54,560 --> 00:17:01,360
Okay, and the last slide for this week, I
think just another notion: Terms.

00:17:01,360 --> 00:17:06,320
So, I've already used expressions in Prolog,
in Haskell, and sometimes I've also said "terms",

00:17:06,320 --> 00:17:08,480
In Prolog, they are really called "terms".

00:17:08,480 --> 00:17:10,480
Because they don't express computation.

00:17:10,480 --> 00:17:12,400
So, there's no evaluation going on.

00:17:12,400 --> 00:17:15,760
And basically, terms are all the
things that we have seen so far, right?

00:17:15,760 --> 00:17:21,760
Constants, be they name constants or be they numbers,
variables are terms and structures are terms.

00:17:21,760 --> 00:17:27,520
Be they explicitly written down
structures with these data constructors,

00:17:27,520 --> 00:17:30,720
mixing constants, and variables and functors,

00:17:30,720 --> 00:17:35,440
atoms, or also these special structures that
come from the list representation, right?

00:17:35,440 --> 00:17:39,600
These are also terms because they can
be written in this tree syntax as well.

00:17:39,600 --> 00:17:43,520
Okay, so this would be terms and then
there's one more notion

00:17:43,520 --> 00:17:49,440
named "ground term" that is used in
some semantics considerations.

00:17:50,000 --> 00:17:53,600
And a ground term is simply a
term that doesn't contain variables.

00:17:53,600 --> 00:17:54,800
That's also probably something that you

00:17:54,800 --> 00:17:57,280
have already encountered as a
notion in the Logik lecture.

00:17:58,400 --> 00:18:01,520
Ground model or ground terms.

00:18:01,520 --> 00:18:01,760
Okay.

00:18:01,760 --> 00:18:05,760
So, anything of that form, except
that no variables may appear.

00:18:05,760 --> 00:18:07,520
So, this would of course not be a ground term.

00:18:07,520 --> 00:18:10,480
And these last ones would also not be
ground terms because they contain variables,

00:18:10,480 --> 00:18:12,400
but this would be a ground term, right?

00:18:12,400 --> 00:18:15,120
These will be terms but not ground
terms, this will be a ground term,

00:18:15,120 --> 00:18:22,720
because it's built without any use of variables.
