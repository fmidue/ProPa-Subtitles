
0:00:02.639,0:00:09.850
Für dieses Video möchte ich
CodeWorld demonstrieren.

0:00:09.850,0:00:17.880
Und gleichzeitig probiere ich mein Setup aus,
für die Videoaufzeichnung einer Live-Programmierung.

0:00:17.880,0:00:23.099
Und dann ist das hier ein erster Einblick in die
Welt der funktionalen Programmierung in CodeWorld.

0:00:23.099,0:00:24.650
Okay, also was ist CodeWorld?

0:00:24.650,0:00:27.769
CodeWorld ist die Website, die Sie hier sehen.

0:00:27.769,0:00:29.980
Und sie wird von Haskell betrieben.

0:00:29.980,0:00:36.530
Im Grunde genommen können wir also in diesem Bereich hier
kleine Haskell-Programme schreiben, die eine bestimmte

0:00:36.530,0:00:39.430
Bibliothek von Grafikprimitiven verwenden.

0:00:39.430,0:00:46.109
Und was wir dann erhalten, wenn wir dieses Programm ausführen,
ist das beschriebene Bild oder die Animation.

0:00:46.109,0:00:50.610
Und die Haskell-Beispiele in den ersten paar Wochen
werden hauptsächlich auf CodeWorld basieren.

0:00:50.610,0:00:57.219
Theoretisch könnten Sie also die ersten Übungen
auf dieser Website ohne eine lokale Haskell-Implementierung machen,

0:00:57.219,0:01:04.519
aber früher oder später sollten Sie auch
einen Compiler installieren, natürlich lokal.

0:01:04.519,0:01:10.689
Okay, wichtig ist also, dass Sie wirklich
den Link für "CodeWorld Haskell" verwenden, der

0:01:10.689,0:01:12.240
im Moodle-Kurs zur Verfügung gestellt wird.

0:01:12.240,0:01:17.520
Es gibt auch eine andere Version von CodeWorld,
die für die Programmierung durch Kinder gedacht ist, also

0:01:17.520,0:01:20.939
enthält sie nicht die eigentliche Sprache Haskell.

0:01:20.939,0:01:26.540
Okay, nun, das erste Beispiel. Es geht eigentlich
nicht so sehr um funktionale Programmierung,

0:01:26.540,0:01:30.020
sondern hauptsächlich um ausdrucks- und wertbasierte Programmierung.

0:01:30.020,0:01:31.820
Also schauen wir uns das mal an.

0:01:31.820,0:01:38.649
Was wir hier haben, ist ein kleiner Programmtext,
der eine Szene beschreibt, die offensichtlich aus

0:01:38.649,0:01:41.570
einem Kreis mit einem bestimmten Radius besteht.

0:01:41.570,0:01:45.840
Und dann haben wir noch einen komplexeren Ausdruck,
der aus mehreren Teilen zusammengesetzt ist.

0:01:45.840,0:01:53.659
Es scheint also ein Polygon zu geben, das drei
Zahlenpaare hat, oder wahrscheinlich sind es drei Punkte.

0:01:53.659,0:01:59.590
Das wäre also ein Dreieck, und es bekommt
eine Farbe "red", und die "translation" ist hier nicht gemeint

0:01:59.590,0:02:04.930
im Sinne des Übersetzens einer Sprache,
sondern eigentlich im Sinne von Bewegung.

0:02:04.930,0:02:09.041
Okay, das ist also ein kleines Haskell-Programm. Es
war wirklich ein kleines komplettes Haskell-Programm,

0:02:09.041,0:02:10.041
das diese Bibliothek benutzt.

0:02:10.041,0:02:13.470
Und was wir hier tun können, ist auf Run zu klicken,
und was bekommen wir dann?

0:02:13.470,0:02:19.970
Nun, wir erhalten ein Bild eines Kreises und eines
roten Dreiecks, das etwas aus dem Zentrum

0:02:19.970,0:02:25.040
nach außen verschoben ist. Also, der Kreis hat irgendwie
einen Mittelpunkt hier, den Ursprung des Koordinatensystems,

0:02:25.040,0:02:32.620
und das Dreieck wurde offenbar um 3,
oder drei Einheiten, nach rechts verschoben.

0:02:32.620,0:02:33.620
Okay.

0:02:33.620,0:02:35.060
Deshalb haben wir dieses Bild hier.

0:02:35.060,0:02:40.180
Eine unmittelbare Frage, die manchmal aufkommt
zu so einem Beispiel, wenn ich das gezeigt habe,

0:02:40.180,0:02:46.450
ist: Warum ist das Dreieck genau hier und
nicht irgendwie zuerst am Ursprung des Koordinatensystems

0:02:46.450,0:02:51.650
und dann verschoben? Weil wir ja schließlich
so etwas sagen wie: Das ist das rote Dreieck, und

0:02:51.650,0:02:54.550
dann wird es an einen anderen Ort verschoben.

0:02:54.550,0:03:00.080
Man könnte also naiv erwarten, dass wir zuerst
ein Dreieck hier haben, und dann wird es nach rechts verschoben.

0:03:00.080,0:03:01.700
Aber das ist nicht das, was tatsächlich passiert.

0:03:01.700,0:03:07.050
Und der Grund dafür ist, dass es sich nicht um eine Abfolge
von Berechnungsschritten handelt, die hier beschrieben wird.

0:03:07.050,0:03:08.519
Es ist wirklich nur ein Ausdruck.

0:03:08.519,0:03:12.269
Also, ein Wert, der berechnet werden soll.

0:03:12.269,0:03:16.900
Und in diesem Fall ist der Wert, der berechnet werden soll,
dieses Bild eines Kreises

0:03:16.900,0:03:19.000
und nach rechts verschobene rote Dreiecke.

0:03:19.000,0:03:26.269
Okay, und wir können sogar diese Schaltfläche hier benutzen,
um dies genauer zu untersuchen. Was bekommen wir

0:03:26.269,0:03:30.040
dann hier? Das ist auch nützlich für Ihre eigenen
Beispiele später, wahrscheinlich.

0:03:30.040,0:03:37.790
Im Grunde erhalten wir eine Baumansicht des Ausdrucks,
den wir erstellt haben. Wir können das also hier öffnen.

0:03:37.790,0:03:43.489
Und wie Sie sehen, wenn ich mit der Maus
über Teile des Baums fahre, dann sehe ich auf

0:03:43.489,0:03:45.560
der linken Seite den Ausdruck.

0:03:45.560,0:03:49.920
Also, wenn ich zum Beispiel hier bin, dann sehe ich nur den Kreis.

0:03:49.920,0:03:55.140
Oder wenn ich hierher gehe, dann sehe ich das farbige rote
Dreieck.

0:03:55.140,0:03:59.470
Und eigentlich kann ich das auch
im Bild selbst sichtbar machen.

0:03:59.470,0:04:03.780
Also, wenn ich auf den Kreis klicke, dann sehe ich nur
den Kreis.

0:04:03.780,0:04:11.269
Wenn ich auf das Polygon klicke, dann würde ich tatsächlich
das Polygon in Schwarz am Ursprung des Koordinatensystems sehen.

0:04:11.269,0:04:17.940
Wenn ich auf den Teilbaum klicke, der das farbige Dreieck ist,
dann sehe ich das gleiche Dreieck, aber

0:04:17.940,0:04:24.570
in rot, und wenn ich dann auf den Unterausdruck klicke,
der diesen "translated" Aufruf hat, dann bekomme ich

0:04:24.570,0:04:32.840
das nach-rechts-verschobene rote Dreieck, das genau dem entspricht,
was hier im Programmcode hervorgehoben ist.



0:04:32.840,0:04:42.270
So entsprechen also die Unterausdrücke den
einzelnen Bildern, die auf der obersten Ebene.

0:04:42.270,0:04:46.130
zu einer Gesamtszene kombiniert werden.

0:04:46.130,0:04:55.000
Okay, und natürlich lernen wir weitere Möglichkeiten,
um Ausdrücke zu kombinieren.

0:04:55.000,0:05:01.540
Das ist also nur ein erster Einblick in dieses Programm
und diese Website.

0:05:01.540,0:05:05.940
Also, was ich jetzt tun möchte, ist, das Ganze
etwas komplizierter zu machen, Schritt für Schritt.

0:05:05.940,0:05:10.571
Und die Idee ist natürlich nicht, dass Sie
das Programm vollständig verstehen sollten. Das

0:05:10.571,0:05:15.880
ich hier schreibe. Die Idee ist wirklich nur,
einen Eindruck davon zu bekommen, was ich mache und

0:05:15.880,0:05:19.730
wie ein Haskell-Programm aussehen könnte. Und alles

0:05:19.730,0:05:25.620
die syntaktischen Details, die ich jetzt einfach
benutze, werden natürlich später erklärt.

0:05:25.620,0:05:27.470
und ausführlicher vorgestellt.

0:05:27.470,0:05:34.700
Okay, was könnten wir also tun? Ich werde ein wenig schummeln.
Ich werde einfach Material von einem anderen

0:05:34.700,0:05:38.240
Editor nehmen, wo ich schon einmal herumgespielt habe.

0:05:38.240,0:05:43.850
Eine Sache, die wir zum Beispiel machen könnten, ist,
tatsächlich ein paar mehr Formen einzuführen.

0:05:43.850,0:05:50.920
Also, sagen wir, ich möchte zum Beispiel auch
ein ausgefülltes Rechteck mit bestimmten Abmessungen sehen.

0:05:50.920,0:05:55.710
Es wird ein Quadrat sein, weil es diese
zwei gleichen Werte hier hat.

0:05:55.710,0:06:01.130
Und ich färbe es grün und füge es in die
Sequenz als ein weiteres Bild ein, das

0:06:01.130,0:06:02.240
ich mit anderem kombinieren möchte.

0:06:02.240,0:06:07.220
Okay, was passiert, wenn ich das ausführe?

0:06:07.220,0:06:08.730
Ich bekomme dieses Bild.

0:06:08.730,0:06:14.850
Wir sehen zum Beispiel, wenn sich Dinge überschneiden,
was hier der Fall ist (richtig, wir haben den

0:06:14.850,0:06:20.970
Kreis am Ursprung und auch dieses solide
Rechteck). Dann hat die Sache, die ich

0:06:20.970,0:06:22.790
zuerst erwähnt habe, Vorrang.

0:06:22.790,0:06:32.730
Wenn ich also zum Beispiel das verschieben würde
hier, dann sollte der Kreis hinter dem Rechteck verschwinden.

0:06:32.730,0:06:44.060
Okay, vielleicht will ich es andersherum haben, und
vielleicht möchte ich auch die Größen ein wenig ändern,

0:06:44.060,0:06:48.420
damit ich nicht solche Überschneidungen bekomme.

0:06:48.420,0:06:52.250
Also, sagen wir mal, ich mache den Kreis viel größer.

0:06:52.250,0:06:58.620
Und lassen Sie mich auch das Dreieck auf den Umfang
des neuen Kreises verschieben.

0:06:58.620,0:07:01.340
Was erhalte ich dann?

0:07:01.340,0:07:04.140
Nun, ein Bild, das so aussieht.

0:07:04.140,0:07:11.190
Also haben wir jetzt verschiedene Formen, wir haben
Farben, wir haben Translation, um etwas zu bewegen.

0:07:11.190,0:07:12.360
Und was könnten wir noch machen?

0:07:12.360,0:07:17.660
Wir könnten zum Beispiel sagen, eine andere Transformation,
die bei Formen sinnvoll ist, ist die Rotation.

0:07:17.660,0:07:27.360
Sagen wir also, wir wollen dieses Dreieck haben,
hier oben gedreht, dann gibt es auch eine

0:07:27.360,0:07:29.970
Bibliotheksfunktion dafür.

0:07:29.970,0:07:32.280
Sie heißt „rotated“.

0:07:32.280,0:07:34.910
Ich kann sagen, ich will rotieren. Was will ich
rotieren?

0:07:34.910,0:07:37.230
Nun, ich muss hier ein paar Klammern hinzufügen.

0:07:37.230,0:07:41.620
Das ist der Grund, warum diese rote Markierung erschienen ist.

0:07:41.620,0:07:46.910
Ich muss also das, was ich
rotieren will, in Klammern setzen.

0:07:46.910,0:07:50.670
Dann gibt es hier immer noch einen Fehler.

0:07:50.670,0:07:58.950
Ich denke, ich habe das durch meine zusätzliche
Klammer verursacht.

0:07:58.950,0:08:01.820
Vielleicht habe ich das nicht.

0:08:01.820,0:08:04.040
Jetzt habe ich es, aber es scheint ein anderes
Problem zu geben.

0:08:04.040,0:08:05.530
Warum ist das so?

0:08:05.530,0:08:13.840
Also, das ist jetzt ein Typfehler, der vielleicht
nicht sofort ersichtlich ist.

0:08:13.840,0:08:16.210
Aber ich weiß, was das Problem ist.

0:08:16.210,0:08:22.990
Ich sollte nämlich auch sagen, um welchen Betrag ich
mein Dreieck drehen will.

0:08:22.990,0:08:30.020
Und das soll ein Winkel sein, natürlich.
Und in CodeWorld, wie auch in Haskell, werden Winkel in Bogenmaß angegeben.

0:08:30.020,0:08:36.240
Ich muss also sagen, halb Pi, zum Beispiel, wenn
ich ein Gradmaß von 90 haben will.

0:08:36.240,0:08:39.430
Dann machen wir das.

0:08:39.430,0:08:40.800
Und der Fehler ist verschwunden.

0:08:40.800,0:08:45.860
Okay, es besteht also Hoffnung, dass, wenn ich das jetzt kompiliere,
ich etwas Brauchbares erhalte.

0:08:45.860,0:08:52.640
Okay, jetzt habe ich also mein Dreieck hier oben, weil
es gedreht wurde.

0:08:52.640,0:08:53.640
Ja.

0:08:53.640,0:08:55.110
Jetzt ist das alles sehr statisch.

0:08:55.110,0:09:00.060
Also, ich habe vorhin erwähnt, dass wir vielleicht auch
Animationen machen wollen.

0:09:00.060,0:09:03.240
Also, was bedeutet es, eine Animation zu sein?

0:09:03.240,0:09:05.470
Nun, eine Animation hängt von der Zeit ab.

0:09:05.470,0:09:07.990
Was könnte das hier bedeuten?

0:09:07.990,0:09:11.590
Wir haben nicht einfach eine Zeichnung, wir
müssen eine Animation haben.

0:09:11.590,0:09:16.580
Okay, das ist etwas, das ich auswendig weiß,
dass ich diese andere Funktion brauche.

0:09:16.580,0:09:18.380
Dann gibt es wieder einen Typfehler.

0:09:18.380,0:09:19.380
Warum ist das so?

0:09:19.380,0:09:21.070
Nun, was steht hier?

0:09:21.070,0:09:22.860
Ich habe etwas vom Typ Picture.

0:09:22.860,0:09:28.430
Aber um eine Animation zu sein, müsste ich eigentlich
etwas vom Typ „Double zu Picture“ haben.

0:09:28.430,0:09:29.430
Warum ist das so?

0:09:29.430,0:09:33.310
Weil eine „Animation“ im Wesentlichen eine Funktion
von „Zeit“ zu „Bild“ ist.



0:09:33.310,0:09:38.710
Okay, und ich kann das erreichen, indem ich
einen Parameter dieser Szene hier einführe.

0:09:38.710,0:09:43.100
Ich kann sagen, nun, es gibt einen Zeitparameter,
t.

0:09:43.100,0:09:48.130
Dann kann ich das wieder laufen lassen.

0:09:48.130,0:09:51.400
Es wird funktionieren, aber es wird nichts anderes tun
als vorher.

0:09:51.400,0:09:52.820
Warum ist das so?

0:09:52.820,0:09:57.070
Im Grunde genommen, weil ich den Zeitparameter t nicht benutzt habe.

0:09:57.070,0:09:58.070
Wie könnte ich ihn verwenden?

0:09:58.070,0:10:04.890
Nun, ich möchte, dass sich dieses Dreieck bewegt,
also vielleicht sollte ich den Winkel, um den

0:10:04.890,0:10:07.200
ich das Dreieck drehe, von der Zeit abhängig machen.

0:10:07.200,0:10:14.050
Anstelle von pi/2 könnte ich also so etwas sagen wie:
t, das in Sekunden gemessen wird,

0:10:14.050,0:10:16.340
mal die Hälfte von pi.

0:10:16.340,0:10:23.500
Das würde bedeuten, dass ich nach einer Sekunde
dort wäre, wo ich jetzt in diesem Beispiel bin.

0:10:23.500,0:10:26.570
Und wenn t zunimmt, wird sich das ändern.

0:10:26.570,0:10:29.580
Okay, lassen Sie mich das noch einmal ausführen.

0:10:29.580,0:10:33.680
Okay, das ging jetzt ziemlich schnell.

0:10:33.680,0:10:39.560
Also, wenn ich das ändern möchte, könnte ich
natürlich einfach ein paar Parameter hier ändern.

0:10:39.560,0:10:45.640
Ich könnte zum Beispiel sagen, es soll
in einer Sekunde nur um ein Viertel von pi rotieren,

0:10:45.640,0:10:48.070
also um 45 Grad.

0:10:48.070,0:10:55.340
Und wenn ich das nochmal mache, dann bekomme ich eine
langsamere Animation.

0:10:55.340,0:10:59.850
Okay, das ist also etwas, was ich machen kann.

0:10:59.850,0:11:08.170
Jetzt gibt es eine Verzögerung, wahrscheinlich, weil meine
Videoaufnahme die Berechnung der Bilder stört.

0:11:08.170,0:11:10.620
Okay, das ist immer noch etwas langweilig.

0:11:10.620,0:11:12.320
Was könnte ich sonst noch machen?

0:11:12.320,0:11:19.180
Lassen Sie mich wieder etwas schummeln, indem ich etwas kopiere,

0:11:19.180,0:11:28.150
und dann nur ganz kurz erkläre, was da
passiert.

0:11:28.150,0:11:36.240
Lassen Sie mich dies hinzufügen und lassen Sie mich tatsächlich
das Dreieck wieder in ein statisches Dreieck verwandeln,

0:11:36.240,0:11:37.860
das sich nicht bewegt. Warum?

0:11:37.860,0:11:41.320
Weil ich sowieso den t-Parameter verwenden werde,
hier unten.

0:11:41.320,0:11:45.210
Also, ich werde immer noch etwas Dynamisches haben.

0:11:45.210,0:11:56.190
Okay, lassen Sie mich zuerst vielleicht diesen "rotated"
Aufruf entfernen, indem ich ihn einfach auskommentiere.

0:11:56.190,0:11:59.500
Und dann werde ich erst einmal erklären, was das bedeutet.

0:11:59.500,0:12:03.070
Und dann können wir über die Rotation nachdenken.

0:12:03.070,0:12:06.710
Okay, was würden wir bekommen, wenn es so wäre?

0:12:06.710,0:12:10.510
Okay, das ist also etwas Interessantes.

0:12:10.510,0:12:11.510
Was ist hier passiert?

0:12:11.510,0:12:17.860
Anscheinend habe ich jetzt viele Quadrate
beziehungsweise Rechtecke gezeichnet, richtig? Ich habe etwas Ähnliches gemacht

0:12:17.860,0:12:21.770
wie das solidRectangle hier oben, aber ich habe
das "solid" weggelassen.

0:12:21.770,0:12:25.380
Ich zeichne also einfach ein Rechteck.

0:12:25.380,0:12:32.040
Und dann die Parameter hier, die sind nicht
einfach 4 und 4, sondern etwas größer, 4 + a.

0:12:32.040,0:12:33.590
Woher kommt das "a"?

0:12:33.590,0:12:39.420
Nun, ich habe einfach ausgedrückt, dass das "a" aus
einer bestimmten Menge oder einer bestimmten Liste, nämlich der Liste

0:12:39.420,0:12:47.840
[0, 0.5, ..., 9] kommt. Die Bedeutung ist,
eigentlich durch diesen hervorgehobenen Ausdruck hier:

0:12:47.840,0:12:56.910
"a" wird aus jeder der Zahlen 0, 0.5,
1, 1.5, 2, usw., bis zu 8.5, und 9 gewählt.

0:12:56.910,0:13:05.740
Also etwa 18 bis 20 Werte für "a".
Und für jeden Wert eines solchen "a" wird dieses Rechteck gezeichnet.

0:13:05.740,0:13:12.790
In gewissem Sinne ist das ähnlich wie eine Schleife
oder eine "for"-Anweisung (for-Schleife) in Sprachen

0:13:12.790,0:13:14.590
wie C oder Python.

0:13:14.590,0:13:20.790
Okay, aber es ist nicht wirklich eine Schleife im eigentlichen
Sinne, weil es nicht darum geht, einen Schritt

0:13:20.790,0:13:29.170
nach dem anderen zu machen. Sondern es geht tatsächlich darum zu sagen,
ich will so viele Rechtecke haben, und diese variieren

0:13:29.170,0:13:30.600
je nach diesem Parameter.

0:13:30.600,0:13:36.620
Es ist also eher wie ein Mengenausdruck,
den man in der Mathematik verwendet: die Menge aller solcher

0:13:36.620,0:13:39.980
so-und-so, dass eine bestimmte Bedingung erfüllt ist.

0:13:39.980,0:13:40.980
Okay.

0:13:40.980,0:13:46.779
Also, in diesem Sinne, auf diese Weise, bekomme ich dieses
kompliziertere Bild.

0:13:46.779,0:13:52.060
Und wenn ich es noch komplizierter machen will,
kann ich sagen: Na ja, lass mich auch diese Quadrate drehen.

0:13:52.060,0:14:05.600
Ja, ich könnte etwas wie "rotated" hinzufügen,
und wieder etwas, das von t abhängt, wie vorher.

0:14:05.600,0:14:14.750
Sagen wir mal, ich drehe jedes Bild um etwas,
zum Beispiel so.

0:14:14.750,0:14:20.480
Dann würden sie sich alle mit der gleichen Geschwindigkeit
um den Ursprung drehen.

0:14:20.480,0:14:28.000
Okay, und dann war der Ausdruck, den
ich hier vorher hatte, sogar noch etwas ausgefallener.

0:14:28.000,0:14:37.180
Denn er kombinierte oder berechnete den Winkel,
um den jedes einzelne Quadrat

0:14:37.180,0:14:40.200
gedreht werden muss, und zwar sowohl mit a als auch mit t.

0:14:40.200,0:14:45.650
Also eigentlich wird nicht für alle Quadrate
der gleiche Winkel verwendet, sondern auch das "a"

0:14:45.650,0:14:53.770
wird einbezogen. Vielleicht ist es nicht einfach
sich vorzustellen, wie das aussehen wird. Aber wir

0:14:53.770,0:15:00.300
können es einfach ausprobieren und sehen, was passiert.

0:15:00.300,0:15:10.290
Okay, das ist vielleicht nicht das nützlichste Programm,
eine solche Animation. Aber zumindest gibt es Ihnen.


0:15:10.290,0:15:19.170
einen ersten Eindruck sowohl von dieser Webseite als auch
der Art und Weise, wie wir sie nutzen werden. Um.

0:15:19.170,0:15:21.430
Bilder und Animationen zu beschreiben, etc.

0:15:21.430,0:15:26.640
Und wir lernen dabei die Konstrukte von
Haskell kennen.

0:15:26.640,0:15:28.110
Okay.
