
0:00:01.680,0:00:02.180
Gut.

0:00:02.800,0:00:09.040
Ich wollte den Aspekt der Persistenz
Aspekt von algebraischen Datentypen und

0:00:09.680,0:00:13.680
eigentlich jedem Wert in Haskell
und die Arbeit mit ihnen.

0:00:14.800,0:00:16.320
Und ich werde das mit diesem 'Tree'-Beispiel tun.

0:00:16.320,0:00:18.240
Es ist wieder die Definition aus den Folien.

0:00:18.240,0:00:20.720
Was hinzugefügt wurde, ist diese Zeile hier.

0:00:20.720,0:00:24.080
Ich habe sie hinzugefügt und Sie werden sie auch
Sie werden das auch in den Übungsaufgaben sehen.

0:00:25.520,0:00:32.880
Denn wenn ich den Wert dieses Typs aus dem Befehl drucken oder anzeigen möchte,
den Wert dieses Typs über die Befehlszeile ausgeben oder anzeigen.

0:00:32.880,0:00:38.720
Ja, das kann man immer zu einer algebraischen
Datentyp-Definition hinzufügen und dann eine

0:00:39.600,0:00:40.720
Druckfunktion hinzufügen.

0:00:40.720,0:00:42.080
Okay, wie wir gleich sehen werden.

0:00:42.720,0:00:43.040
Okay.

0:00:43.040,0:00:47.520
Und abgesehen davon haben wir hier die
normale Definition, die Sie schon gesehen haben.

0:00:48.560,0:00:57.840
Okay, lassen Sie mich das in den Interpreter laden.

0:00:57.840,0:01:08.800
Okay, was kann ich dann tun? Nun,
ich kann zum Beispiel einige Bäume einfügen.

0:01:08.800,0:01:12.960
Sagen wir also, ich beginne
mit einem bestimmten Baum, einem einfachen Baum.

0:01:19.360,0:01:20.880
Und mit dem Wert 10.

0:01:23.280,0:01:27.600
Und das soll ein Integer-Baum sein.

0:01:28.720,0:01:33.760
Sodass ich ihn dann für das Einfügebeispiel verwenden kann.

0:01:34.320,0:01:38.400
Okay, also 't1', das ist jetzt mein Baum.

0:01:38.400,0:01:42.720
Okay, und was kann ich dann tun, zum Beispiel:
Ich kann die Funktion 'insert' der Reihe nach aufrufen.

0:01:42.720,0:01:46.160
Und das lässt mich das
Ergebnis an einen anderen Baum binden.

0:01:46.160,0:01:50.960
Und sagen wir mal, ich möchte 5 in 't1' einfügen.

0:01:52.240,0:01:57.120
Okay, dann sieht mein 't2' jetzt so
aus, es ist ein 'Node'.

0:01:57.120,0:02:01.600
Und das erste Argument ist ein
'Node', der die 5 hat.

0:02:01.600,0:02:02.880
Die ich gerade eingefügt habe.

0:02:02.880,0:02:04.160
An der Wurzel haben wir immer noch die 10.

0:02:04.160,0:02:07.760
Und der rechte Teilbaum ist immer noch ein 'Leaf'.

0:02:07.760,0:02:09.680
Und ich könnte zum Beispiel noch weitere Dinge tun.

0:02:09.680,0:02:18.560
Ich könnte sagen: Nun, hier möchte ich eigentlich
12 einfügen und dann ist mein 't3' ungefähr so.

0:02:18.560,0:02:20.800
Und ich kann das immer weiter machen.

0:02:20.800,0:02:21.520
So.

0:02:21.520,0:02:27.200
Also, die Sache ist, dass ich darauf hinweisen möchte, dass
't1' und 't2' völlig unbeeinflusst sind von

0:02:27.200,0:02:31.840
diesen Operationen, die ich durchgeführt habe, um
größere Bäume zu erhalten, richtig?

0:02:31.840,0:02:38.000
Es ist also nicht so, dass das Einfügen von 12 in
't2' bedeutet, dass 't2' jetzt die 12 enthält.

0:02:38.000,0:02:38.320
Nein,

0:02:38.320,0:02:41.840
't2' ist immer noch der Baum, der er schon immer war.

0:02:41.840,0:02:44.880
Es ist genauso, wie wenn Zahlen und
Gleichungen zwischen Zahlen, richtig?

0:02:45.440,0:02:52.800
Wenn ich das tue, wenn ich sage, x ist 5 und y ist x + 3,
dann wird aus x natürlich nicht acht.

0:02:52.800,0:02:53.920
Das y wird zu acht.

0:02:53.920,0:02:54.720
Das Gleiche passiert hier.

0:02:54.720,0:03:00.400
Und es ist anders in vielen Modellierungs- oder
Relationsansätzen in imperativen Sprachen

0:03:00.400,0:03:03.360
für Baumstrukturen im Besonderen,
wo man Zeigerbäume haben kann.

0:03:03.360,0:03:07.120
Und dann bedeutet eine Einfügung,
etwas an der Stelle zu ändern.

0:03:08.240,0:03:11.920
Okay, denn so etwas, wie wir hier sehen, könnte man

0:03:11.920,0:03:16.240
in imperativen Sprachen erreicht werden
mit Klonen oder defensivem Kopieren.

0:03:16.240,0:03:18.880
Vielleicht haben Sie schon von diesen Begriffen gehört,
aber das ist hier nicht nötig.

0:03:18.880,0:03:23.280
Denn standardmäßig und immer ist das Sprachkonzept
Konzept, dass die Dinge unveränderlich sind.

0:03:24.000,0:03:27.280
Ich habe auch erwähnt, dass Sie sich darüber keine allzu großen Sorgen machen müssen.

0:03:27.280,0:03:35.200
Es ist also nicht so, dass diese drei Bäume, die ich
jetzt habe, vollständige Kopien im Speicher sind.

0:03:35.200,0:03:36.080
Das ist nicht der Fall.

0:03:36.080,0:03:40.000
Zum Beispiel werden sich 't2' und 't3' diesen Teil teilen.

0:03:40.720,0:03:45.920
Also, 't2' ist mathematisch gesehen dieser ganze Baum
und 't3' ist dieser ganze Baum.

0:03:45.920,0:03:51.200
Aber wenn wir in das Laufzeitsystem schauen würden,
um zu sehen, wie es im Speicher dargestellt wird,

0:03:51.200,0:03:57.200
dann wird dieser Teil, der zwischen 't2' und 't3' gemeinsam ist,
nur einmal im Speicher gespeichert, richtig?

0:03:57.200,0:04:01.520
Das ist also unsere Zeigerstruktur
und diese wird von einem Zeiger geteilt.

0:04:01.520,0:04:05.600
Aber das ist nicht etwas, das
der Sprachebene sichtbar ist.

0:04:05.600,0:04:08.240
Ja, das ist ein Implementierungsdetail
für Optimierungszwecke.

0:04:08.240,0:04:12.880
Es hat mit der Tatsache zu tun, dass in dieser
Einfügefunktion, und manchmal berühre ich nicht

0:04:13.440,0:04:18.240
einige Teilbäume nicht berühre, und dann können sie natürlich
erhalten bleiben und einfach über Zeiger wiederverwendet werden.

0:04:18.240,0:04:22.800
Und ich ändere die Struktur nur
entlang des Pfades der eingefügten

0:04:23.360,0:04:27.760
Werte selbst, oder auf dem Weg zu der
Stelle, wo ich den Wert einfügen muss.

0:04:27.760,0:04:28.880
Aber die Dinge werden gemeinsam genutzt.

0:04:28.880,0:04:31.120
Das wird also nicht doppelt dargestellt.

0:04:31.680,0:04:34.880
Aber mathematisch gesehen sind 't2' und 't3' getrennte Bäume.

0:04:34.880,0:04:37.840
Also, was auch immer, wenn ich etwas tue.

0:04:37.840,0:04:44.560
Sagen wir also, 't3', wie ich gerade erwähnt
habe, diesen Teil mit 't2' teilt.


0:04:44.560,0:04:50.800
Aber das bedeutet natürlich nicht, dass, wenn ich
etwas mit 't2' mache, sagen wir, ich rufe 'insert' auf.

0:04:51.360,0:04:55.600
Und ich möchte 3 in 't2' einfügen.

0:04:55.600,0:04:57.120
Was würde das bedeuten?

0:04:57.120,0:04:59.280
Es würde diesen neuen Baum erstellen, richtig?

0:04:59.280,0:05:04.560
Wir sind also jetzt in diesem Teil, der
vorher dieser linke Nachfolger von 't2' war.

0:05:04.560,0:05:07.200
Dieser wird nun zu diesem, weil
die 3 hinzugefügt wurde.

0:05:07.200,0:05:11.840
Aber natürlich hat das keine Auswirkungen auf
't3', und es sollte auch keine Auswirkungen auf 't3' haben.

0:05:11.840,0:05:15.680
Auch wenn 't2' und 't3' diesen Teil gemeinsam haben.

0:05:15.680,0:05:19.680
Die Tatsache, dass ich etwas mit 't2' oder 't3' gemacht
habe, ändert daran nichts.

0:05:19.680,0:05:25.040
Also, 't3' ist natürlich der Baum von nur der 5.

0:05:25.600,0:05:29.840
Ja, was hier passiert, ist also vernünftig
in Bezug auf die mathematische Interpretation.

0:05:29.840,0:05:34.160
Von Ausdrücken und so weiter, der
Implementierung, Optimierungen.

0:05:34.160,0:05:36.560
Aber sie haben keinen Einfluss auf die Bedeutung der Programme.

0:05:36.560,0:05:38.880
Was wir hier sehen, ist also Persistenz.

0:05:38.880,0:05:46.080
Wenn man also etwas tut, indem man einen neuen Baum als
einen Funktionsaufruf eine neue Struktur erzeugt.

0:05:46.080,0:05:51.840
Aber das alte Ding wird nicht überschrieben,
oder verändert oder in irgendeiner Weise beeinflusst.

0:05:52.400,0:05:55.520
Okay, und natürlich gilt das Gleiche
auch für andere Datenstrukturen.

0:05:55.520,0:05:57.520
Auch für Listen.

0:05:57.520,0:06:03.440
Ja, wenn wir also etwas in die
Liste einfügen, haben wir nicht in diese Liste eingefügt.

0:06:03.440,0:06:06.720
Wir haben eine neue Liste erstellt, die
vielleicht eine gemeinsame Struktur

0:06:06.720,0:06:08.800
mit der ursprünglichen Liste teilte, aber
ein anderes Element enthielt.

0:06:09.360,0:06:14.080
Oder wenn wir die Liste sogar geteilt haben, bedeutet das
nicht, dass wir die ursprüngliche Liste wirklich geteilt haben.

0:06:14.080,0:06:19.120
Es bedeutet, dass wir zwei neue Listen erstellt haben, die jeweils
von denen jede die Hälfte der ursprünglichen Liste enthält.

0:06:19.120,0:06:22.560
Oder wenn wir die Liste umkehren,
bedeutet das nicht, dass wir wirklich

0:06:23.280,0:06:25.360
dass wir die Reihenfolge der Elemente in der Liste geändert haben.

0:06:25.360,0:06:27.360
Es bedeutet, dass wir eine neue Liste erstellen.

0:06:27.360,0:06:28.880
Diese hat die umgekehrte Reihenfolge.

0:06:30.800,0:06:34.000
Wie das effizient gemacht wird, oder wie man das

0:06:34.000,0:06:37.920
effizient im Speicher dargestellt werden kann,
ist nicht unser Anliegen als Programmierer.

0:06:37.920,0:06:41.120
Ich meine, wenn Sie reifer werden
und fortgeschrittener Programmierer werden, wird man vielleicht

0:06:41.120,0:06:43.840
über solche Details nachdenken wollen.

0:06:43.840,0:06:48.640
Aber im Moment denken wir über
Ausdruckskraft und darüber, was Programme bedeuten.

0:06:49.280,0:06:54.400
Und dann müssen wir uns nicht um
diese Details beschäftigen.

0:06:54.400,0:06:58.000
Wir denken also über die Werte nach, über die
Ausdrücke und die Werte, die sie haben.

0:06:58.640,0:07:02.720
Und das Wichtigste ist, dass
die Dinge unveränderlich sind, oder wie man es

0:07:02.720,0:07:04.720
in der Algorithmik nennt, sie sind persistent.

0:07:04.720,0:07:07.280
Wie Sie hier sehen können, wenn Sie wollen, et cetera.

0:07:07.280,0:07:11.520
Und 't2' und 't3' teilen sich eine Struktur,
aber wenn ich etwas in 't2' einfüge, was

0:07:11.520,0:07:14.480
im Grunde nur bedeutet, dass ich einen
neuen Baum, der hier ausgegeben wurde,

0:07:14.480,0:07:21.200
und das ändert weder 't2' selbst noch
't3', das eine Struktur mit 't2' teilt.

0:07:22.880,0:07:29.840
Okay, anders als oft in objektorientierten Sprachen.
