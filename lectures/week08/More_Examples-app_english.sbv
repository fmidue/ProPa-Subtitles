0:00:01.200,0:00:04.800
Okay, let us consider a few more examples.

0:00:04.800,0:00:08.960
And I will start with this addition
function that I defined in the slides on

0:00:09.920,0:00:14.080
the natural numbers, as defined
there, as a recursive data type.

0:00:14.080,0:00:16.960
And the one thing I want to briefly show here is

0:00:18.240,0:00:22.880
just an example of how computation works now
with this function on the natural numbers.

0:00:22.880,0:00:27.280
Of course, this will be not vastly
different from the earlier example

0:00:27.280,0:00:33.120
with the Connection and matching inside
the Connection to compute the travelTime.

0:00:33.120,0:00:35.440
But anyway, let's do this briefly.

0:00:35.440,0:00:37.600
So, let's say we want to add two numbers.

0:00:38.320,0:00:44.240
So, that would correspond
to an expression like this.

0:00:44.240,0:00:47.200
So, we have the addition which is a
function that takes two arguments,

0:00:47.200,0:00:49.760
and these arguments are natural numbers.

0:00:50.320,0:00:54.320
So, let's say we want to add
2, or maybe 3 plus 2.

0:00:55.200,0:00:57.680
So, the left argument would be 3.

0:00:57.680,0:01:03.200
But of course, 3 as a data type
expression with these data constructors.

0:01:03.200,0:01:11.040
So, basically, this would be such
a very simple, namely linear, tree

0:01:11.680,0:01:16.720
with three successor constructors
and the zero constructor, right?

0:01:16.720,0:01:20.480
This corresponds to the natural number
3 encoded in this data type.

0:01:21.760,0:01:26.080
And actually, let me do this just with 2.

0:01:26.080,0:01:28.080
So that the computation doesn't get too long.

0:01:28.640,0:01:31.680
So, let me really add 2 and 2.

0:01:32.560,0:01:39.840
So, then on both sides, I would have
the same tree (the same expression).

0:01:40.720,0:01:41.220
Okay.

0:01:42.000,0:01:43.520
Then how does the computation work?

0:01:43.520,0:01:47.520
Well, as before, we need to
check which case to take.

0:01:47.520,0:01:50.240
So, we have the addition function,
we have two rules for that.

0:01:50.800,0:01:53.440
The first one apparently doesn't apply because

0:01:53.440,0:01:57.040
zero does not match against
successor (Succ) successfully.

0:01:57.040,0:02:01.440
So, of course, it is the second
equation that could be used.

0:02:02.400,0:02:03.520
And what would this mean?

0:02:03.520,0:02:06.480
Well, the first argument
is successor of something.

0:02:06.480,0:02:07.920
And the something is called 'n'.

0:02:07.920,0:02:15.200
So, actually, this means that
this part would be bound to 'n'.

0:02:16.000,0:02:19.280
And the second argument of the
addition is just a variable.

0:02:19.280,0:02:25.360
So, the whole second argument
would be considered to be 'm'.

0:02:25.920,0:02:34.720
Okay, so this is this part, and then we have 'm'
and 'n' as the arguments or parts of arguments.

0:02:35.360,0:02:39.280
Okay, so with this binding, this equation
matches. We take the right-hand side.

0:02:39.280,0:02:40.720
What does the right-hand side say?

0:02:40.720,0:02:43.040
So, how do we replace this?

0:02:43.040,0:02:50.080
Well, we replace this by a
“successor of” (Succ) and an “add” call.

0:02:50.080,0:02:53.920
So, successor is a function which is applied
to this add call… to this other expression.

0:02:53.920,0:02:54.880
So, what is this add?

0:02:55.760,0:02:57.200
Well, it's a call of two arguments.

0:02:57.200,0:02:58.320
What are the two arguments,

0:02:58.320,0:03:00.480
'n' and 'm'? Well, we know what 'n' and 'm' are

0:03:00.480,0:03:02.160
because they appeared here.

0:03:03.200,0:03:06.560
So, this will be now a call with left argument

0:03:07.200,0:03:17.840
successor of zero (Succ Zero) and right
argument successor of successor of zero (Succ (Succ Zero)).

0:03:19.040,0:03:20.320
So, that's this Zero here.

0:03:22.160,0:03:24.480
Okay, then how does it go on?

0:03:24.480,0:03:27.680
Well, now, again, we have this addition call.

0:03:27.680,0:03:30.800
Which should compute something so
it doesn't use the first equation,

0:03:30.800,0:03:33.040
because the first argument is not Zero.

0:03:33.040,0:03:36.000
So, it, of course, takes again the second equation.

0:03:36.000,0:03:37.120
And what does it match?

0:03:37.120,0:03:38.960
Well, now this will be 'n'.

0:03:41.120,0:03:41.920
And this will be 'm'.

0:03:44.800,0:03:45.920
Yes.

0:03:45.920,0:03:55.920
So, this goes on as “successor of addition
of n and m”. With this situation that we have here,

0:03:55.920,0:03:57.120
with the successor of 'n' and 'm', we should use

0:03:57.920,0:04:01.120
another successor call
and then a recursive call of addition.

0:04:01.120,0:04:03.280
So, we get successor of successor

0:04:07.040,0:04:09.040
of another addition call.

0:04:09.040,0:04:11.120
And what are the two
arguments of this call?

0:04:11.120,0:04:15.040
It's just a Zero from this place

0:04:16.960,0:04:29.840
and the 'm' which is actually still, now and always
actually in this call, successor of successor of Zero.

0:04:31.520,0:04:33.600
Okay, and now how does it further go on?

0:04:33.600,0:04:35.680
Well, now we have to evaluate this call.

0:04:36.720,0:04:38.000
Now, the first argument is Zero.

0:04:38.000,0:04:40.320
So, it won't match the second equation anymore.

0:04:40.320,0:04:41.920
It will match the first equation.

0:04:41.920,0:04:43.360
And what does the first equation say?

0:04:43.360,0:04:46.880
It says addition of Zero and
something is that something.

0:04:48.400,0:04:48.900
Okay?

0:04:49.440,0:04:56.000
Which means that this will now actually
reduce further… evaluate further, too.

0:04:57.520,0:05:03.840
And now this is the Zero and
this is, of course, still the 'm'.

0:05:05.200,0:05:23.840
So, the next step will be "successor of successor
of" and then this expression, we call as 'm'.

0:05:25.200,0:05:25.920
Then we are done.

0:05:25.920,0:05:27.840
Because there are no further function calls left.

0:05:27.840,0:05:28.960
And what have you computed?

0:05:28.960,0:05:31.120
We have computed, two plus two is four.

0:05:31.840,0:05:35.200
It would have been disappointing
if this had not worked out this way.

0:05:36.880,0:05:40.400
Okay, so this was something I wanted to show.

0:05:41.120,0:05:46.720
And then also, I wanted to show
just a few more examples of

0:05:48.080,0:05:53.280
values of data types, in particular in the case
where we had these polymorphic data types.

0:05:53.280,0:05:54.800
So, what did we have?

0:05:54.800,0:05:57.920
So, for example, we had this Tree data type in the

0:05:57.920,0:06:00.320
slides and there was this
version, which was polymorphic.

0:06:01.600,0:06:08.320
Yes, which started something like:
“Tree a =” and then the definition

0:06:08.320,0:06:09.360
as on slides.

0:06:13.040,0:06:15.040
The one where we had this polymorphic version.

0:06:15.600,0:06:19.840
And then we can, for example,
ask ourselves for a few values.

0:06:20.400,0:06:23.040
Well, for example, we could
ask ourselves, what are values

0:06:27.520,0:06:33.840
of type “Tree Integer”?

0:06:35.840,0:06:42.400
And well, then we have values
like a Leaf, or a Node

0:06:43.920,0:06:48.720
with two arguments, where the first and
last should be integer Trees again.

0:06:48.720,0:06:50.960
So, they could of course also be Leaf.

0:06:50.960,0:06:55.280
And then here, we have something like
5, because it’s an integer, right?

0:06:55.280,0:06:58.400
This tells us that you have a number here.

0:06:59.680,0:07:05.440
For example, this one, and then of
course, there can be more nesting involved.

0:07:05.440,0:07:11.760
So, you could have Node, let’s again
say, 5 and a Leaf as the left part.

0:07:11.760,0:07:14.480
In the right, we may have another Node.

0:07:15.440,0:07:22.240
Maybe this now, again, has leaves as
Successors. And here, we could have 7.

0:07:22.240,0:07:25.680
So, we can’t have a Boolean value there, right?

0:07:25.680,0:07:30.560
If we have a Tree Integer, then at all
these places, we will have integers.

0:07:31.520,0:07:36.080
We can have a Tree of Bools, then we can have
False and True and False and False and whatever,

0:07:36.080,0:07:38.000
but at each place the same thing.

0:07:38.800,0:07:43.840
That’s how this parameter is
used and the effect it has.

0:07:45.760,0:07:48.160
Okay, so this is something.

0:07:48.160,0:07:53.440
And then maybe let’s also look at something
where we combine this with this “Maybe” type,

0:07:53.440,0:07:55.120
which was another polymorphic type.

0:07:55.120,0:07:58.720
And its argument type could, for
example, be a Tree type, right?

0:07:58.720,0:08:00.400
So, let’s look at something like this.

0:08:04.880,0:08:10.880
Just for the sake of examples.
There is the following type. “Maybe”...

0:08:10.880,0:08:12.240
That was this type constructor.

0:08:12.240,0:08:14.400
And then we could put some type here.

0:08:14.400,0:08:16.240
And of course, we can nest this arbitrarily.

0:08:16.240,0:08:18.320
So, for example, you could put there a Tree type.

0:08:19.360,0:08:21.360
Well, and let’s not take Tree Integer.

0:08:21.360,0:08:22.640
Let’s take Tree Bool.

0:08:25.360,0:08:28.880
Okay, now this Tree Bool that
would be trees like this,

0:08:28.880,0:08:33.600
but with Trues and Falses
instead of fives and sevens.

0:08:34.240,0:08:37.280
Now, actually, it occurs
as Maybe of Tree Bools.

0:08:37.280,0:08:41.200
So, it can’t be such a Tree directly.

0:08:41.200,0:08:46.480
So, for example, one possible value
of this type would be Nothing.

0:08:46.480,0:08:47.520
So, we don’t have a Tree.

0:08:47.520,0:08:48.080
We have Nothing.

0:08:48.080,0:08:51.600
That’s one of the two data constructors
of the Maybe type constructor.

0:08:52.880,0:08:56.480
But of course, you could also
have the Just case and then

0:08:56.480,0:09:01.040
the construction was that: Maybe of
something could be Nothing or Just

0:09:01.040,0:09:05.680
and then something of that thing,
which is the type argument of Maybe.

0:09:05.680,0:09:18.720
So, for example, you can have Just a Leaf, or we
can have Just and then a Node tree with two leaves (Leaf),

0:09:20.480,0:09:25.040
and now, of course, a Boolean
value in the middle position

0:09:27.440,0:09:30.480
because of this: Maybe Tree Bool.

0:09:30.480,0:09:35.840
The Maybe leads to this Just
and Tree Bool is this part.

0:09:36.880,0:09:38.400
And of course, this goes on.

0:09:38.400,0:09:40.480
Right, you can put further Just

0:09:40.480,0:09:44.800
and some Tree there with structures
like this or other nesting structures,

0:09:44.800,0:09:58.080
but of course, always Boolean values instead
of numbers in the label places for each node.
