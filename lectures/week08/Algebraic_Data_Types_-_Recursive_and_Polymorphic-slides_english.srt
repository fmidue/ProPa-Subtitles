137 # slide
00:00:01,840 --> 00:00:07,600
After we have talked about simple enumeration
types and non-recursive algebraic datatypes,

00:00:07,600 --> 00:00:12,160
we can now talk about
recursive algebraic datatypes.

00:00:14,720 --> 00:00:19,280
Here is an example, and it probably shouldn't
be surprising that, just as functions can be

00:00:19,280 --> 00:00:24,400
recursive, types can be recursive. So, what
do we define here? We define a type Nat

00:00:25,440 --> 00:00:33,840
(for natural numbers). And values of this type are
defined to be either Zero or successor (Succ) of

00:00:33,840 --> 00:00:40,240
something which is a Nat (natural number). With
this, we can express all natural numbers. We have

00:00:40,240 --> 00:00:50,400
Zero, Succ Zero (successor of Zero), but also Succ
(Succ Zero). Since Succ Zero is an element of Nat,

00:00:50,400 --> 00:00:54,320
and since Zero is an element of Nat, hence
Succ Zero, etc. So, it is just like the

00:00:57,200 --> 00:01:03,760
Connection example except that now
in the positions that occur here as

00:01:03,760 --> 00:01:08,240
arguments to the data constructors, we use
the same type that we are currently defining.

00:01:08,240 --> 00:01:13,360
That's allowed, and it gives infinitely
as many values of this type, namely:

00:01:13,920 --> 00:01:20,560
many many successors of Zero (“example: Succ (Succ
(Succ ( … Zero))…)”). So, here are some values

00:01:20,560 --> 00:01:27,760
of this type. And it is clear what the systematic
is here… how this goes on. This exactly expresses

00:01:27,760 --> 00:01:34,000
all natural numbers. Then how do we compute
on this? By pattern-matching and recursion.

00:01:35,520 --> 00:01:40,080
Naturally, if you have a recursive datatype,
then most functions on it will also be recursive

00:01:40,640 --> 00:01:46,400
(most interesting functions). Let's consider
addition. Of course, we can't simply just use

00:01:46,400 --> 00:01:51,947
the plus symbol that we normally use for
numbers because this is not a number type. It

00:01:51,947 --> 00:01:57,120
is a user-defined type. So, if we want to perform
addition, we should define our functions for this.

00:01:58,000 --> 00:02:03,200
This is the addition of natural numbers.
Two naturals come in, one comes out. How

00:02:03,200 --> 00:02:08,480
is it defined? There are different ways to do it.
Here it is done by case distinction on the first

00:02:08,480 --> 00:02:13,360
argument. So, with the first argument Zero, and
the second argument something… some variable m,

00:02:14,480 --> 00:02:22,000
then addition of Zero and m is m. The first
argument is not yet recursive. This is the

00:02:22,000 --> 00:02:26,400
basic case of the recursion. And if the first
argument is not Zero, then it must be successor of

00:02:26,400 --> 00:02:31,120
something because there is no other choice because
Zero and Succ are the only two data constructors

00:02:31,680 --> 00:02:39,920
of the Nat type. So, it is successor of something.
And this something is a variable. It can be

00:02:41,120 --> 00:02:46,160
replaced by a variable. So, this would
be a natural number of the same type. And

00:02:46,160 --> 00:02:50,480
the second argument is also a natural number.
Then, what can we do? We can call the function

00:02:50,480 --> 00:02:56,240
“add” recursively on n and m because it works
on two natural numbers. This will give a natural

00:02:56,240 --> 00:03:01,760
number. And to this natural number, we can apply
the successor constructor to give us, yet another

00:03:01,760 --> 00:03:06,960
natural number. So, this makes sense from a typing
perspective, and also makes sense mathematically,

00:03:06,960 --> 00:03:13,920
because it is basically saying: Zero plus
something is that thing. And the successor of

00:03:13,920 --> 00:03:20,960
something plus something else is the successor
of plus of the two individual values. So,

00:03:20,960 --> 00:03:26,240
these equations make sense mathematically. So,
they give a correct definition. They also give a

00:03:26,240 --> 00:03:30,800
complete definition, and the compiler will check
this. So, the compiler, given this definition,

00:03:30,800 --> 00:03:36,080
will make sure, if instructed to do
so, that all cases are handled. So,

00:03:36,080 --> 00:03:45,840
the case distinction is really complete. And this
defines a useful function on the natural numbers.

00:03:47,360 --> 00:03:53,520
If we play a bit more with recursion,
we can also get actual arbitrary

00:03:53,520 --> 00:03:59,200
deeply nested tree structures. So, here
is another recursive datatype. And now,

00:03:59,200 --> 00:04:03,840
the main/the conceptual difference is
that we have two recursive occurrences.

00:04:04,960 --> 00:04:12,480
So, a Tree is a Leaf or is a Node which one
of its arguments is an Integer (a number),

00:04:12,480 --> 00:04:17,680
but it also has two arguments which are recursive
occurrences, basically left successful and a right

00:04:17,680 --> 00:04:24,160
successor. So, of course, the values of this type
we look like this. So, a Leaf is a value of that

00:04:24,160 --> 00:04:29,280
type, and a Node with a Leaf and the number 2
and a Leaf is also a value of that type, but also

00:04:31,920 --> 00:04:36,960
examples where this Leaf is replaced by something
of this form, maybe with a different number.

00:04:37,600 --> 00:04:43,920
This would be similar of course to the Connection
example where we saw a Tree on the whiteboard

00:04:43,920 --> 00:04:50,160
app. But actually, there, the nesting was finite
because there was no recursion going on. But here,

00:04:50,160 --> 00:04:56,160
since we can always again plug a Tree into the
left or right successor of a Node,

00:04:56,160 --> 00:05:01,840
this can be arbitrarily deeply nested
Trees with labels on the internal Nodes

00:05:02,960 --> 00:05:09,200
of Integers. And how to compute on Trees
like that? Again, by case-distinction,

00:05:09,200 --> 00:05:14,720
pattern-matching , and recursion, in general. So,
for example, if we have such a Tree of arbitrary

00:05:15,600 --> 00:05:19,760
deep nesting and we want to compute how deep it
is actually nested, we want to compute the height

00:05:19,760 --> 00:05:24,880
of the Tree, then that should be a function
from Tree to Integer. How do we compute? We

00:05:24,880 --> 00:05:29,760
do a case distinction: a Tree can be a Leaf
or a Node with some arguments. The height of

00:05:29,760 --> 00:05:34,320
a Leaf makes sense to be defined as 0, or maybe
as 1. That's a decision we make at this point,

00:05:35,680 --> 00:05:40,960
how we want to interpret the height of a just a
Leaf. And the more interesting case is, of course,

00:05:40,960 --> 00:05:47,120
if the Tree is not a Leaf. So, it is a Node.
And then it has three arguments. So, the left

00:05:47,120 --> 00:05:53,680
Tree, some number, and the right Tree. And how
should the height be computed? We should compute

00:05:53,680 --> 00:05:59,680
recursively the height of the left and right
sub-Trees and take the maximum of that and add

00:05:59,680 --> 00:06:05,840
1. Then, we get an Integer which can usefully
be interpreted as the height of that Tree.

00:06:07,280 --> 00:06:10,480
So, the same pattern as before: case distinction,

00:06:12,400 --> 00:06:19,840
access to the substructures, recursion,
to make an interesting computation.

00:06:23,920 --> 00:06:30,640
Then we can also become a bit more abstract and
combine algebraic datatypes with polymorphism. So,

00:06:30,640 --> 00:06:34,240
we had functions that can be recursive
and polymorphic, and we have datatypes.

00:06:34,240 --> 00:06:38,080
They can be recursive, and they can be
polymorphic. What could this look like?

00:06:38,080 --> 00:06:43,360
Let's consider the case that we want to have Trees
as in the previous slide, but we don't necessarily

00:06:43,360 --> 00:06:52,560
always want to store numbers in there. We want
to basically be parametric… polymorphic over

00:06:52,560 --> 00:06:59,840
the type of things that are stored in the Tree,
just as we know that lists can be used over

00:06:59,840 --> 00:07:05,120
different types. So, what do we need to change
then? Let's ignore this “a” for a moment. So,

00:07:05,120 --> 00:07:09,920
we still have Tree as the data definition. A
Tree can be a Leaf and there is nothing stored,

00:07:09,920 --> 00:07:18,320
so there is no change in the data constructor
for the base case. However, if we have a Node,

00:07:18,320 --> 00:07:22,800
then we still want to have two sub-Trees, but
in the middle, we don't want to have an Integer,

00:07:22,800 --> 00:07:27,600
bur rather something else. And since we don't want
to commit to what this is, it is simply a type

00:07:27,600 --> 00:07:32,960
variable. Now, if we do this, then this variable
should be somehow introduced somewhere, and it

00:07:32,960 --> 00:07:37,973
is introduced here. So, basically, what this is
saying is: Tree is not just a simple datatype. It

00:07:37,973 --> 00:07:43,680
is now really a type constructor. It constructs a
new type for any argument type “a”. So, a "Tree a"

00:07:43,680 --> 00:07:49,840
is a Tree of "a"s. So, this “a” could later
be Int or Bool or whatever. But abstractly,

00:07:49,840 --> 00:07:55,440
in the definition, it is simply a variable because
we don't commit to a specific type here. Then we

00:07:55,440 --> 00:08:01,440
can use this type variable here, but also in the
recursive occurrences in the definition, we must

00:08:01,440 --> 00:08:13,200
make sure that we have a-Trees here, not just Tree
of Integers, because you might want to have the

00:08:13,200 --> 00:08:17,040
type of every label as this type which was given
here as an argument. So, we don't want to have

00:08:17,040 --> 00:08:21,920
Tree Integer here. We want to have "Tree a" again,
both for the left and for the right sub-Trees.

00:08:24,560 --> 00:08:30,720
This makes for quite interesting types of these
data constructors. Remember, a few slides back

00:08:30,720 --> 00:08:38,160
for Day and Train, etc., I gave the types of
these data constructors. Now, with polymorphism,

00:08:38,160 --> 00:08:45,120
they become more interesting. I will not discuss
this further here. So, my suggestion is that you

00:08:45,120 --> 00:08:49,360
put something like this definition
into a Haskell file, load it into ghci,

00:08:49,360 --> 00:08:57,760
and check the types of these constructors
to get insight to what is happening here

00:08:58,960 --> 00:09:05,520
on the type level. What about computation? How do
we compute on Trees of this kind? Just as before,

00:09:05,520 --> 00:09:12,560
we compute on them with case distinction, pattern
matching, and since it is a recursive type,

00:09:12,560 --> 00:09:18,720
recursion. So, we can, for example, have a height
function which computes the height of not just

00:09:18,720 --> 00:09:24,720
Integer Trees, but also for Trees of this kind,
for any “a”. Actually, the definition is just

00:09:24,720 --> 00:09:29,040
the same as in the previous slide. Why is that?
Because actually, since we are not looking at the

00:09:29,600 --> 00:09:37,840
element type here, the elements of the label
type. Actually, the computation of height is not

00:09:37,840 --> 00:09:43,040
affected by this. This "height" is actually a polymorphic
function on a polymorphic data type. So, it takes

00:09:43,040 --> 00:09:48,560
trees of any content type and returns an Integer.
And the definition is just as before because

00:09:48,560 --> 00:09:55,840
for a Leaf, we get a 0, and we don't need to know
what this type is to do so. And for a non-Leaf

00:09:56,560 --> 00:10:02,880
Tree, so, a Node with left and right Tree and some
value here, which will be of course of this type,

00:10:02,880 --> 00:10:07,760
but it is not used, so we don't need to care
about what exactly that type is. And what is

00:10:07,760 --> 00:10:11,680
the computation? It is still 1 + the maximum
of the left and right heights. Of course,

00:10:11,680 --> 00:10:16,240
not every function on Trees will be polymorphic,
but this 'height' function is polymorphic and it

00:10:16,240 --> 00:10:22,720
doesn't even need any change compared to the
monomorphic Tree type from the previous slide.

00:10:27,920 --> 00:10:33,680
Let us look at another example, this time from the
standard library. So, it is not something that we

00:10:33,680 --> 00:10:39,440
have to define ourselves. That's the Maybe
type. It is also polymorphic, not recursive,

00:10:39,440 --> 00:10:45,440
but polymorphic. So, what are values of that
type? A Maybe something (“Maybe a”) could be

00:10:45,440 --> 00:10:52,320
Nothing or could be Just a value of the type
which is the argument to this polymorphic

00:10:52,320 --> 00:10:58,160
type constructor (“Just a”). So, what's the point
of having this type? It is useful for functions

00:10:58,160 --> 00:11:03,600
that would otherwise be partial. So, functions
that for some cases we don't have a return value.

00:11:03,600 --> 00:11:08,640
We don't want to have a return value, then we
could the output part of that function as Maybe

00:11:09,200 --> 00:11:12,640
“whatever type it previously was”
(“Maybe a”). So, this makes explicit

00:11:12,640 --> 00:11:15,920
where we don't have return values for some
things. But it is completely different,

00:11:15,920 --> 00:11:21,840
of course, from partiality in other languages
where this is somehow implicit of a non-value or

00:11:21,840 --> 00:11:28,480
void. Well... void is a really
different thing because it would always

00:11:29,200 --> 00:11:32,560
return nothing (void). So, this is
about functions that sometimes return

00:11:32,560 --> 00:11:37,040
something and sometimes return nothing.
But it is explicit in the type signature.

00:11:39,040 --> 00:11:45,280
It can also be put to good use. And this will
actually happen in the exercises to our game

00:11:45,280 --> 00:11:49,840
level example again. So, let's redesign this even
further. Previously, we had this enumeration type

00:11:49,840 --> 00:11:54,640
where we also had this Blank as a possible tile.
We could argue: Blank is not really a tile. Blank

00:11:54,640 --> 00:12:02,080
is nothing. So, maybe the Tile type should only be
used for things that are actual tiles, like block,

00:12:02,080 --> 00:12:07,200
pearl, water, air, maybe spike, or whatever. And
where would we express that at some coordinates

00:12:07,200 --> 00:12:13,200
we don't have one of these Tiles? Previously, we
would have put the Blank tile. We will refactor

00:12:13,200 --> 00:12:18,400
the 'level' function a bit further. So, now, levels
are functions from Integer coordinate pairs

00:12:18,400 --> 00:12:23,840
to Maybe Tile (not just Tile). Previously, where
we would return Blank, we will return Nothing,

00:12:24,480 --> 00:12:30,080
the one from here because we have Maybe Tile
now. And for the places where we would return

00:12:31,200 --> 00:12:36,000
some arbitrary Tile, some non-Blank
Tile, we will return Just,

00:12:36,000 --> 00:12:43,520
and then that Tile. For the 'aTile' function, this
now means that it doesn't need a case for Blank.

00:12:44,480 --> 00:12:51,520
It only has to be defined for the actual Tiles
where we really draw something and dealing with

00:12:51,520 --> 00:12:56,080
the case that there is something blank, there
is nothing, that is not something that the aTile

00:12:56,080 --> 00:13:00,240
function has to do. That would be something
that you do in the actual drawing, basically,

00:13:00,240 --> 00:13:06,800
by filtering out the Nothings that could come out
of the level function. But that, as I mentioned,

00:13:06,800 --> 00:13:13,840
will be something to be done in the exercises.
The benefits that we have from this redesign are

00:13:13,840 --> 00:13:19,520
still present, or even more present now. We still
have this redundancy and completeness checking,

00:13:19,520 --> 00:13:23,760
in particular, of this function here. So, if you
extend the datatype, then we are sure that the

00:13:23,760 --> 00:13:32,320
compiler will where we have to add cases, etc. We
just redesigned to not have the Blank Tile as an

00:13:32,320 --> 00:13:38,720
actual tile. So, we used this partiality marker
by saying: the 'level' function gives a Maybe Tile.

00:13:43,920 --> 00:13:49,440
So, finally now, there is a possible
misunderstanding that I have to warn against,

00:13:50,560 --> 00:13:59,680
and that is the fact that the data that we get
with datatypes Trees structures as we have seen,

00:13:59,680 --> 00:14:04,720
in Haskell, they are not the same as pointer
trees in something like an imperative language.

00:14:05,440 --> 00:14:11,520
The data that we have here, the values that we
have, they are immutable. They are not things that

00:14:11,520 --> 00:14:16,160
can be mutated and changed. Often, if you
have a tree algorithm in something like C,

00:14:16,160 --> 00:14:20,720
then trees are referred to as pointer structures.
And then, for example, to insert something

00:14:20,720 --> 00:14:25,120
into a tree means to walk through the pointer
structure, and at some point, replace something,

00:14:25,120 --> 00:14:30,800
or maybe replace an empty pointer by a new
subtree pointer or whatever. So, we have a tree,

00:14:30,800 --> 00:14:35,120
we insert something into it, then we do it in
place in that tree. That is not what is happening

00:14:35,120 --> 00:14:41,280
in Haskell because all values are just values.
They are not mutable structures / mutable objects.

00:14:41,920 --> 00:14:47,760
So, what does this concretely mean in the case of
Trees? So, let's consider this function, which is

00:14:47,760 --> 00:14:55,520
inserting a value into a Tree. So, the assumption
is that a Tree a sorted Tree, which is ordered.

00:14:55,520 --> 00:15:02,080
So, you always have to the left smaller
elements than to the right if you have a given

00:15:02,080 --> 00:15:08,720
internal Node. And the hope here is to have a
new Integer… we get an Integer and a Tree, and

00:15:08,720 --> 00:15:13,200
we want to insert this Integer at the appropriate
place in that Tree. And insertion does not mean

00:15:13,200 --> 00:15:18,400
that we overwrite the original Tree, it means
that we compute a new Tree. That new Tree might

00:15:18,400 --> 00:15:22,480
share a lot of structure with the previous
Tree, but it is an independent Tree. So, how

00:15:22,480 --> 00:15:27,760
is this happening? Let's look at the definition of
this function. There is a base case if I want to

00:15:27,760 --> 00:15:33,360
insert something into , basically, an empty Tree,
then what I get is a very small Tree, but not

00:15:33,360 --> 00:15:39,760
empty anymore. So, it has a Node, the new value
that we wanted to insert, and two leaves (Leafs).

00:15:39,760 --> 00:15:47,040
And the more interesting recursive case is: we get
a number and a Tree which has a Node as its root,

00:15:47,040 --> 00:15:53,680
and then a left sub-Tree and a right sub-Tree,
and an already given number m. So, what does this

00:15:53,680 --> 00:16:02,960
mean? This syntax means that apart from using this
matching to identify the values of these variables

00:16:02,960 --> 00:16:10,640
nested inside this Node, I can also, in the
right-hand side of the definition for this case,

00:16:10,640 --> 00:16:15,840
refer to the Tree as a whole thing. That's what
this means. It introduces a special variable for

00:16:15,840 --> 00:16:23,120
the whole Tree along with variables for the things
that I have matched deeper inside. And what is the

00:16:24,000 --> 00:16:27,760
behaviour here if the thing that I want
to insert is smaller than the current

00:16:29,040 --> 00:16:34,240
Node (the root of the current Tree)? Then I
know that I have to insert this into the left

00:16:34,240 --> 00:16:40,880
sub-Tree. So, what I get is a new Node which has
the same right successor as the original Tree,

00:16:40,880 --> 00:16:48,480
it has the same internal Node again, and it has a
new left sub-Tree, which is obtained with recursive

00:16:48,480 --> 00:16:54,240
call with the inserting of this n into the left
sub-Tree. Then there is a corresponding case for

00:16:54,240 --> 00:17:01,760
the right. The case is: if n is greater than the
current label. And otherwise, if neither of these

00:17:01,760 --> 00:17:06,640
cases is true, then obviously, n and m must be
equal, and then simply, we return the unchanged

00:17:06,640 --> 00:17:13,920
Tree as a whole. So, you can try this out and
you will see that this computes new Trees.

00:17:13,920 --> 00:17:18,736
But they are really new Trees. So, they are
not changing the original Tree. That's what

00:17:18,736 --> 00:17:24,160
is called persistency of data structures. And
that's a property that some data types have in

00:17:24,880 --> 00:17:29,200
imperative languages. So, if you compute 3+5 in
an imperative language, you get a new value 8.

00:17:29,200 --> 00:17:33,600
You don't overwrite the 3 with 8 or something
like that. You wouldn't even consider this as a

00:17:33,600 --> 00:17:39,760
reasonable behaviour of the “+” operation in any
language, also in an object-oriented language. But

00:17:39,760 --> 00:17:44,720
for example, for data structures like arrays,
lists, trees, often, the understanding in

00:17:44,720 --> 00:17:50,400
imperative languages is that if you, for example,
insert something into the data structure, then

00:17:50,400 --> 00:17:55,920
you don't get a new copy with the new additional
value, but you actually overwrite the old thing,

00:17:55,920 --> 00:18:00,320
which can then, of course, have
influences on other uses of that data.

00:18:00,320 --> 00:18:06,640
That is not something that we have in mathematics.
So, in Haskell, what we get is a new Tree,

00:18:06,640 --> 00:18:11,200
independent of the other one, of course sharing
some of it, maybe in terms of normal usage, but

00:18:12,000 --> 00:18:15,680
mathematically a new Tree, and the old
one is still around and can be used.

00:18:16,640 --> 00:18:24,000
So, this has consequences for
algorithmics, for example.
