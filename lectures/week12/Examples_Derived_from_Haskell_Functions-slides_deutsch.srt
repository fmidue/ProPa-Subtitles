
30 # slide
00:00:02,080 --> 00:00:02,800
Willkommen zurück.

00:00:04,080 --> 00:00:08,800
In diesem Video werden wir
mehr Prolog-Beispiele besprechen.

00:00:10,000 --> 00:00:18,480
Bis jetzt haben wir Beispiele der Form gesehen, wo wir
einige konstante Entitäten hatten, wie die Personen in

00:00:18,480 --> 00:00:22,880
den meisten Beispielen, die Sie bis jetzt gesehen haben, oder vielleicht
fast allen Beispielen, die Sie bisher gesehen haben.

00:00:23,440 --> 00:00:26,640
Und dann wurden Prädikate verwendet, um

00:00:27,280 --> 00:00:31,280
Beziehungen zwischen diesen Entitäten,
zwischen diesen Konstanten auszudrücken.

00:00:31,280 --> 00:00:34,320
Und dann wurden Fakten und Regeln verwendet, um zu beschreiben,

00:00:34,320 --> 00:00:38,480
was die Natur dieser Beziehungen ist
oder welche Beziehungen gelten.

00:00:38,480 --> 00:00:41,600
Und das war die Art von Prolog-
Programm, das Sie bis jetzt gesehen haben.

00:00:42,880 --> 00:00:49,840
Okay, heute werden wir uns andere Prolog-
Programme ansehen, die mit strukturierten Daten arbeiten.

00:00:49,840 --> 00:00:52,880
Sie haben also bereits die
Terminologie in dem vorherigen Video

00:00:54,160 --> 00:00:57,200
gesehen, wie Terme in Prolog geschrieben werden

00:00:57,200 --> 00:01:02,320
und wie dies im Prinzip
Bäumen in Haskell entspricht.

00:01:03,440 --> 00:01:09,520
Wir werden heute mehr davon sehen, indem wir
Programme über solche strukturierten Daten betrachten.

00:01:09,520 --> 00:01:13,840
Und insbesondere werden wir uns auch
die Beziehung zu Haskell-Programmen ansehen.

00:01:13,840 --> 00:01:16,640
Sie werden also etwas sehen, das
eine Funktion in Haskell wäre,

00:01:16,640 --> 00:01:22,000
wie dies in einem
Prädikat und Regeln in Prolog ausgedrückt werden könnte.

00:01:22,000 --> 00:01:24,800
Und sogar auf eine halbautomatische Weise, wie man

00:01:25,680 --> 00:01:28,960
ein entsprechendes Prolog-Programm
für ein Haskell-Programm erstellen kann.

00:01:28,960 --> 00:01:30,960
Natürlich gibt es keine Art,
eine Eins-zu-eins-Übereinstimmung.

00:01:30,960 --> 00:01:36,160
Aufgrund von Unterschieden wie Typisierung etc.,
aber im Geiste kann man eine solche Beziehung haben.

00:01:37,920 --> 00:01:43,840
Und dann kann man auch sehen, dass wir mit
dem Prolog-Programm auf diese Weise ein

00:01:44,400 --> 00:01:47,760
paar mehr Dinge tun können als nur mit
einem Haskell-Programm, wegen dieser

00:01:47,760 --> 00:01:52,320
logischen Geschmacks und Prädikat-Definitionen
anstatt von Funktionsdefinitionen.

00:01:52,320 --> 00:01:56,960
Okay, aber lasst uns, bevor ich mehr darüber
spreche, schauen wir uns ein Beispiel an.

31 # slide
00:01:58,080 --> 00:02:00,720
Nehmen wir also an, Sie wollen
mit Datenstrukturen arbeiten.

00:02:00,720 --> 00:02:03,840
Und unsere ersten Datenstrukturen sind einfach Zahlen.

00:02:03,840 --> 00:02:08,400
Aber nicht 0, 1, 2 im Sinne
eines eingebauten Integer-Typs.

00:02:09,200 --> 00:02:14,560
Sondern in ähnlicher Weise, wie wir die
natürlichen Zahlen in Haskell als Beispiel für Datenstrukturen

00:02:14,560 --> 00:02:18,320
Strukturen verwendet haben, wo wir Dinge mit einem
Null-Konstruktor und einem Nachfolger-Konstruktor ausdrücken.

00:02:18,320 --> 00:02:20,960
Der Nachfolger des Nachfolgers der Null wäre also die Zwei.

00:02:20,960 --> 00:02:23,360
Sagen wir also, wir wollen
etwas Ähnliches in Prolog machen.

00:02:24,000 --> 00:02:30,640
Und nun, wir würden eine Funktion ausdrücken wollen,
etwas plus etwas ist etwas anderes.

00:02:30,640 --> 00:02:32,320
Also zwei Eingänge, ein Ausgang.

00:02:32,320 --> 00:02:36,960
Natürlich ist das nicht etwas, das
dem Muster von Prolog-Programmen entspricht.

00:02:36,960 --> 00:02:40,080
Denn wie ich schon mehrmals sagte,

00:02:40,080 --> 00:02:43,520
schreiben wir in Prolog keine Funktionen,
die zu Ergebnissen ausgewertet werden können.

00:02:43,520 --> 00:02:48,800
Wir bauen keine Ausdrücke, die ausgewertet werden,
sondern stattdessen schreiben wir so etwas wie eine Abfrage.

00:02:48,800 --> 00:02:51,520
Schreiben Sie zuerst ein Programm, dann
eine Abfrage gegen dieses Programm,

00:02:51,520 --> 00:02:55,120
in der wir versuchen, Dinge auszudrücken,
Dinge wie etwas Zufriedenes auszudrücken.

00:02:55,120 --> 00:02:58,400
Und wenn man ein Ergebnis haben will, dann

00:02:58,400 --> 00:03:03,600
funktioniert das, indem man eine Variable in einer Abfrage hat
und dann wird die Abfrage erfüllbar gemacht.

00:03:03,600 --> 00:03:08,240
Und die Werte, die Instanziierungen für

00:03:08,800 --> 00:03:12,560
alle auftretenden Variablen, während
die Abfrage erfüllt wird.

00:03:12,560 --> 00:03:14,720
Das wird als unsere Ausgabe betrachtet.

00:03:15,920 --> 00:03:20,240
Okay, anstelle einer binären Funktion
zu haben, können wir nur ein Prädikat haben.

00:03:20,240 --> 00:03:27,040
Es gibt also eine bestimmte Konvention, die nicht
der Sprache aufgezwungen wird, aber ich werde sie verwenden.

00:03:27,040 --> 00:03:29,520
Und sie wird auch oft in Beispielen verwendet.

00:03:29,520 --> 00:03:35,920
Wenn ich also eine binäre Funktion habe, dann kann ich
diese in ein Prädikat mit drei Argumenten verwandeln.

00:03:35,920 --> 00:03:39,840
Und die Idee ist, wenn ich etwas schreibe
wie z.B. addiere Null, irgendwas,

00:03:39,840 --> 00:03:44,960
etwas, dann bedeutet das, dass dies plus
dies, also die Addition dieser beiden Dinge,

00:03:44,960 --> 00:03:47,280
das gefilterte sein
Ding, das dritte Argument.

00:03:47,280 --> 00:03:52,640
Man könnte das also lesen als:
ist Null, also die Addition von Null

00:03:52,640 --> 00:03:56,880
und X ist X für jedes X.
Das macht doch Sinn, oder?

00:03:56,880 --> 00:04:01,680
Und hier sehen Sie bereits einen Unterschied
von z.B. Haskell, dass wir die

00:04:01,680 --> 00:04:06,800
gleiche Variable mehrmals verwenden können
im Kopf einer Regel oder in einem Fakt verwenden können.

00:04:06,800 --> 00:04:08,800
Okay, ich habe schon erwähnt, dass



00:04:08,800 --> 00:04:13,840
Es gibt weniger Beschränkungen für die
Form einer Programmzeile als in Haskell.

00:04:15,360 --> 00:04:19,840
Okay, die Addition von Null und X ist also X,
für was auch immer X ist, das macht absolut Sinn.

00:04:19,840 --> 00:04:21,600
Okay, das würde uns natürlich nur erlauben,

00:04:22,160 --> 00:04:25,840
sehr einfache Additionen zu haben, denn wir
könnten nur Null und etwas addieren.

00:04:25,840 --> 00:04:27,840
Also brauchen wir stattdessen eine weitere Regel.

00:04:28,880 --> 00:04:33,120
Eine rekursive Regel wahrscheinlich, und eine
Möglichkeit für diese Regel ist, dass ohne,

00:04:33,120 --> 00:04:35,520
eigentlich mehrere, aber eine wäre diese.

00:04:35,520 --> 00:04:36,560
Also lesen wir das mal.

00:04:37,280 --> 00:04:40,000
Also, hier verwende ich das s als Nachfolger.

00:04:40,000 --> 00:04:45,920
Also, ich habe die normale Null für den Null-Fall verwendet und
s von etwas für dieses s von Null ist eins.

00:04:45,920 --> 00:04:48,800
s von s von Null ist zwei, und so weiter.

00:04:50,080 --> 00:04:52,320
Okay, und was ich damit sagen will,
hier, in der zweiten Regel ist,

00:04:54,160 --> 00:04:59,200
es ist wahr, dass der Nachfolger von X
plus Y der Nachfolger von Z ist.

00:04:59,840 --> 00:05:05,680
Wenn es auch der Fall ist, dass X plus Y Z ist, oder

00:05:06,320 --> 00:05:09,360
genau andersherum, wenn
die Addition von X und Y Z ist,

00:05:09,360 --> 00:05:12,320
dann ist die Addition der Nachfolger
von X und Y der Nachfolger von Z.

00:05:13,040 --> 00:05:16,160
Auch dies ist eine logische
Sinn als logische Aussage.

00:05:17,920 --> 00:05:19,600
Dann können wir sie in Abfragen verwenden.

00:05:19,600 --> 00:05:27,760
So können wir etwa Prolog fragen, ob es zutrifft,
dass die Addition von eins und eins zwei ergibt.

00:05:27,760 --> 00:05:33,440
Ja, genau das bedeutet das jetzt, denn s
von Null wird von uns als Eins interpretiert.

00:05:34,640 --> 00:05:36,160
Okay, was wird Prolog sagen?

00:05:36,160 --> 00:05:38,320
Nun, Prolog wird sagen, ja.

00:05:38,320 --> 00:05:39,040
Nun gut.

00:05:39,040 --> 00:05:44,640
Und wir können nicht nur Fragen stellen, die eine
wahre oder falsche Antwort haben, wir können auch Fragen

00:05:44,640 --> 00:05:47,440
stellen, bei denen wir ein Ergebnis sehen wollen.

00:05:47,440 --> 00:05:53,520
Und das tun wir, indem wir, in diesem Fall, die
einfachste Möglichkeit wäre, den letzten

00:05:53,520 --> 00:05:59,120
Term durch eine Variable zu ersetzen, und dann fragen wir nicht
die Frage, ob die Addition von eins plus eins gleich zwei ist.

00:05:59,120 --> 00:06:02,720
Sondern wir fragen, ob es eine Zahl gibt,
die die Addition von eins plus eins ist.

00:06:02,720 --> 00:06:05,840
Und wenn ja, sagen Sie mir bitte, welche das ist.

00:06:06,720 --> 00:06:13,120
Okay, wir können also fragen, ob es eine Zahl N gibt, die
als die Addition von eins und eins N ist.

00:06:13,120 --> 00:06:15,600
Und jetzt sollte Prolog nicht einfach wahr antworten.

00:06:15,600 --> 00:06:17,600
Es sollte sagen, ja, das ist es.

00:06:17,600 --> 00:06:24,320
Und ja, eigentlich Instanziierung und wieder diese
Regeln, das sind im Grunde die Peano-Axiome der

00:06:24,320 --> 00:06:26,080
Addition auf natürlichen Zahlen.

00:06:26,080 --> 00:06:27,760
Es gibt also eine einzige Lösung.

00:06:27,760 --> 00:06:29,440
Und das ist auch die, die man erwarten würde.

00:06:31,280 --> 00:06:37,440
Okay, das ist ein erstes Prolog-Programm
über Datenstrukturen.

00:06:37,440 --> 00:06:38,960
Und dann entspricht das natürlich

00:06:38,960 --> 00:06:45,920
sehr genau, bis auf Syntaxunterschiede,
dieser Haskell-Funktion.

00:06:45,920 --> 00:06:48,720
Ja, das kam in dieser oder einer sehr ähnlichen Form

00:06:49,280 --> 00:06:52,880
vorher im Haskell-Teil der
Vorlesung, wo wir dort natürliche

00:06:52,880 --> 00:06:57,840
Zahlen mit einem solchen Datentyp mit
Null-Konstruktor und einem Nachfolger-Konstruktor.

00:06:57,840 --> 00:07:02,800
Also, hier in Prolog, da ich kein Typsystem habe,
kann ich frei sein, tatsächlich den

00:07:02,800 --> 00:07:05,680
Zahlenwert Null anstelle des Null-Konstruktors zu verwenden.

00:07:05,680 --> 00:07:10,800
In Haskell hingegen muss ich den Datentyp wählen
und mich dann hier an die Namenswahl halten.

00:07:11,520 --> 00:07:15,120
Und dann sieht das Programm aus wie
die Addition von Null und X ist X, und die

00:07:15,120 --> 00:07:20,320
Addition des Nachfolgers von X und Y ist
der Nachfolger der Addition von X und Y.

00:07:20,320 --> 00:07:23,280
Ja, das entspricht zumindest im Geiste diesen

00:07:23,280 --> 00:07:29,280
zwei Prolog-Regeln, in der Tat, und tatsächlich,
können wir das Gleiche berechnen, oder?

00:07:29,280 --> 00:07:34,400
Wenn wir diese Additionsfunktion in Haskell verwenden und
geben wir ihr den Nachfolger von Null, den Nachfolger von Null,

00:07:34,400 --> 00:07:36,640
ergibt sie den Nachfolger von, Nachfolger von Null.

00:07:40,160 --> 00:07:44,560
Okay, was ist also die
Korrespondenz hier genauer?

00:07:44,560 --> 00:07:49,280
Nun, abgesehen von nur diesem einen
Beispiel, wo es etwas ähnlich aussieht.

00:07:49,280 --> 00:07:50,240
Aber auch anders, natürlich.

00:07:50,240 --> 00:07:52,160
Denn hier haben wir zwei Eingänge und einen Ausgang.

00:07:52,160 --> 00:07:53,680
Und hier haben wir einfach drei Argumente.

00:07:54,240 --> 00:07:57,840
Also, lassen Sie uns das ein wenig systematischer
auf der nächsten Folie machen.

32 # slide
00:08:01,760 --> 00:08:02,720
Also, was ist der Unterschied?

00:08:02,720 --> 00:08:03,440
Oder die Verbindung?

00:08:06,000 --> 00:08:08,400
Können wir überhaupt eine Version von der anderen ableiten?

00:08:08,400 --> 00:08:10,320
Schauen wir uns also an, dass wir in Haskell Funktionen haben.

00:08:10,320 --> 00:08:14,560
Natürlich ist das die Sache, die ich
die ganze Zeit in Prolog betont habe,

00:08:14,560 --> 00:08:16,560
stattdessen haben wir Prädikate oder Relationen.


plaintext
00:08:16,560 --> 00:08:21,040
Wir reden also nicht über Funktionen, wir reden
über Dinge, die wahr sein können, oder Relationen.

00:08:21,040 --> 00:08:27,680
die entweder wahr oder nicht wahr sind für bestimmte
Kombinationen einiger Variablen aus bestimmten Mengen.

00:08:29,920 --> 00:08:35,040
Okay, also wo wir in Haskell schreiben
Dinge wie f von x und y ist z.

00:08:35,040 --> 00:08:36,800
Sie haben also zwei Eingaben und eine Ausgabe.

00:08:36,800 --> 00:08:40,160
In Prolog würde dies stattdessen
entsprechen, wo wir ein Prädikat haben,

00:08:40,800 --> 00:08:42,240
das drei Argumente hat.

00:08:42,240 --> 00:08:43,920
Und wir könnten dies interpretieren als

00:08:44,640 --> 00:08:48,880
dass es irgendwie ausdrückt, dass Z ein
Ergebnis von etwas mit X und Y ist.

00:08:48,880 --> 00:08:53,040
Aber eigentlich, ganz allgemein, ist dies
nur ein Prädikat, das aus drei Dingen besteht.

00:08:53,040 --> 00:08:58,240
Da es keine inhärente
Input-Output-Unterscheidung gibt,

00:08:58,240 --> 00:09:01,200
sind dies einfach drei Argumente und
das Prädikat kann wahr sein oder nicht.

00:09:01,200 --> 00:09:06,240
Während wir hier bestimmte Eingaben und eine
Ausgabe haben, sind sie syntaktisch unterschieden.

00:09:06,240 --> 00:09:10,800
Okay, das verschwindet auf der Prolog-Seite,
außer vielleicht, wenn wir eine Konvention haben,

00:09:10,800 --> 00:09:15,200
die besagt, dass wir immer das
letzte Argument als die Ausgabe betrachten oder so.

00:09:17,280 --> 00:09:24,080
Okay, also mit dieser Korrespondenz könnte das
vielleicht auch schon benutzt werden, um ein

00:09:24,080 --> 00:09:26,720
Haskell-Programm in ein Prolog-Programm zu übersetzen, ja.

00:09:26,720 --> 00:09:31,200
Also, wenn man eine Gleichung sieht wie
so, Addition von Null und x ist x,

00:09:31,200 --> 00:09:36,240
dann könnten wir sagen, na ja, durch diese Korrespondenz
hier bedeutet das, auf der Prolog-Seite,

00:09:36,240 --> 00:09:41,200
müssen wir ein Prädikat add haben, das drei Argumente
benötigt und wo wir Zero, x, x verwenden.

00:09:42,240 --> 00:09:48,640
Und dann gibt es natürlich noch einige syntaktische
Unterschiede wie die Tatsache, dass in Prolog,

00:09:49,680 --> 00:09:54,640
Variablen in Großbuchstaben geschrieben werden und
Konstruktoren kleingeschrieben oder Symbole sind.

00:09:55,680 --> 00:09:57,600
Es gibt natürlich auch den Unterschied, dass in

00:09:57,600 --> 00:10:03,360
Haskell die Klammern und Kommas für Argumente nicht verwendet
werden, man hat nur Leerzeichen.

00:10:03,360 --> 00:10:07,200
Ja, aber das ist die nicht-mathematische
Art und Weise, wie die Haskell-spezifische

00:10:07,200 --> 00:10:10,160
Art, eine Anwendung aufzuschreiben.

00:10:10,160 --> 00:10:15,680
Das entspricht eher dem, was die Mathematik
schon seit langem so macht, richtig?

00:10:16,800 --> 00:10:22,480
Okay, aber es gibt einen Unterschied in der lexikalischen
Syntax der Variablen und Konstruktoren.

00:10:22,480 --> 00:10:24,240
Bringen wir das also in Ordnung.

00:10:24,240 --> 00:10:27,200
Dann würde dies entsprechen
dem, was ich bereits erwähnt habe.

00:10:27,200 --> 00:10:32,240
Ich kann den Null-Daten-Konstruktor einfach durch den Wert,
die Ziffer Null, ersetzen.

00:10:32,240 --> 00:10:34,720
Natürlich, wie auch immer, es gibt
kein Typsystem, das

00:10:34,720 --> 00:10:38,800
mich daran hindert und von mir verlangt,
einen extra Datentyp dafür einzuführen.

00:10:38,800 --> 00:10:44,320
Und ich ersetze die Variablen durch
Prolog-Syntax-Variablen in Großbuchstaben.

00:10:44,320 --> 00:10:50,560
Okay, dann habe ich im Wesentlichen meine erste
Regel nach Prolog übersetzt, meine erste Gleichung nach Prolog.

00:10:50,560 --> 00:10:50,880
Okay.

00:10:50,880 --> 00:10:53,360
Und ich mache auch eine Art von
Pattern-Matching, richtig?

00:10:53,360 --> 00:10:56,160
Wobei ich in Haskell wiederum diesen
Vergleich mit der Null hier.

00:10:56,160 --> 00:10:59,760
Jetzt haben wir eine Übereinstimmung im ersten
Argument gegen diese Konstante.

00:10:59,760 --> 00:11:01,600
Ja, wobei die anderen beiden Stellen nur Variablen sind.

00:11:01,600 --> 00:11:05,840
Es gibt also nichts zu
vergleichen, außer dass sie gleich sind.

00:11:08,640 --> 00:11:13,312
Okay, funktioniert das auch für die andere Gleichung?

00:11:13,312 --> 00:11:14,960
Ja, die interessantere
Gleichung aus dem Haskell

00:11:14,960 --> 00:11:18,720
Programm, die etwa so aussehen würde
so oder so ähnlich aussieht.

00:11:18,720 --> 00:11:25,600
Nun, wie würde dies entlang dieser
Linie hier zu etwas auf der Prolog-Seite?

00:11:25,600 --> 00:11:30,720
Nun, man könnte naiv denken: das
bedeutet wahrscheinlich so etwas wie, na ja, Addition von

00:11:31,280 --> 00:11:39,040
erster Argument Nachfolger von x, zweites Argument
y, Ergebnis Nachfolger von diesem Ausdruck hier.

00:11:39,040 --> 00:11:42,480
Und dann korrigiere ich das x und y
zu Großbuchstaben, etc.?

00:11:42,480 --> 00:11:43,760
Und dann bin ich vielleicht schon fertig.

00:11:44,960 --> 00:11:45,760
Nun, nicht ganz.

00:11:48,400 --> 00:11:48,900
Warum nicht?

00:11:50,960 --> 00:11:54,720
Nun, denn das, was wir hier
sehen, das ist nicht etwas, das

00:11:54,720 --> 00:11:56,400
auf der Prolog-Seite Sinn machen würde.

00:11:57,280 --> 00:11:57,600
Ja.

00:11:57,600 --> 00:12:01,920
Also, wir haben nicht alle
Funktionsanwendungen in Prädikate übersetzt.

00:12:02,640 --> 00:12:07,520
Ja, ich lasse einfach diese rechte Seite
hier, dann macht es keinen Sinn.

00:12:07,520 --> 00:12:12,560
Ja, hier habe ich Addition als ternäres Prädikat,
und hier, plötzlich, ist es immer noch eine Funktion,

00:12:12,560 --> 00:12:16,240
was in Prolog nicht sinnvoll ist, richtig?

00:12:16,240 --> 00:12:20,400
Und der Grund dafür ist, dass Prolog grundsätzlich
keine verschachtelte Funktionsanwendung hat.

00:12:20,400 --> 00:12:27,760
Wenn ich alles als Prädikate über
Argumente ausdrücke, dann, wenn ich etwas habe, das



00:12:29,360 --> 00:12:32,640
verschachtelt werden muss, dann muss ich
das Prädikat irgendwie verketten.

00:12:32,640 --> 00:12:37,200
Ich kann nicht einfach sagen: Ich füge x y
hier ein, denn das wäre eine Funktion.

00:12:37,200 --> 00:12:41,520
Aber wenn ich nur Prädikate habe, dann könnte ich
etwas wie Addition von x und y haben.

00:12:41,520 --> 00:12:47,200
Das ist etwas anderes, aber ich kann nicht einen Ausdruck schreiben,
addiere x, y, und berechne bitte das z für mich?

00:12:47,200 --> 00:12:48,880
Okay, das macht einfach keinen Sinn.

00:12:48,880 --> 00:12:51,920
Ich habe das hier nicht konsequent angewendet.

00:12:51,920 --> 00:12:53,040
Okay, was können wir stattdessen tun?

33 # slide
00:12:56,160 --> 00:13:00,080
Nun, wir müssen irgendwie systematisch
diese verschachtelten Funktionsaufrufe vermeiden.

00:13:00,880 --> 00:13:04,160
Die erste Frage wäre also,
wie würden wir das in Haskell machen?

00:13:05,200 --> 00:13:10,080
Wäre es uns in Haskell auch nicht erlaubt,
verschachtelte Funktionsaufrufe haben zu dürfen?

00:13:11,200 --> 00:13:12,640
Könnten wir etwas dagegen tun?

00:13:14,080 --> 00:13:15,840
Nun, mit ein wenig Nachdenken, ja, das könnten wir.

00:13:16,400 --> 00:13:19,200
Wenn es in Haskell nicht erlaubt wäre, Folgendes zu schreiben,

00:13:19,200 --> 00:13:24,480
einen Ausdruck wie diesen verschachtelt in
einer anderen Funktion oder innerhalb eines Konstruktors

00:13:24,480 --> 00:13:29,520
Aufrufs zu schreiben, dann könnten wir mit lokalen
Definitionen reflektieren, um dies zu vermeiden.

00:13:29,520 --> 00:13:35,760
Dies ist natürlich auf der
Haskell-Seite zu einer Gleichung wie dieser.

00:13:36,480 --> 00:13:40,560
Die Addition der Nachfolger von
x und y ist der Nachfolger von z,

00:13:40,560 --> 00:13:42,720
wobei z die Addition von x und y ist.

00:13:43,600 --> 00:13:45,200
Okay, warum sollte ich das tun wollen?

00:13:45,200 --> 00:13:48,400
Nun, wenn ich das tue, dann
kann ich diesen verschachtelten Funktionsaufruf vermeiden.

00:13:48,400 --> 00:13:50,320
Jetzt haben wir hier nur eine Variable,

00:13:50,320 --> 00:13:53,040
was etwas völlig anderes ist
als ein verschachtelter Funktionsaufruf, richtig?

00:13:53,040 --> 00:13:56,880
Das ist etwas, das ich
leicht in ein Formular wie dieses einfügen kann.

00:13:58,080 --> 00:14:02,080
Und das ist eigentlich auch etwas,
das ich in eine Form wie diese bringen kann,

00:14:02,080 --> 00:14:05,680
denn es entspricht wirklich einer
Funktionsanwendung und dem Ergebnis.

00:14:06,480 --> 00:14:09,840
Wohingegen dies etwas Seltsames war,
was auf der Haskell-Seite Sinn macht,

00:14:09,840 --> 00:14:13,600
aber nicht auf der Prädikat-Prolog-Seite.

00:14:14,320 --> 00:14:16,800
Okay, sagen wir also, auf der Haskell-Seite machen wir etwas wie das hier.

00:14:17,760 --> 00:14:20,080
Was bringt uns das dann?

00:14:20,080 --> 00:14:25,040
Nun, man könnte dies natürlich lesen,
als die Addition der Nachfolger von x

00:14:25,040 --> 00:14:29,280
und y ist der Nachfolger von z, wenn die
Addition von x und y z ist, richtig?

00:14:29,280 --> 00:14:30,800
Denn das ist genau das, was hier gesagt wird.

00:14:30,800 --> 00:14:37,280
Wenn z oder wenn z das Ergebnis dieser Funktion
Aufrufs ist, bedeutet das dasselbe, wie wenn man sagt, na ja,

00:14:37,280 --> 00:14:38,880
z ist die Addition von x und y.

00:14:38,880 --> 00:14:44,000
Und wenn das so ist, wenn wir z so wählen,
dies gilt, dann gilt auch dies.

00:14:44,000 --> 00:14:47,520
Okay, und mit diesem Trick haben
wir tatsächlich unsere Haskell

00:14:48,400 --> 00:14:55,680
Gleichung als etwas ausgedrückt, das in Bezug auf
Implikation und Prädikatsaufruf sinnvoll ist.

00:14:56,240 --> 00:14:56,560
Richtig?

00:14:56,560 --> 00:14:59,040
Das sieht viel mehr nach Prolog aus als das hier.

00:14:59,600 --> 00:15:02,160
Nun, wir müssen nur die Syntax wieder in Ordnung bringen.

00:15:02,720 --> 00:15:08,560
Ja, wenn wir das if durch die eigentliche
Prolog-Syntax für Implikation ersetzen, muss man

00:15:11,360 --> 00:15:16,160
die lexikalische Syntax in Ordnung bringen, nämlich,
dass Variablen in Großbuchstaben geschrieben werden müssen.

00:15:16,160 --> 00:15:21,520
Und um sicherzugehen, ändere ich auch die
Datenkonstruktoren, die so geschrieben waren

00:15:21,520 --> 00:15:30,000
in Haskell so geschrieben wurden, in Konstruktoren mit Kleinbuchstaben,
und der Kürze halber verwende ich hier einfach s.

00:15:30,000 --> 00:15:31,280
Natürlich hätte ich auch succ schreiben können.

00:15:32,560 --> 00:15:39,840
Okay, das wird dann die verwendete für
Wiedergabe dieser Anweisung hier, die im

00:15:41,040 --> 00:15:43,520
Grunde eine Umformulierung
dieses Nest-Funktionsaufrufs war.

00:15:47,360 --> 00:15:51,040
Okay, also habe ich am Ende ein Programm.
Ich habe es Ihnen schon einmal gezeigt.

00:15:51,040 --> 00:15:54,800
Aber jetzt ist es sehr systematisch
aus einem Haskell-Programm gewonnen.

34 # slide
00:15:58,960 --> 00:16:00,560
Okay, hier ist es wieder.

00:16:00,560 --> 00:16:01,760
Nun, warum sollte ich das tun?

00:16:01,760 --> 00:16:06,720
Warum mache ich mir die Mühe, meine nette
kleine Haskell-Funktion in Prolog-Regeln

00:16:07,680 --> 00:16:12,240
zu übersetzen, sodass ich dann
dasselbe tun kann, was ich vorher in Haskell tun konnte?

00:16:13,360 --> 00:16:16,480
Nun, es gibt einen Vorteil, dies zu tun.

00:16:16,480 --> 00:16:25,520
Nun, abgesehen davon, dass ich jetzt in der Lage bin, Prolog
Programme schreiben zu können, was seine eigenen Anreize mit sich bringt.

00:16:26,320 --> 00:16:29,920
Nun, selbst an diesem kleinen Beispiel können
wir etwas über die Flexibilität

00:16:30,800 --> 00:16:31,920
von Prolog-Prädikaten sehen.

00:16:32,800 --> 00:16:33,840
Warum ist das so?

00:16:33,840 --> 00:16:38,800
Nun, was ich gerade getan habe, ist, dass ich eine Haskell
Funktion, die auf Eingabe und Ausgabe basiert.

00:16:38,800 --> 00:16:41,120
Ich habe sie in ein Prolog-Prädikat übersetzt.



00:16:41,120 --> 00:16:44,720
Dann kann ich auf der Prolog-Seite
die Konvention haben, dass ich immer.

00:16:45,840 --> 00:16:49,040
zwei Dinge eingebe und das dritte Ding
herausbekomme, aber eigentlich gibt es nichts in der

00:16:49,040 --> 00:16:52,560
Syntax von Prolog, die von mir verlangt,
ein Programm auf diese Weise zu interpretieren.

00:16:52,560 --> 00:16:59,200
Nun, dieses Programm behauptet einfach eine
Tatsache oder Tatsachen über drei Argumente.

00:16:59,200 --> 00:17:02,480
Ob sie miteinander verbunden sind oder nicht, ob drei
Zahlen die Eigenschaft haben, dass die ersten beiden,

00:17:03,440 --> 00:17:05,680
wenn wir sie addieren, die dritte Zahl ergeben.

00:17:05,680 --> 00:17:09,920
Es gibt also nichts, was uns daran hindert, in
Abfragen daran hindert, dies anders zu verwenden.

00:17:09,920 --> 00:17:14,320
Anstatt also einfach zu fragen, was ist
die Addition einer festen Zahl und einer

00:17:14,320 --> 00:17:19,440
anderen festen Zahl, könnten wir auch fragen: "Was sind
einige N und M, so dass die Addition zwei ist?"

00:17:20,240 --> 00:17:24,240
Ja, wir haben eine Additionsfunktion geschrieben
in ein Prolog-Prädikat übersetzt.

00:17:25,120 --> 00:17:27,360
Und jetzt können wir Fragen über dieses Prädikat stellen,

00:17:27,360 --> 00:17:30,800
die nicht einfach beantwortet werden können durch
Haskell-Funktionen, die wir zuvor gesehen haben.

00:17:30,800 --> 00:17:34,560
In der Haskell-Funktion können wir nicht sagen,
hier ist meine Ausgabe, gib mir die Eingaben.

00:17:34,560 --> 00:17:37,680
Auf der Prolog-Seite, da es keinen
Unterschied zwischen Eingaben und Ausgaben gibt,

00:17:37,680 --> 00:17:40,560
kann ich sagen, nun, wenn ich diese Definition hier habe,

00:17:40,560 --> 00:17:45,840
kann ich fragen, nun, gibt es einige N und
M, so dass die Addition zwei ergibt?

00:17:46,400 --> 00:17:49,280
Und nun, wir können einfach Prolog fragen, was es damit tun wird.

00:17:49,280 --> 00:17:51,520
Und es wird tatsächlich fröhlich einige Antworten geben.

00:17:51,520 --> 00:17:53,280
Es wird sagen, ja, in der Tat, es gibt sie.

00:17:53,280 --> 00:17:55,920
Also, zum Beispiel, Null plus zwei ist zwei.

00:17:56,720 --> 00:17:59,520
Und dann kann ich als Benutzer fragen, na ja,
ist das wirklich die einzige Möglichkeit?

00:17:59,520 --> 00:18:01,360
Gib mir vielleicht weitere Optionen.

00:18:01,360 --> 00:18:04,240
Und dann würde Prolog sagen,
nun, eins plus eins ist auch zwei.

00:18:04,800 --> 00:18:10,320
Und in der Tat, wenn wir weiter fragen würden, dann würde es
uns auch sagen, dass zwei plus Null auch zwei ist.

00:18:11,360 --> 00:18:11,600
Richtig?

00:18:11,600 --> 00:18:16,800
Das heißt also, wir haben eine Additionsfunktion
in Form eines Prädikats programmiert,

00:18:16,800 --> 00:18:19,320
und dann können wir sie plötzlich
in der Rückwärtsbewegung verwenden.

00:18:19,320 --> 00:18:22,800
In gewissem Sinne machen wir hier
Subtraktion, richtig?

00:18:22,800 --> 00:18:32,480
Oder zumindest trennen wir eine Zahl in
ihre beiden Summanden, alle möglichen Möglichkeiten.

00:18:33,120 --> 00:18:35,040
Ja, wir erhalten hier mehrere Lösungen.

00:18:35,040 --> 00:18:37,520
Wobei das Abfragen einer Haskell-Funktion
nicht einmal Sinn macht.

00:18:37,520 --> 00:18:40,320
Bei einer Haskell-Funktion geben wir zwei
Eingaben und wir erwarten die Ausgabe.

00:18:41,040 --> 00:18:43,280
Genau eine, genau eine Ausgabe.

00:18:44,480 --> 00:18:45,120
Okay.

00:18:45,120 --> 00:18:46,640
Wohingegen wir hier eine weitere Auswahl haben, richtig?

00:18:46,640 --> 00:18:50,640
Man könnte auch sagen, wie lautet die Frage,
ist das N so, dass N plus eins zwei ist?

00:18:50,640 --> 00:18:52,080
Also, was ist der Vorgänger von zwei?

00:18:52,640 --> 00:18:55,840
Nun, dann wird Prolog sagen,
nun, die Antwort ist dies.

00:18:56,720 --> 00:19:00,960
Also, hier haben wir in der Tat das
Additionsprädikat im Grunde genommen in

00:19:01,760 --> 00:19:06,080
eine Subtraktion verwandelt, denn es ist das gleiche wie
die Frage: "Was ist zwei minus eins?"

00:19:07,040 --> 00:19:09,600
Okay.
Und dann können wir auch überambitioniert werden und

00:19:09,600 --> 00:19:12,960
uns fragen, na ja, was wäre, wenn ich
das nur mit Variablen aufrufe.

00:19:14,000 --> 00:19:19,600
Ja, ich schreibe das konkrete Programm, das
ausdrückt, wenn zwei Zahlen zusammen addiert

00:19:19,600 --> 00:19:25,040
eine bestimmte Zahl ergeben, und dann frage ich Prolog: Na ja,
was sind N, M, O, so dass die Addition von N, M O ergibt?

00:19:27,520 --> 00:19:31,520
Okay, also werden wir das jetzt nicht berücksichtigen.

00:19:31,520 --> 00:19:33,760
Wenn wir dies also tun würden, dann würden Sie sehen, dass

00:19:34,320 --> 00:19:39,280
manchmal nicht alle möglichen Arten,
ein Prädikat zu verwenden, gleich nützlich sind.

00:19:39,280 --> 00:19:42,400
Aber gut, die ersten beiden
hier sind sicherlich nützlich.

35 # slide
00:19:46,480 --> 00:19:49,120
In der Tat ist der Fall aus dem Beispiel

00:19:50,000 --> 00:19:58,000
in dem ich im Grunde das Ergebnis und einen der
Summanden fest und fragte nach dem anderen Summanden.

00:19:58,720 --> 00:20:04,240
Ich sagte, das ist wie bei der Subtraktion, wo wir
das sogar als Programm explizit machen können, oder?

00:20:04,240 --> 00:20:08,320
Wir können sagen, gut, wir haben unsere
Additionsfunktion in Form eines Prädikats geschrieben.

00:20:08,320 --> 00:20:10,640
Und dann will ich sagen, was Subtraktion ist.

00:20:10,640 --> 00:20:14,400
Und anstatt ein separates Programm
für die Subtraktion zu schreiben, das auch einige

00:20:14,400 --> 00:20:18,560
Pattern-Matches für Nullfall, Nicht-Nullfall,
etc. hat, sage ich einfach, na ja,

00:20:19,280 --> 00:20:25,840
die Subtraktion von X und Y ist Z, wenn, und
in der Tat, wenn und nur wenn, Z plus Y gleich X ist, richtig?

00:20:25,840 --> 00:20:29,600
Dies drückt also eine Beziehung aus
zwischen Addition und Subtraktion.



00:20:29,600 --> 00:20:35,440
Und indem ich das tue, erhalte ich kostenlos
ein Subtraktionsprädikat, das

00:20:36,240 --> 00:20:37,600
Subtraktionen berechnet.

00:20:37,600 --> 00:20:39,440
Das ist nichts, was man in Haskell machen kann.

00:20:39,440 --> 00:20:43,600
Man schreibt eine Additionsfunktion und sagt dann einfach:
Nun, Subtraktion ist das Gegenteil oder die Umkehrung.

00:20:43,600 --> 00:20:44,560
Das kann man nicht machen.

00:20:44,560 --> 00:20:46,640
Sie müssen eine separate Subtraktionsfunktion schreiben.

00:20:46,640 --> 00:20:50,400
Hier in Prolog, auf der logischen Ebene,
haben Sie die Addition logisch definiert.

00:20:51,040 --> 00:20:56,160
Und übrigens, X minus Y ist Z, wenn
es der Fall ist, dass Z plus Y gleich X ist.

00:20:57,120 --> 00:20:58,720
Und dann können wir das zum Subtrahieren verwenden.

00:20:59,760 --> 00:21:02,160
Auch wenn wir nicht explizit
eine Subtraktion beeinflussen.

00:21:02,160 --> 00:21:03,680
Darf ich fragen, was zwei minus eins ist?

00:21:03,680 --> 00:21:04,640
Und die Antwort wäre eins.

00:21:05,760 --> 00:21:12,560
Oder man könnte auch fragen, zum Beispiel, was
sind N und M, so dass N minus M eins ist?

00:21:13,360 --> 00:21:13,860
Ja.

00:21:14,640 --> 00:21:18,560
Hier gibt es sehr viele mögliche Lösungen.

00:21:18,560 --> 00:21:18,960
Oder?

00:21:18,960 --> 00:21:20,880
Zum Beispiel zwei und eins.

00:21:20,880 --> 00:21:24,640
Also, N ist zwei und M ist
eins, wäre eine mögliche Antwort.

00:21:24,640 --> 00:21:26,960
Denn dann haben wir zwei minus eins ist eins.

00:21:26,960 --> 00:21:30,080
Aber eigentlich ist Prolog hier noch cleverer.

00:21:30,080 --> 00:21:31,920
Prolog antwortet etwa so,

00:21:31,920 --> 00:21:36,000
um uns zu sagen: Ja, es gibt Auswahlmöglichkeiten für
N und M, so dass N minus M eins ist.

00:21:36,000 --> 00:21:37,120
Und was sind diese Möglichkeiten?

00:21:37,120 --> 00:21:40,160
Nun, jede Wahl, bei der N Nachfolger von M ist.

00:21:40,880 --> 00:21:46,640
Dies drückt also auf eine endliche Weise unendlich
viele Paare aus, die dieses Prädikat erfüllen.

00:21:47,440 --> 00:21:50,640
Wieder etwas, das in Haskell nicht funktionieren würde.

00:21:50,640 --> 00:21:53,840
Denn dort bekommt man solche symbolischen Antworten nicht.

00:21:53,840 --> 00:21:57,840
Man kann nur konkrete
Eingaben geben und eine konkrete Ausgabe erhalten.

