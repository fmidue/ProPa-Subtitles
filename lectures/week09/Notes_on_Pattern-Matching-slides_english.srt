145 # slide
00:00:01,680 --> 00:00:09,040
Let me give some final notes
on pattern-matching

00:00:10,000 --> 00:00:15,680
that will be important for general understanding
of how evaluation in Haskell works, but also some

00:00:15,680 --> 00:00:24,800
concrete hints and comments about things that you
might do or maybe avoid in the exercise tasks.

146 # slide
00:00:28,480 --> 00:00:32,880
First, this comment that was already made
before, namely that pattern-matching is what

00:00:32,880 --> 00:00:38,960
drives evaluation in Haskell. So, ultimately, to
understand how functions are evaluated in Haskell,

00:00:38,960 --> 00:00:45,680
it boils down to how pattern-matching works
even when it's not obvious from the syntax of

00:00:45,680 --> 00:00:49,760
the program that pattern-matching is involved. We
have seen list comprehensions so far, for example,

00:00:49,760 --> 00:00:53,440
but they will also be the sugar to something that
is also completely driven by pattern-matching.

00:00:53,440 --> 00:01:00,320
We have seen guards, but they, again, are the
sugar to something using direct pattern-matching.

00:01:00,320 --> 00:01:06,640
Pattern-matching is what explains how functions
are evaluated. I will make another video where I show this

00:01:06,640 --> 00:01:14,080
on this example using lists. So again, we
have to make the switch from the explicit list

00:01:14,080 --> 00:01:19,280
representation and the Nil-Cons representation
for lists. We will see this in action.

00:01:19,280 --> 00:01:23,600
And in this simple example it will explain
why when we have this expression,

00:01:24,240 --> 00:01:30,960
where we have some function which is something
similar to a map function, and then we do head

00:01:30,960 --> 00:01:37,040
of tail, then we don't really need to perform
all the computations that one might initially

00:01:37,040 --> 00:01:44,960
think, if one just sees that, apparently this f
function applies g to all its list input elements.

00:01:45,680 --> 00:01:49,600
But in some context, it might be the case that
we don't have to perform all the computations

00:01:49,600 --> 00:01:55,440
that are here. And also, the order in which
things are computed can be of interest and is

00:01:56,000 --> 00:02:01,680
explains why we are looking at pattern-matching.
This will be a very simple example that I will

00:02:01,680 --> 00:02:07,760
make in the whiteboard app. But the same
principles also explain how lazy evaluation

00:02:07,760 --> 00:02:14,800
works on infinite lists, and how we can think, if
we have to think about efficiency of evaluation

00:02:14,800 --> 00:02:20,400
which was not the core topic in this lecture,
obviously. But if we want to understand, as a more

00:02:20,400 --> 00:02:24,560
advanced Haskell programmer, how evaluation works,
then we have to think about pattern-matching.

147 # slide
00:02:29,680 --> 00:02:39,360
Let me talk through two slides with some

00:02:40,160 --> 00:02:45,600
syntax remarks that will be interesting for the
exercises, but also some more general points.

00:02:46,320 --> 00:02:50,640
The first observationâ€¦ an important aspect is
that pattern-matching is not restricted to the

00:02:50,640 --> 00:02:54,960
left-hand side of the function definition as
what we have seen, where I define the function,

00:02:54,960 --> 00:03:01,680
and I give several equations for it, and
on the left-hand side I use patterns like

00:03:01,680 --> 00:03:07,040
Nil or Cons in the function definition. However,
we can also use pattern-matching more explicitly

00:03:07,040 --> 00:03:11,360
on the right-hand side of functions, and then we
do this using the case keyword, which is some kind

00:03:11,360 --> 00:03:18,000
of a more powerful if-then-else if you like, which
is a part of expressions. Here is an example where

00:03:18,000 --> 00:03:24,400
this can become relevant. Also, in the last
exercise and also in the next exercise,

00:03:24,400 --> 00:03:30,480
there are situations where we had to
work with Maybe values. And a typical

00:03:31,760 --> 00:03:36,960
pattern/structure that we might have is that
we have some Maybe thing, and we want to first

00:03:36,960 --> 00:03:44,320
check whether it's Nothing, and if so, then we do
something, and if it's not Nothing, and it's Just

00:03:44,320 --> 00:03:49,440
something, then we want to do something with
the value that was encapsulated in this Just,

00:03:49,440 --> 00:03:54,160
then we would do something like fromJust of this
maybeThing, and then do something with that.

00:03:55,120 --> 00:04:01,920
It is probably how we have indicated or
suggested so far, that we work with Maybe values

00:04:01,920 --> 00:04:07,040
because we didn't have pattern-matching with the
case keyword. But if we have the case keyword

00:04:07,040 --> 00:04:10,800
and we allow ourselves to do pattern-matching
on the right-hand side of function definitions,

00:04:10,800 --> 00:04:15,440
then we would instead be able to write something
like this. So, instead of if-then-else,

00:04:15,440 --> 00:04:20,000
which is working on Booleans where first, we have
to make something which is a Boolean condition,

00:04:20,000 --> 00:04:26,720
we could directly have a case on the maybeThing.
What are the cases? It can be Nothing,

00:04:26,720 --> 00:04:32,320
and then we do something, and otherwise, it's
Just, and then we can bind a variable here,

00:04:32,320 --> 00:04:40,960
and do whatever we want to do in the Just
case and directly use the thing. This is

00:04:40,960 --> 00:04:45,520
like a switch statement, but now for algebraic
data types, not for constant values like in C.

00:04:46,720 --> 00:04:53,920
We can access the encapsulated parts
of the non-nullary data constructor

00:04:53,920 --> 00:05:00,480
via the variables here. At first glance, this
might look very similar, but actually, there are

00:05:01,520 --> 00:05:06,080
important differences that make this the
preferred version, namely in particular

00:05:06,080 --> 00:05:14,480
that the compiler can now again perform, for
example, exhaustive and overlapping checks. Here,

00:05:14,480 --> 00:05:19,280
the compiler just sees an if-then-else. Here, the
compiler sees that we made a case distinction on the

00:05:19,280 --> 00:05:23,520
values of this maybeThing. This has a certain type
and the compiler can check that we covered all

00:05:23,520 --> 00:05:32,720
the cases. Also, here, we can't accidentally try
to access the thing from inside the Just in the

00:05:32,720 --> 00:05:38,960
Nothing case. So, for example, we could also
write fromJust maybeThing in the then branch,

00:05:38,960 --> 00:05:43,280
but this would lead to a runtime error because in
this then branch we have a Nothing. So, we can't

00:05:43,280 --> 00:05:48,880
do fromJust, but the compiler doesn't see this,
whereas here, we wouldn't even be allowed to write

00:05:48,880 --> 00:05:55,120
something referring to this thing in the Nothing
part because it isn't even bound there. So,

00:05:55,120 --> 00:06:02,800
the compiler can give more assurance here. Also,
in terms of efficiency: If this maybeThing is not

00:06:02,800 --> 00:06:10,240
just a variable or a value but a more complicated
expression, then here, we could accidentally

00:06:12,560 --> 00:06:16,960
forget to do common subexpression elimination.
We would have an expression here. And the same

00:06:16,960 --> 00:06:20,960
expression maybe here again. We will compute the
thing several times, whereas here, it's clear. We

00:06:20,960 --> 00:06:27,360
compute it once, do the checks, and then we have
direct access to the thing. We don't have to do

00:06:27,360 --> 00:06:34,560
some function calls again to get the inner value.
So, it is directly provided via this binding.

00:06:36,160 --> 00:06:43,200
This is specific for the Maybe type, but the same
strategy applies to other types: our own defined

00:06:43,200 --> 00:06:50,560
algebraic datatypes, but also for the list types.
So far, since we didn't have pattern matching

00:06:50,560 --> 00:06:57,280
presented in the lecture before, you often
programmed with null tests and head and tail

00:06:58,400 --> 00:07:06,480
accessors. Preferably, from now on, work with
case expressions. Instead of head and tail,

00:07:06,480 --> 00:07:11,520
you could have something like: case your list
thing of empty list, do whatever you want to do

00:07:11,520 --> 00:07:17,440
in that case, Cons case, do whatever you want to
do with the head element and the tail element,

00:07:17,440 --> 00:07:25,120
but without calling head and tail functions,
actually. One final thing to say about this:

00:07:25,120 --> 00:07:31,520
we might also start nesting case expressions.
We could maybe have another case expression

00:07:31,520 --> 00:07:39,840
in the right-hand side here to match on some
other thing, be the maybeThing or a list

00:07:39,840 --> 00:07:46,160
thing, then we have to be careful in terms of
layout, so, not by accident that this is indented

00:07:46,960 --> 00:07:53,440
compared to this case. So, if we make further
case distinctions here with case of, then we also

00:07:53,440 --> 00:07:58,880
have to be careful with the layout because, as you
know, Haskell is a layout-sensitive language. So,

00:07:58,880 --> 00:08:02,640
it is worthwhile to use a Haskell editor
(a Haskell-recognizing editor) for this

00:08:02,640 --> 00:08:05,600
because it will help you indent your expressions.

148 # slide
00:08:11,040 --> 00:08:17,280
Finally, here I want to point out the potential
trap that beginners, in particular, sometimes

00:08:17,280 --> 00:08:23,040
fall into, namely misunderstanding what
pattern matching means for the variables

00:08:23,040 --> 00:08:28,320
bound in them. Pattern matching always binds
the variables (the names that occur in the

00:08:28,320 --> 00:08:35,200
patterns) and that might shadow existing things
of the same name, which might not sound like the

00:08:36,640 --> 00:08:42,080
thing that you might stumble upon. But there
are situations where this can be confusing for

00:08:42,080 --> 00:08:48,800
beginners. For example, if you work with the
CodeWorld Color type for which you probably

00:08:48,800 --> 00:08:54,480
know that there are some constant values
like the actual colors red, green, etc.,

00:08:54,480 --> 00:09:01,120
then you might be tempted to try to write a
function on Colors via pattern matching thinking:

00:09:03,200 --> 00:09:07,680
When I want to detect the primary Colors, I can
have some simple cases like matching against red,

00:09:07,680 --> 00:09:12,240
green, blue and saying True in these
cases, and for other cases, saying False.

00:09:12,960 --> 00:09:19,280
But that's not doing what the author of this code
thought it would be doing. Why is that not doing

00:09:19,280 --> 00:09:23,920
what they thought this would be doing? Because
red here is a variable. So, this is not a data

00:09:23,920 --> 00:09:29,040
constructor. Data constructors are written with
uppercase. This "red" here is a value constant,

00:09:29,040 --> 00:09:34,400
but it is not a data constructor. With something
like this written, then actually this "red" could

00:09:34,400 --> 00:09:40,880
as well be x. It is treated as a variable. It's
not this constant here. So, this is not doing what

00:09:40,880 --> 00:09:47,600
we expected, and the compiler will complain
about this depending on the warning levels that

00:09:47,600 --> 00:09:52,480
are used. So, for example, it could complain about
shadowing, saying that this variable name here

00:09:52,480 --> 00:09:58,480
shadows the existing value "red" imported from
the CodeWorld library, or the compiler might also

00:09:58,480 --> 00:10:03,120
complain that there are overlapping cases because
if this is just a variable, then this is as well,

00:10:03,120 --> 00:10:08,800
and this is as well, so we have three cases like
primary color x, primary color y, primary z,

00:10:09,600 --> 00:10:15,840
and these are of course exactly the same
rule up to the name of the x, y, or z.

00:10:15,840 --> 00:10:21,440
So, the compiler has many reasons to complain
about code like this, which was written in the

00:10:21,440 --> 00:10:27,040
wrong understanding of what pattern matching does
here. It doesn't match against these constants;

00:10:27,040 --> 00:10:31,680
it uses these as variables. The situation is
different from number constants because they are

00:10:31,680 --> 00:10:39,840
constructors. Or if you have some enumeration
where you have some constantâ€¦ some nullary data

00:10:39,840 --> 00:10:44,453
constructors, then of course you can use them
here, but that's not what the red Color is. It

00:10:44,453 --> 00:10:50,080
is not a data constructor. It is a variableâ€¦
a constant value, but not a data constructor.

00:10:51,520 --> 00:10:58,080
So, be careful of something like
thisâ€¦ this misunderstanding.
