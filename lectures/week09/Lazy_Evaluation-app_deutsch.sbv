0:00:01.440,0:00:03.440
Okay, das ist also das versprochene Video

0:00:03.440,0:00:07.760
darüber, wie Pattern-Matching die
lazy evaluation in Haskell antreibt.

0:00:08.560,0:00:15.200
Und ihr solltet es euch am besten ansehen, während ihr
die Folien bei Folie 150 geöffnet haben.

0:00:15.200,0:00:20.080
Denn dort habe ich die Funktionsdefinitionen,
die ich verwenden werde.

0:00:20.640,0:00:24.160
Ich werde sie hier also nicht wiederholen,
aber sie befinden sich auf dieser Folie.

0:00:25.040,0:00:29.840
Und auf der Folie befindet sich auch dieser
Ausdruck, den ich, glaube ich, auswerten wollte.

0:00:30.960,0:00:33.600
Und nun, lassen Sie uns das angehen.

0:00:33.600,0:00:35.040
Okay, Sie haben also eine Definition von f

0:00:35.040,0:00:36.880
und Sie wissen, was Kopf und Rest sind.

0:00:36.880,0:00:38.640
Wie werten wir das nun aus?

0:00:39.440,0:00:42.480
Nun, man könnte sagen, nun, lassen Sie uns einfach
dieses 3+1 zu 4 auswerten.

0:00:42.480,0:00:43.440
Aber das wäre falsch.

0:00:43.440,0:00:47.120
Denn wir wollen nur bei Bedarf auswerten.

0:00:47.120,0:00:49.680
Man will nur das auswerten
Dinge auswerten, die tatsächlich benötigt werden.

0:00:49.680,0:00:54.160
Und das können wir jetzt nicht im Voraus sagen, dass
das irgendwann gebraucht wird, diese 4.

0:00:54.160,0:00:56.560
Weil vielleicht dieses f dieses Element verwirft.

0:00:56.560,0:01:00.560
Und dann sollten wir nicht 3+1 berechnen,
ist 4, wenn wir das Ding nicht benutzen werden.

0:01:00.560,0:01:02.400
Wie gehen wir also stattdessen vor?

0:01:02.400,0:01:06.320
Nun, wir müssen sehen, was wir wissen müssen, um
zu wissen, was das Ergebnis dieser Rechnung ist.

0:01:06.320,0:01:08.320
Nun, wir müssen wissen, was der Kopf von etwas ist.

0:01:08.880,0:01:12.560
Und das können wir nicht tun, ohne dass wir
dieses Etwas berechnet haben, zumindest was

0:01:12.560,0:01:15.440
zumindest so weit, dass wir wissen, was der Kopf ist, okay.

0:01:15.440,0:01:17.760
Deshalb müssen wir also hineingehen.

0:01:17.760,0:01:22.160
Nun, wir können das Ende von etwas nur berechnen
Rest von etwas berechnen, wenn wir zumindest

0:01:22.160,0:01:24.240
wissen, ob dieses Etwas
die leere Liste ist oder nicht.

0:01:24.240,0:01:27.840
Also müssen wir dieses f der Liste berechnen.

0:01:27.840,0:01:30.720
Wenn Sie sich nun die Folie ansehen, die
Definition von f anschaut, dann ist es definiert durch

0:01:31.280,0:01:34.480
Fallunterscheidungen durch Pattern-Matching auf
die leere Liste oder die nicht leere Liste.

0:01:35.120,0:01:35.360
Richtig?

0:01:35.360,0:01:40.160
Es gibt also keinen Fall für Listen mit zwei Elementen,
aber es hat diesen Fall mit der leeren Liste oder mit

0:01:40.160,0:01:43.280
dem cons-Konstruktor (:) zwischen
einigen Variablen x und xs.

0:01:44.320,0:01:47.200
Okay, wie gehen wir dann hier vor?

0:01:49.200,0:01:52.960
Nun, wir sollten uns vor Augen halten, wie

0:01:53.680,0:02:03.600
diese Liste eigentlich dargestellt wird,
nämlich in etwa so, richtig?

0:02:07.200,0:02:09.680
In dieser Listenperspektive der Datenkonstruktoren.

0:02:09.680,0:02:14.480
Und wenn Sie sich dann die Definition von
f anschaut, dann gibt es einen Fall für x:xs.

0:02:14.480,0:02:16.640
Dies wird also x und dies wird xs sein.

0:02:17.280,0:02:25.760
Innerhalb dieses Kopf-Rest-Kontextes verwenden wir also
die rechte Seite der zweiten f-Gleichung.

0:02:26.560,0:02:32.960
Und das bedeutet dann, dass wir
g auf x anwenden sollten, also auf diese 3,

0:02:34.480,0:02:38.400
und cons (:) und f auf den Rest der Liste anwenden.

0:02:39.440,0:02:41.840
Genau auf diese Liste.

0:02:41.840,0:02:45.120
Und noch einmal, wir werten die
3+1 zu 4 an dieser Stelle.

0:02:45.120,0:02:48.800
Denn wir sind noch nicht sicher
dass dies tatsächlich benötigt wird.

0:02:48.800,0:02:51.280
Dies ist also der nächste Ausdruck
den Sie sich ansehen sollten.

0:02:52.080,0:02:55.200
Okay, dann müssen wir wieder sehen
was müssen wir berechnen, wo

0:02:55.200,0:02:58.720
wir den Kopf von etwas haben wollen, also sollten wir
wissen, was der Kopf der Sache ist.

0:02:58.720,0:03:02.160
Wir sollten uns den Datenkonstruktor
für die nicht leere Liste.

0:03:02.720,0:03:04.480
Wir können also noch nicht den Kopf berechnen.

0:03:05.360,0:03:08.720
Wir müssen das Ding berechnen,
das darin verschachtelt erscheint.

0:03:09.600,0:03:12.160
Okay, sollten wir jetzt vielleicht g 3 berechnen?

0:03:12.720,0:03:13.760
Nein, das sollten wir nicht.

0:03:13.760,0:03:17.280
Denn der Rest wird diesen Teil einfach abschneiden.

0:03:17.280,0:03:21.360
Also, das Ende einer nicht-leeren Liste
ist der Rest dieser Liste.

0:03:21.920,0:03:30.320
Also, ja, ähnlich wie bei der Definition von 'head'
würde die Definition von 'tail' so aussehen.

0:03:30.320,0:03:31.680
Dieses x wird also nicht verwendet.

0:03:31.680,0:03:35.680
Wir sollten also das g 3 nicht berechnen,
das wäre eine überflüssige Berechnung.

0:03:36.720,0:03:38.720
Das wäre nicht lazy, aber wir wollen ja lazy sein.

0:03:40.640,0:03:47.200
Okay, also stattdessen, Rest von etwas
Restliste ist die Restliste.

0:03:47.760,0:03:59.840
An diesem Punkt werden wir also einfach
auf dieses f der Singleton-Liste projizieren.

0:04:00.400,0:04:01.440
Das ist also der nächste Schritt.

0:04:03.040,0:04:04.080
Dies nicht zu berechnen.

0:04:05.120,0:04:06.960
Okay, also wird g 3 niemals berechnet.

0:04:07.760,0:04:10.480
Okay, wir haben also wieder den Kopf von etwas,

0:04:10.480,0:04:14.400
wir können den Kopf noch nicht berechnen, wir müssen
das Ding innerhalb dieser Klammern berechnen.

0:04:15.120,0:04:15.920
Und was ist das?

0:04:15.920,0:04:18.240
Das ist ein f-Aufruf, es ist nicht die leere Liste.

0:04:19.440,0:04:20.960
Es ist im Grunde genommen f für das hier.

0:04:20.960,0:04:23.440
Es gilt also wieder die zweite Gleichung von f.

0:04:23.440,0:04:24.480
Und was macht sie?

0:04:24.480,0:04:28.000
Nun, in diesem Kontext, natürlich,

0:04:28.000,0:04:32.960
erhalten wir einen g-Aufruf für das erste Argument
auf das erste Element dieser Liste.

0:04:35.120,0:04:37.600
Und wieder berechnen wir nicht die
3+1 an diesem Punkt,

0:04:37.600,0:04:39.680
denn es ist noch nicht klar, dass wir das brauchen werden.

0:04:40.880,0:04:43.040
Und was ist der Rest dieses Aufrufs?

0:04:43.040,0:04:48.960
Nun, es ist f, das auf die Restliste angewendet wird, und
Nun, die Restliste ist hier das zweite Argument.

0:04:48.960,0:04:49.920
Es ist die leere Liste.

0:04:53.680,0:04:57.440
Okay, jetzt können wir tatsächlich den Kopf
berechnen, weil wir jetzt innerhalb der

0:04:57.440,0:05:03.240
Argumentposition des Kopfes, haben wir wirklich
etwas in der Form Kopfelement Restliste.

0:05:04.640,0:05:10.640
Okay, also reduziert sich das jetzt auf g(3+1).

0:05:10.640,0:05:13.280
Und wieder haben wir nicht berechnet
das f der leeren Liste.

0:05:13.280,0:05:14.480
Das wird natürlich die leere Liste sein.

0:05:14.480,0:05:16.080
Aber wir berechnen das an dieser Stelle nicht.

0:05:16.080,0:05:17.760
Denn dies wird von der head-Funktion verworfen;

0:05:17.760,0:05:21.040
berechnen wir nicht einige Unterausdrücke
die nicht benötigt werden.

0:05:21.840,0:05:25.120
Und was benötigt wird,
finden wir über Pattern-Matching heraus.

0:05:26.160,0:05:27.120
Okay, das haben wir also.

0:05:27.760,0:05:31.120
Jetzt müssen wir die 3+1 berechnen,
denn wenn Sie sich die Definition von

0:05:31.120,0:05:33.760
g auf der Folie anschauen, dann sehen Sie,
dass es Pattern-Matching durchführt.

0:05:33.760,0:05:37.840
Wir müssen also wissen: Ist dieses erste
Argument eine bestimmte Konstante, die

0:05:37.840,0:05:41.920
im ersten Teil der g-Funktion vorkommt?

0:05:41.920,0:05:45.600
Okay, um das zu entscheiden, müssen
wir nun diesen Wert berechnen.

0:05:46.240,0:05:50.080
Okay, also berechnen wir jetzt g 4.

0:05:50.080,0:05:51.600
Nun, wir haben dies auf 4 reduziert.

0:05:51.600,0:05:53.280
Also müssen wir jetzt g 4 berechnen.

0:05:54.320,0:05:57.520
Okay, sehen wir uns noch einmal die
Definition von g, sie testet zwei Fälle.

0:05:57.520,0:05:59.920
Der erste Fall stimmt nicht überein
hier nicht überein, weil wir eine andere

0:05:59.920,0:06:04.960
konstante Zahl im ersten Fall
des g-Aufrufs der g-Definition.

0:06:04.960,0:06:09.120
Also müssen wir den zweiten Fall anwenden und
der zweite Fall ist g n ist n+1.

0:06:09.760,0:06:11.040
Okay, jetzt ist es also so,

0:06:11.040,0:06:13.840
natürlich, die Vier,
also reduziert sich das auf 4+1.

0:06:14.800,0:06:16.240
Und dann bekommen wir 5.

0:06:17.040,0:06:21.920
Okay, das hätten Sie natürlich auch bekommen
wenn Sie das einfach in den Interpreter eingegeben hätten.

0:06:21.920,0:06:24.480
Aber jetzt sehen Sie auch, was der Interpreter im Wesentlichen für

0:06:24.480,0:06:27.760
Schritte der Interpreter machen wird,
um diese 5 hier auszuwerten.

0:06:27.760,0:06:32.480
Und was am wichtigsten ist, Sie werden auch sehen,
welche Teile nicht berechnet werden.

0:06:33.280,0:06:34.160
Oder wann sie berechnet werden.

0:06:34.160,0:06:38.880
Dies wird also nicht im Voraus berechnet, sondern erst
berechnet, wenn wir merken, dass wir es tatsächlich brauchen.

0:06:38.880,0:06:40.160
Und einige Dinge werden nie berechnet.

0:06:40.160,0:06:42.720
g 3 wird nie berechnet.

0:06:42.720,0:06:44.800
Und die leere Liste wird auch nicht vervollständigt.

0:06:45.600,0:06:46.080
Das ist gut.

0:06:46.080,0:06:52.880
Außerdem braucht man diese Perspektive auch, um
einige Argumente wie dieses abgleichen zu können.

0:06:53.680,0:07:00.240
Okay, und die gleiche Art von
Beispiel und Ableitung/Auswertung

0:07:00.240,0:07:09.760
gilt für alle Haskell-Auswertungen,
für alle Haskell-Programme.
