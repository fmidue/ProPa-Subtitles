142 # slide
00:00:01,840 --> 00:00:10,160
Also, willkommen zurück. Letzte Woche haben wir über
algebraische Datentypen gesprochen, und zwar über

00:00:10,720 --> 00:00:17,120
Berechnungen durch Pattern-Matching, was natürlich
nur ein weiterer Weg war, ein zusätzlicher Tag zur

00:00:17,760 --> 00:00:23,520
Programmierung durch Fallunterscheidung. Diesmal ist es so, dass
Fallunterscheidung nicht über if-then-else

00:00:23,520 --> 00:00:31,360
oder Guards, sondern durch Abgleich mit den verschiedenen
Fälle, die der Wert des definierten algebraischen

00:00:31,360 --> 00:00:40,400
Datentyps annehmen kann. Wir werden mit diesem
heute fortsetzen. Insofern werden wir später

00:00:40,400 --> 00:00:45,920
kurz darauf eingehen, wie Pattern-Matching
in Haskell

00:00:45,920 --> 00:00:52,560
im Allgemeinen geht. Im Grunde auch, wie die "lazy" Auswertung
letztlich von Pattern-Matching angetrieben wird. Aber

00:00:52,560 --> 00:00:58,320
bevor wir das tun, werden wir einen Blick auf
Listen, die bisher in der Vorlesung

00:00:58,320 --> 00:01:04,320
eine besondere Behandlung durch eine spezielle Syntax, durch
Listenkomplexe, die es bei anderen Typen nicht gibt.

00:01:04,320 --> 00:01:09,680
beliebige andere Typen. Aber letztlich,
sind Listen auch nur algebraische Datentypen und

00:01:09,680 --> 00:01:13,920
das ist die Verbindung, die wir
in dieser Vorlesung endlich herstellen sollten.

143 # slide
00:01:17,680 --> 00:01:23,440
Stellen wir uns also vor, Haskell hätte noch
keinen vordefinierten Listen-Datentyp hat.

00:01:25,520 --> 00:01:28,160
Dann würden wir selbst einen definieren.
Wir könnten das sicherlich tun

00:01:28,880 --> 00:01:33,520
mit der Art von Definition, die wir letzte Woche
gesehen haben. Und da Listen polymorph sind,

00:01:33,520 --> 00:01:37,440
könnte das in etwa so aussehen. Wir
definieren einen Listen-Datentyp. Er ist parametrisiert

00:01:37,440 --> 00:01:42,160
über einen Parameter, weil wir Listen haben wollen
von Zahlen, Listen von Zeichen, etc. Und dann

00:01:42,160 --> 00:01:48,240
gibt es zwei Fälle: Es gibt die leere Liste, und
aus historischen Gründen wird diese oft Nil genannt.

00:01:49,200 --> 00:01:55,920
Das wäre einer der möglichen Konstruktoren für
beliebige Listen. Und er hat keine Parameter.

00:01:56,640 --> 00:02:01,040
Und auf der anderen Seite gäbe es einen binären
Konstruktor für den Fall von nicht-leeren Listen. Und

00:02:01,040 --> 00:02:09,600
wie soll der heißen? Er wird oft genannt
Cons, für Konstruktor. In gewisser Weise, wenn Liste der

00:02:09,600 --> 00:02:16,320
erste Datentyp ist, den man sich vorstellen kann, dann vielleicht einfach
Konstruktor als Name für den Konstruktor verwenden

00:02:16,320 --> 00:02:18,560
Sinn ergibt. Nil und Cons: Nil ist der leere
List-Konstruktor für die Konstruktion einer leeren Liste.

00:02:18,560 --> 00:02:24,800
Cons ist für die Konstruktion einer nicht leeren Liste. Und
was sind dann die Argumente? Ein Element des

00:02:24,800 --> 00:02:29,200
Trägertyps, des Typs (a), den wir
Elemente in der Liste sehen wollen und dann die

00:02:29,200 --> 00:02:35,440
Rest der Liste. Und dann ein rekursives Vorkommen von
was? Von einer Liste von "a". Das ist sehr ähnlich,

00:02:35,440 --> 00:02:42,000
natürlich dem Baum-Datentyp, den wir letzte Woche
gesehen haben, wo wir Leaf und dann Node mit einem linken

00:02:42,000 --> 00:02:49,200
Nachfolger, einem Label und einem rechten Nachfolger. Wir
haben hier keine zwei rekursiven Vorkommen für die Liste

00:02:49,200 --> 00:02:54,480
weil es sich nicht um einen Baum, sondern nur um eine Liste handelt. Also,
hat sie diese Schräglage nach rechts. Sie hat immer

00:02:54,480 --> 00:02:58,800
genau den richtigen Nachfolger. Natürlich könnten wir
auch als Baum zeichnen, aber das wäre dann ein

00:02:58,800 --> 00:03:04,240
sehr spezieller Baum, der immer nur nach rechts
wächst. Dann ist es letztlich wirklich nur eine Liste.

00:03:04,960 --> 00:03:09,600
Das ist etwas, was wir durchaus einführen könnten.
Und dann, zum Beispiel,

00:03:09,600 --> 00:03:15,120
könnte der Wert so aussehen. Das wäre dann
eine Zwei-Elemente-Liste, die die Zahlen eins

00:03:15,120 --> 00:03:20,800
und zwei beinhaltet, weil wir die nicht leere Liste haben und die
Bezeichnung des Knotens ist eins, und es gibt eine Nachfolgeliste

00:03:21,520 --> 00:03:27,040
Liste, die das spezifische Element zwei hat, und dann
als Nachfolgeliste, die die leere Liste ist. Und

00:03:27,040 --> 00:03:33,280
dies zusammen wäre eine Liste von Ints. Und wie wird
man darüber rechnen? Durch Pattern-Matching. Also,

00:03:33,280 --> 00:03:39,600
wenn wir die Länge einer solchen Liste
aus diesem Datentyp berechnen wollen, dann machen wir eine Fallunterscheidung.

00:03:40,320 --> 00:03:46,880
Wir erhalten eine Liste von etwas zu Int. Das ist
polymorph im Elementtyp hier, weil

00:03:46,880 --> 00:03:52,160
die Berechnung der Länge einer Liste nicht davon abhängt,
was in der Liste gespeichert ist. Wir führen gerade

00:03:52,160 --> 00:03:56,640
Struktur ein. Und dann hatten wir einen Fall für
die leere Liste. Und natürlich ist die Länge dieser Liste

00:03:56,640 --> 00:04:02,160
gleich null. Und für den Fall der nicht leeren Liste
und das spezifische Element, das sich an der ersten

00:04:02,160 --> 00:04:06,720
Position in der Liste steht, ist dafür irrelevant. Also,
haben wir diese anonyme Variable. Aber wir haben eine

00:04:06,720 --> 00:04:11,040
Restliste. Und was ist dann die Länge der
gesamten Liste? Sie ist eins plus die Länge der restlichen

00:04:11,040 --> 00:04:18,960
Liste. Das ist eine sehr einfache Definition, die
uns zeigt, wie wir die Länge einer solchen Liste berechnen können.

144 # slide
00:04:23,920 --> 00:04:29,600
Nun, der Punkt ist, dass das, was wir auf der
vorherigen Folie gesehen haben, genau das ist, wie Listen tatsächlich

00:04:29,600 --> 00:04:34,640
in Haskell implementiert sind. Wir haben einfach nicht
diese Perspektive noch nicht eingenommen. Aber das ist

00:04:34,640 --> 00:04:41,680
so ist es. Letztendlich ist also irgendwo tief
in den Standarddefinitionen von Haskell, also,

00:04:41,680 --> 00:04:46,960
im Code, den wir als Benutzer normalerweise nicht sehen,
würden wir so etwas wie das hier finden. Das ist natürlich,

00:04:46,960 --> 00:04:52,480
sieht es ein wenig seltsam aus, weil es jetzt nicht
List und Nil und Cons, sondern vielmehr einige Symbole.

00:04:52,480 --> 00:04:58,320
Aber das sind die Symbole, die wir gewohnt sind
von der Listensyntax in Haskell kennen. Also, im Wesentlichen,

00:05:02,000 --> 00:05:06,400
werden Listen also auch nur als algebraische
Datentypen eingeführt. Also, es gibt den Typ der Liste (a)

00:05:06,400 --> 00:05:11,360
und er wird mit diesen eckigen Klammern geschrieben. Es
gibt es zwei Fälle: Der eine Fall ist der Nil-Konstruktor,

00:05:11,360 --> 00:05:16,560
aber er wird nicht als Nil geschrieben, sondern
als leere Liste, wie wir sie bisher gesehen haben,

00:05:16,560 --> 00:05:23,040
und dann gibt es noch den Cons-Konstruktor. Und für
diesen wird der einfache Doppelpunkt (:) verwendet. Dieses

00:05:23,040 --> 00:05:28,160
wird hier als Präfix-Operator verwendet. Er kann aber auch
infix geschrieben werden. Und was sind die Argumente von

00:05:28,160 --> 00:05:33,680
dieses Konstrukts? Zunächst ist da nur ein Element
vom Typ a und dann gibt es ein rekursives

00:05:33,680 --> 00:05:39,440
Auftreten einer Liste von a, die nun natürlich auch mit
dieser Listensyntax geschrieben wird. Aber anders

00:05:39,440 --> 00:05:46,480
als diese Namen der Operatoren
im Daten- und Typkonstruktor, ist dies genau

00:05:46,480 --> 00:05:51,840
die gleiche Definition wie auf der vorherigen Folie.
Und so werden Listen in Haskell definiert.

00:05:52,480 --> 00:05:57,200
Es ist nur nicht etwas, das dem Programmierer
explizit angezeigt wird. Sie werden diese Definition

00:05:57,200 --> 00:06:00,960
nie in dieser Form sehen, denn Listen sind
bereits vorhanden sind. Wir brauchen sie nicht zu definieren

00:06:00,960 --> 00:06:07,760
selbst definieren. Was bedeutet das dann? Listen, wie wir sie
bisher gesehen haben. Normalerweise haben wir bis jetzt

00:06:07,760 --> 00:06:11,760
eine Syntax wie diese verwendet. Also, in eckigen Klammern,
werden die Elemente nacheinander mit einem

00:06:11,760 --> 00:06:19,120
Komma. Das ist einfach syntaktischer Zucker für den eigentlichen
diesen Ausdruck, der besagt, dass es sich um eine Cons,

00:06:19,120 --> 00:06:25,280
also ist es keine leere Liste. Es ist eine nicht-leere
Liste. Sie hat ein aktuelles Element, das das

00:06:25,280 --> 00:06:30,160
erste Argument dieses Doppelpunktes ist, jetzt geschrieben
Infix-Syntax. Es ist das erste Listenelement,

00:06:30,160 --> 00:06:34,400
also sollte es die 1 sein. Dann gibt es die
Restliste, die wiederum eine nicht leere Liste ist, weil sie die

00:06:34,400 --> 00:06:38,720
2 enthält. Und nun, wie wird
sie in dieser algebraischen Datentyp

00:06:38,720 --> 00:06:44,320
Syntax dargestellt? Sie ist eine nicht leere Liste. Sie hat also
diesen Cons-Konstruktor. Sie hat das aktuelle

00:06:44,880 --> 00:06:51,040
Element 2. Und es hat die restliche Liste. Und diese
Restliste ist die leere Liste. Also, natürlich können wir

00:06:51,040 --> 00:06:55,360
es vorziehen, es so zu schreiben, und der
Compiler unterstützt uns, es so zu schreiben.

00:06:55,360 --> 00:07:00,880
Aber unter der Haube wird diese Liste
wie folgt dargestellt. Und dann,

00:07:01,840 --> 00:07:07,600
da dieser Operator vordefiniert ist, rechts assoziativ zu sein
assoziativ ist, brauchen wir diese Klammern hier nicht.

00:07:07,600 --> 00:07:12,160
Eigentlich können wir diese Liste [1,2] auch in
dieser Form schreiben. Und das ist völlig gleichwertig. Also,

00:07:12,160 --> 00:07:18,640
konvertiert der Compiler stillschweigend zwischen
diesen beiden Notationen konvertieren, wo immer es nötig ist.

00:07:20,480 --> 00:07:26,160
Und diese Notation ist natürlich diejenige, die
wir für das Pattern-Matching verwenden, weil wir

00:07:26,160 --> 00:07:33,440
eine Liste in ihren Kopf und den Rest zerlegen wollen, die Liste
per Pattern zerlegen wollen, dann können wir das ganz einfach tun

00:07:33,440 --> 00:07:39,280
so wie wir es in der vorigen Woche für die
Knoten eines Baumes, oder auf der vorherigen Folie,

00:07:39,280 --> 00:07:47,680
konnten wir gegen das Cons-Element
und Restliste. Aber dafür müssen wir

00:07:47,680 --> 00:07:53,520
die Verbindung zwischen den Listen, wie wir
sie bisher gesehen haben, und dieser Datentypansicht

00:07:53,520 --> 00:07:58,240
von Listen und wie diese realisiert wird, nämlich mit
diesem rechtsassoziativen Operator, wobei immer,

00:07:58,240 --> 00:08:03,640
nach links, wir schreiben infix, haben wir das
aktuelles Element, und dann die restliche Liste.

145 # slide
00:08:06,400 --> 00:08:13,680
Schauen wir uns also einige Definitionen von Funktionen
auf Listen an, die wir bisher schon verwendet haben,

00:08:13,680 --> 00:08:17,120
aber noch nicht die Definitionen
davon. Dies ist die Funktion length.

00:08:17,120 --> 00:08:23,920
Und sie ist genauso definiert wie vor zwei Folien, wo
ich mit der Nil-Cons-Syntax für Listen, aber jetzt

00:08:23,920 --> 00:08:29,200
verwendet sie die symbolische Syntax. Also, wir
haben den Basisfall, der einfach mit

00:08:29,200 --> 00:08:34,240
dieses Nullary-Konstrukt der leeren Liste. Und natürlich
ist die Länge einer leeren Liste natürlich null. Diese

00:08:34,240 --> 00:08:40,960
ist eine polymorphe Liste, und wir kümmern uns nicht um den
Elementtyp. Und die leere Liste wird auf 0 abgebildet.

00:08:40,960 --> 00:08:47,200
Und was ist mit der nicht leeren Liste? Die nicht leere
Liste wird definitiv zerlegbar sein in einen

00:08:47,200 --> 00:08:52,480
Kopf zerlegbar sein, was hier ignoriert wird, weil wir uns nicht
das Element nicht interessiert. Und dann dieser symbolische

00:08:52,480 --> 00:08:58,000
Cons-Konstruktor und der Rest der Liste. Und dann, die
rechte Seite ist 1 + Länge der Restliste.

00:09:00,640 --> 00:09:04,880
Viele Listenfunktionen, wenn wir uns ihre
Definitionen ansehen, werden so definiert, mit dem

00:09:05,440 --> 00:09:10,000
Fall der leeren Liste und genau dem Fall der nicht leeren
Listenfall. Wir können auch zusätzliche Fälle haben.

00:09:10,000 --> 00:09:16,960
Zum Beispiel könnten wir explizite Pattern haben...
explizite Regeln für Singleton-Listen oder Listen

00:09:16,960 --> 00:09:23,920
die aus genau 2 Elementen bestehen. Und dann, vielleicht
ein rekursiver Fall für Listen der Länge von mindestens zwei

00:09:23,920 --> 00:09:28,480
oder so etwas. Aber oft werden wir genau diese beiden Fälle haben
zwei Fälle: eine leere Liste und eine nicht leere Liste.

00:09:31,120 --> 00:09:36,000
Eine andere Funktion: die append-Funktion,
auch der (++) Operator, wenn er infix geschrieben wird,

00:09:36,000 --> 00:09:41,440
eigentlich. Aber hier definiere ich 'append' als ein Präfix
Funktion, die zwei Listen eines bestimmten Typs annimmt

00:09:41,440 --> 00:09:46,080
und eine Liste desselben Typs zurückgibt. Wie wird
sie definiert? Eine Möglichkeit, sie zu definieren, ist

00:09:46,080 --> 00:09:50,960
durch Fallunterscheidung beim ersten Argument,
So kann die erste Liste leer sein, und dann,

00:09:51,680 --> 00:09:55,520
wenn wir diese mit einer anderen Liste anhängen,
dann erhalten wir einfach diese andere Liste.

00:09:55,520 --> 00:10:00,400
Oder die erste Liste kann nicht leer sein, dann
zerfällt sie in das erste Element und eine

00:10:00,400 --> 00:10:08,400
Restliste. Und wenn wir diese Liste dann an eine neue
oder eine beliebige andere Liste ist was? Es ist eine Liste

00:10:08,960 --> 00:10:17,520
die mit x beginnt und dann einen rekursiven Aufruf hat
zur Berechnung der Anfügung der restlichen Liste und

00:10:17,520 --> 00:10:24,000
der zweiten Liste. Was wir hier sehen, ist, dass wir
diesen Datenkonstruktor nicht nur in dem Pattern

00:10:24,560 --> 00:10:30,000
zum Dekonstruieren, sondern auch zum Konstruieren von
neuer Listen verwenden können, was genau der Verwendung der

00:10:30,000 --> 00:10:35,920
Konstruktoren des Typs Baum letzte Woche verwendet haben. Wir
hatten Knoten und Blätter (Leafs) auf der linken Seite als

00:10:35,920 --> 00:10:42,240
Pattern-Teile, wo wir entschieden, welchen Fall wir
anwenden sollten. Und wenn wir neue Trees konstruierten,

00:10:42,800 --> 00:10:47,600
zum Beispiel im insert-Beispiel, dann
wir auch Leaf und Node auf der rechten Seite

00:10:47,600 --> 00:10:51,680
für die Konstruktion neuer Trees. Dasselbe
geschieht hier mit diesen symbolischen Konstruktoren.

00:10:53,520 --> 00:10:58,720
Oder etwa die head-Funktion, die bisher
für uns eine gegebene Funktion war, die von

00:10:58,720 --> 00:11:03,440
irgendwoher kommt. Wo ist sie definiert und wie? Sie hat
einen polymorphen Typ. Diesen Typ kennen wir bereits.

00:11:03,440 --> 00:11:07,840
Wie ist er definiert? Er hat nur einen Fall mit
der Teilfunktion. Eigentlich scheitert er

00:11:07,840 --> 00:11:11,840
wenn wir ihm die leere Liste geben, was wir
vielleicht auch schon erlebt haben. Und

00:11:11,840 --> 00:11:19,120
warum ist das so? Weil sie nur einen Fall von den
erwarteten zwei Fällen für listenverarbeitende Funktionen hat.

00:11:19,120 --> 00:11:23,760
Die head-Funktion hat nur einen Fall, nämlich den
Fall für die nicht leere Liste. Was tut sie?

00:11:23,760 --> 00:11:29,920
Sie vergleicht mit der nicht leeren Liste, ignoriert den
Rest und gibt das Gefundene einfach als linkes

00:11:29,920 --> 00:11:35,120
Argument des Cons-Konstruktors zurück. Und wenn wir
mit einer leeren Liste aufrufen, erhalten wir einen Laufzeitfehler.

00:11:37,840 --> 00:11:42,240
Auch die zip-Funktion war bisher eine primitive
das wir einfach zur Verfügung gestellt haben, ohne uns die

00:11:42,240 --> 00:11:47,280
Definition angesehen haben. Sie könnte wie folgt definiert werden.
Sie nimmt zwei Listen von möglicherweise unterschiedlichen Typen entgegen,

00:11:47,280 --> 00:11:52,800
und gibt eine Liste von Paaren zurück. Wie macht es das?
Es führt Pattern-Matching durch. Und eine Möglichkeit

00:11:53,360 --> 00:11:59,040
ist es, erstens den Fall abzugleichen, in dem
Fall, in dem beide Listen nicht leer sind. Die erste Liste

00:11:59,840 --> 00:12:03,680
zerfällt in ein erstes Element
x und einen Rest, und die zweite

00:12:03,680 --> 00:12:07,680
zerfällt in eine nicht-leere Liste
mit dem ersten Element y und einigem Rest.

00:12:07,680 --> 00:12:14,240
Und was wird dann zurückgegeben? Das Paar (x,y)
und das, was zip für die beiden restlichen

00:12:15,520 --> 00:12:22,080
Listen zurückgibt. Und in diesem Fall kann die eine weitere
Standardregel haben, die in allen Situationen gilt, in denen

00:12:22,080 --> 00:12:27,120
wir nicht diese erste Situation haben, in der beide
Listen mindestens ein Element lang sind. Und in diesem

00:12:27,120 --> 00:12:32,240
Fall wollen wir einfach die leere Liste zurückgeben,
denn wenn wir nicht auf dieses Pattern,

00:12:32,240 --> 00:12:39,440
in dem beide Elemente diese Form haben, dann ist eines
von ihnen die leere Liste sein. Und dann können wir

00:12:39,440 --> 00:12:45,280
ignorieren, was auch immer die konkreten Listen sind
die wir erhalten, ignorieren und einfach die leere Liste zurückgeben.

00:12:48,160 --> 00:12:57,840
Etwas anderes, das hier jetzt deutlich wird
ist, dass dieses Rekursionsmuster oder die Art und Weise

00:12:57,840 --> 00:13:03,360
dass Listen als spezielle Bäume betrachtet werden, die
sich in eine Richtung neigen, Konsequenzen dafür hat

00:13:03,920 --> 00:13:07,840
wie teuer bestimmte Berechnungen sein werden.
Was wir hier in der Funktion 'append' sehen,

00:13:07,840 --> 00:13:13,520
zum Beispiel, dass die Berechnung des Anhängens so viele Schritte erfordert
um das Anhängen zu berechnen, wie: das erste Element hat

00:13:13,520 --> 00:13:19,200
Elemente. Wir sehen die Rekursionen für die erste
Liste. Das zweite Element wird also nie wirklich

00:13:19,840 --> 00:13:26,480
untersucht, aber das Anhängen ist so kostspielig wie die erste
Liste lang ist, denn so viele Schritte müssen wir

00:13:26,480 --> 00:13:32,160
machen müssen. Und das bedeutet, dass das Anhängen eine lineare
Operation in der Länge der ersten Liste. Und

00:13:32,160 --> 00:13:40,320
zum Beispiel auch die Funktion 'last' oder die Indexierung der Liste
ist linear. Die Funktion 'last' ist linear

00:13:40,320 --> 00:13:46,320
und die Länge der Eingabeliste, und die
Index-Funktion... also, das Ausrufezeichen (!!), das ich

00:13:47,280 --> 00:13:56,160
normalerweise nicht in den Übungen verwenden soll...
Dieser Operator braucht so viele Schritte wie lang...

00:13:57,520 --> 00:14:04,080
mindestens proportional zur Anzahl der
des Listenindexes, den Sie betrachten.

00:14:04,640 --> 00:14:16,240
Wenn Sie eine Liste haben und einen Index an Position n,
dann ist das O(n) in Bezug auf die Laufzeitkosten.

146 # slide
00:14:16,240 --> 00:14:22,720
Basierend auf der Zip-Funktion auf der vorherigen Folie,
habe ich bereits darauf hingewiesen, dass wir manchmal die Wahl haben

00:14:22,720 --> 00:14:28,720
wie wir unsere Definitionen strukturieren. Das gilt natürlich,
für alle Funktionen auf beliebigen Datentypen,

00:14:28,720 --> 00:14:35,280
aber hier können wir dies speziell bei
Listen sehen. Und das ist ein typischer Fall, wo man

00:14:35,280 --> 00:14:39,360
dies insbesondere dann in Betracht zieht, wenn man eine
Funktion hat, die auf mehr als einer Liste operiert.

00:14:39,360 --> 00:14:45,920
Also, für die Zip-Funktion könnten wir, vielleicht
als ersten Versuch so geschrieben haben, dass wir,

00:14:45,920 --> 00:14:51,760
zunächst eine Fallunterscheidung für das erste Argument
der Liste unterscheiden und fragen, ob diese Liste leer ist,

00:14:51,760 --> 00:14:56,240
und uns das zweite Argument egal ist, dann
erhalten wir die leere Liste. Und wenn die erste Liste

00:14:56,240 --> 00:15:01,200
nicht leer ist und die zweite leer ist, erhalten wir auch
die leere Liste. Und erst dann haben wir den vollständig

00:15:01,200 --> 00:15:07,600
rekursiven Fall, in dem beide Listen nicht leer sind.
Das ist eine Möglichkeit, diese Definition zu schreiben. Wir

00:15:07,600 --> 00:15:12,160
hätten auch hier anonyme Variablen verwenden können
und hier, natürlich. Aber trotzdem hätten wir dann

00:15:12,160 --> 00:15:18,320
drei Fälle gehabt. Und die Version von der vorherigen
Folie ist völlig gleichwertig. Indem wir, erstens,

00:15:19,280 --> 00:15:24,800
mit diesem Fall abgleichen und dies zu unserer ersten
Wahl. Denken Sie daran: Wenn wir mehrere Gleichungen für

00:15:24,800 --> 00:15:30,400
eine Funktion haben, werden sie von oben nach unten geprüft. Also,
wenn wir dies an die erste Stelle setzen, dann würden wir,

00:15:30,400 --> 00:15:37,520
zuerst den Fall prüfen, dass beide Listen
auf nicht-leer. Und wenn das nicht der Fall ist,

00:15:37,520 --> 00:15:42,400
würden wir sowieso auf einen dieser Fälle stoßen. Wir
können genauso gut sagen, dass alle anderen Fälle

00:15:42,400 --> 00:15:49,760
die leere Liste zurückgeben, wie es auf der vorherigen Folie gemacht wurde.
Das funktioniert eigentlich gar nicht irgendwie nur

00:15:49,760 --> 00:15:55,920
für endliche Listen. Beide Versionen, sowohl die von
der vorherigen Folie, und auch die hier angegebene,

00:15:56,800 --> 00:16:03,680
funktionieren problemlos mit unendlichen Listen. Das liegt daran
weil sie die Listen nur so weit verbrauchen

00:16:03,680 --> 00:16:11,280
so weit wie nötig. Wenn wir zum Beispiel eine
oder zwei in der Liste haben, dann werden wir oft

00:16:12,480 --> 00:16:17,040
diesen Fall, der auf der vorherigen Folie
der erste war, und hier kommt, nachdem wir keine

00:16:17,040 --> 00:16:21,440
eine leere Liste an der ersten oder zweiten Stelle gefunden
Position gefunden haben, und nur wenn eine der Listen

00:16:21,440 --> 00:16:26,160
tatsächlich endlich ist, dann würden wir nach einer endlichen
Anzahl von Schritten in einem dieser

00:16:26,160 --> 00:16:30,080
Fälle, in denen wir die leere Liste zurückgeben. Aber
wenn z.B. beide Listen unendlich sind,

00:16:30,080 --> 00:16:36,640
dann würden wir diese Funktion immer anwenden und
eine unendliche Liste zurückgeben. Und wenn es einen Kontext gibt,

00:16:36,640 --> 00:16:41,920
der nur die ersten 200 Werte aus der
leeren Liste nimmt, dann würde auch die Zip-Funktion nur

00:16:42,880 --> 00:16:48,960
bis zu 200 Elemente tief in ihre beiden Argumente hinab
Argumente hinabsteigen, denn das ist es, was diese Gleichung

00:16:48,960 --> 00:16:56,160
sagt. Sie nimmt ein Element nach dem anderen aus beiden
Listen. So funktioniert auch die Lazy-Evaluation.

00:16:56,880 --> 00:17:08,080
Später werden wir uns ein anderes Beispiel ansehen, in dem
wir darüber sprechen, wie die Auswertung funktioniert. Es ist

00:17:08,080 --> 00:17:12,080
nichts Besonderes über die erste Ordnung hier. Dies ist
eine polymorphe Funktion, die von erster Ordnung ist.

00:17:12,080 --> 00:17:17,440
Wir haben zwei normale Listen (Daten erster Ordnung),
aber auch, wenn wir Funktionen als Argumente haben,

00:17:17,440 --> 00:17:22,720
dann können wir natürlich kein Pattern-Matching mit den
Funktionen durchführen. Wenn wir aber eine Funktion als

00:17:22,720 --> 00:17:28,640
Argument haben, dann funktioniert die Funktionsdefinition durch Groß-/Kleinschreibung
Unterscheidung auf das Listenelement und das Funktionsargument

00:17:29,200 --> 00:17:35,840
wird einfach weitergegeben und dort
verwendet, wie wir auf den nächsten Folien sehen werden.

147 # slide
00:17:40,720 --> 00:17:43,680
Betrachten wir die map-Funktion.
Als ich sie vor zwei

00:17:46,480 --> 00:17:53,280
Wochen vorgestellt habe, habe ich erklärt, dass sie
im Wesentlichen das tut, was eine List-Comprehension

00:17:54,080 --> 00:17:59,680
tut, wenn es eine Funktion auf jedes
Element einer als Generator verwendeten Eingabeliste eine Funktion anwendet,

00:17:59,680 --> 00:18:05,280
aber ich habe auch schon erwähnt, dass das
nicht die Definition von map sein soll. Außerdem,

00:18:05,280 --> 00:18:09,040
ist dies nicht genau die Definition von map, denn
eigentlich wird map wahrscheinlich mit einem anderen

00:18:10,160 --> 00:18:14,560
Kombinator höherer Ordnung in der Prelude definiert.
Das hängt auch von der Compiler-Version oder

00:18:14,560 --> 00:18:19,680
vom konkreten Compiler ab. Ich bin mir da ziemlich sicher,
in ghc nicht genau so definiert ist,

00:18:19,680 --> 00:18:24,320
aber dies ist eine Möglichkeit, die map-Funktion zu definieren. Sie
nimmt ein Funktionsargument, das eine Funktion ist.

00:18:24,320 --> 00:18:29,120
Sie nimmt eine Liste an. Was macht sie? Was muss sie
unterscheiden, ist die Liste die leere Liste? Dann

00:18:29,120 --> 00:18:34,080
was auch immer darüber gemappt wird, es ist immer noch die leere
Liste. Wenn es nicht die leere Liste ist, was passiert dann

00:18:34,080 --> 00:18:40,080
was passiert, wenn wir die Funktion f auf eine nicht-leere
Liste, die aus x und der restlichen Liste besteht? Das erste

00:18:40,080 --> 00:18:44,720
Element der Ergebnisliste sollte das Ergebnis
der Anwendung von f auf x sein, was hier der Fall ist,

00:18:44,720 --> 00:18:50,000
und dann haben wir einen rekursiven Aufruf, der die Funktion
map mit der gleichen Funktion auf die restliche Liste anwendet.

00:18:51,520 --> 00:18:58,320
Und wieder ist dies genau die Art und Weise, wie Berechnungen
funktioniert, angetrieben durch Pattern-Matching.

00:18:59,600 --> 00:19:03,760
Und natürlich können wir ähnliche Dinge mit anderen
Dinge für andere Datentypen tun. Ich habe bereits

00:19:03,760 --> 00:19:08,480
erwähnte dies bereits im Zusammenhang mit der ganzheitlichen
Programmierung erwähnt, dass wir uns zwar hauptsächlich mit

00:19:09,680 --> 00:19:16,320
Listen und Listenberechnungen, auch für
andere Datentypen kann es z.B.,

00:19:16,320 --> 00:19:22,000
Funktionen höherer Ordnung, die den Dingen entsprechen
was bei Listen den List-Comprehensions entspricht.

00:19:22,000 --> 00:19:28,160
Wir haben zwar keine Tree-Comprehensions wie wir
List-Comprehensions haben, aber wir haben Tree-Versionen von

00:19:28,160 --> 00:19:35,120
typischen Funktionen, die wir auf Listen anwenden, um
das gesamte Programm zu erhalten. Also, zum Beispiel,

00:19:35,120 --> 00:19:40,800
gibt es eine treeMap-Funktion, die wir einfach definieren
können, die eine Funktion nimmt, einen Tree

00:19:40,800 --> 00:19:48,080
nimmt, der polymorph in einem Typ ist, und einen Tree
über den anderen Typ zurückgibt, je nachdem, was die Funktion

00:19:48,080 --> 00:19:55,120
von und nach abbildet. Was passiert, wenn wir die Funktion
auf einen leeren Tree abbildet? Dann erhalten wir einen leeren Tree.

00:19:55,120 --> 00:20:00,720
Und für den rekursiven Fall erhalten wir einfach einen neuen
Knoten, während wir die Funktion angewendet haben, um die

00:20:00,720 --> 00:20:07,920
Label an diesem Knoten anwenden, und wir müssen zwei rekursive Aufrufe
der gleichen Funktion mit der Mapping-Funktion.

148 # slide
00:20:13,360 --> 00:20:20,480
Ein weiteres Beispiel. Vorhin erwähnten wir, als wir
über Funktionen höherer Ordnung gesprochen haben, ist die Funktion foldl1

00:20:21,040 --> 00:20:26,320
Funktion, die dort z.B. verwendet wurde,
für die Summierung der Elemente einer Liste.

00:20:26,320 --> 00:20:30,800
Dann habe ich den Plus-Operator (+)
für diesen binären Operator, und einige

00:20:31,680 --> 00:20:39,120
endliche Liste. Das war eine Liste von Zahlen, und wir
den Plus-Operator verwendet, und wir erhielten die Summe

00:20:39,120 --> 00:20:46,080
der Listenelemente. Jetzt können wir uns hoffentlich
vorstellen, wie dies mit dieser Syntax für

00:20:46,080 --> 00:20:52,080
Pattern-Matching definiert wird. Auf dieser Folie möchte ich nicht
genau diesen Operator / diese Funktion definieren,

00:20:52,080 --> 00:20:58,720
sondern stattdessen eine ähnliche Funktion, die Funktion foldr
weil diese bekannter ist und häufiger verwendet wird,

00:20:59,680 --> 00:21:10,080
aber vom Konzept her eine ähnliche Funktion ist. Sie verwendet die
"r"-Abkürzung anstelle von "l", weil sie

00:21:10,080 --> 00:21:15,840
ihren Operator als rechts-assoziativ betrachtet,
während dieser hier links-assoziativ verwendet wurde. Und

00:21:16,560 --> 00:21:22,400
die Eins (1) steht hier für "wir sollten dieser
Funktion eine nicht-leere Liste geben", also eine Liste mit mindestens

00:21:22,400 --> 00:21:27,600
einem Element. Die Funktion foldr funktioniert auch mit einer
leeren Liste, wie wir hier sehen. Sie gibt also etwas

00:21:27,600 --> 00:21:33,360
auch für die leere Liste etwas Nützliches zurück. Und zusätzlich,
hat die Funktion foldl1 Probleme mit unendlichen

00:21:33,360 --> 00:21:41,200
Listen, während foldr mit unendlichen Listen arbeitet, wie wir
grundsätzlich daran erkennen können, dass selbst wenn dies

00:21:41,200 --> 00:21:47,920
eine unendliche Liste wäre, xs also nicht an
nicht enden würde, können wir trotzdem etwas berechnen, denn

00:21:47,920 --> 00:21:53,920
zumindest können wir f aus x und was auch immer berechnen, und
vielleicht wird dieses Was-auch-immer nicht verwendet, abhängig von der

00:21:53,920 --> 00:22:00,160
f. Und dann können wir irgendeinen produktiven Output produzieren
auch wenn wir nie das Ende der Rekursion erreicht haben.

00:22:00,160 --> 00:22:04,480
Das ist etwas, das ich kurz in einem
separaten Video über die Whiteboard-App.

00:22:05,920 --> 00:22:11,280
Was ist also wichtig dabei? Wir haben diese
foldr-Funktion. Sie ist polymorph. Sie nimmt

00:22:11,280 --> 00:22:18,640
zwei Argumente und einen Operator, der als
rechts assoziativ ist, und eine Art Startwert,

00:22:19,200 --> 00:22:26,160
und sie nimmt eine Liste von Elementen dieses Typs,
der die erste Eingabe dieses binären Operators ist,

00:22:26,160 --> 00:22:32,720
und gibt etwas zurück, das vom gleichen Typ ist wie das
Startelement. Was ist die Idee dahinter? Wenn wir die

00:22:32,720 --> 00:22:38,240
leere Liste, dann geben wir einfach diese Konstante
in gewissem Sinne zurück. Dieses b wird also als Endwert zurückgegeben

00:22:38,240 --> 00:22:43,920
Wert zurückgegeben. Wenn wir eine nicht leere Liste haben, dann
können wir einen rekursiven Aufruf der restlichen Liste durchführen,

00:22:43,920 --> 00:22:49,760
und kombinieren, was immer bei diesem rekursiven Aufruf herauskommt
Aufrufs mit dem aktuellen Element über die bereitgestellte

00:22:49,760 --> 00:22:55,360
Funktion f. Wie gesagt, wenn diese Funktion f, zum Beispiel
ihr zweites Argument nicht braucht, dann können

00:22:55,360 --> 00:22:59,680
wir daraus etwas berechnen, auch wenn dieser
rekursiver Aufruf (vielleicht) nicht einmal beendet werden würde.

00:23:01,040 --> 00:23:07,840
Ich werde dazu einige Beispiele im
dem Whiteboard-Video durchgehen.
