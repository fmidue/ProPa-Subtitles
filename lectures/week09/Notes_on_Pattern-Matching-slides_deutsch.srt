149 # slide
00:00:01,680 --> 00:00:09,040
Nach diesem Exkurs über foldr möchte ich
einige abschließende Anmerkungen zum Pattern-Matching machen

00:00:10,000 --> 00:00:15,680
die für das allgemeine Verständnis wichtig sein werden
wie die Auswertung in Haskell funktioniert, aber auch einige

00:00:15,680 --> 00:00:24,800
konkrete Hinweise und Kommentare zu Dingen, die
Sie in den Übungsaufgaben tun oder vielleicht vermeiden sollten.

150 # slide
00:00:28,480 --> 00:00:32,880
Erstens, der Kommentar, der schon vorher gemacht
wurde, nämlich dass Pattern-Matching die

00:00:32,880 --> 00:00:38,960
Auswertung in Haskell antreibt. Um also zu
verstehen, wie Funktionen in Haskell ausgewertet werden,

00:00:38,960 --> 00:00:45,680
läuft es darauf hinaus, wie Pattern-Matching funktioniert
selbst wenn es aus der Syntax des Programms nicht offensichtlich ist,

00:00:45,680 --> 00:00:49,760
dass Pattern-Matching involviert ist. Wir
haben bisher zum Beispiel List-Comprehensions gesehen,

00:00:49,760 --> 00:00:53,440
aber sie werden auch der Zucker für etwas sein, das
ebenfalls vollständig von Pattern-Matching gesteuert wird.

00:00:53,440 --> 00:01:00,320
Wir haben Guards gesehen, aber auch sie sind der
Zucker für etwas, das direktes Pattern-Matching verwendet.

00:01:00,320 --> 00:01:06,640
Pattern-Matching erklärt, wie Funktionen
ausgewertet werden. Ich werde ein Video machen, in dem ich das

00:01:06,640 --> 00:01:14,080
zu diesem Beispiel mit Listen. Also noch einmal, wir
den Wechsel von der expliziten Listendarstellung

00:01:14,080 --> 00:01:19,280
Repräsentation und der Nil-Cons-Repräsentation
für Listen. Wir werden dies in Aktion sehen.

00:01:19,280 --> 00:01:23,600
Und dieses einfache Beispiel wird erklären
warum, wenn wir diesen Ausdruck haben,

00:01:24,240 --> 00:01:30,960
wo wir eine Funktion haben, die etwas
ähnlich einer Map-Funktion ist, und dann machen wir head

00:01:30,960 --> 00:01:37,040
von tail, dann müssen wir nicht wirklich alle Berechnungen durchführen
all die Berechnungen durchführen, die man anfangs vielleicht

00:01:37,040 --> 00:01:44,960
denken könnte, wenn man nur sieht, dass diese f
Funktion g auf alle ihre Listeneingabeelemente anwendet.

00:01:45,680 --> 00:01:49,600
In manchen Kontexten könnte es jedoch der Fall sein, dass
wir nicht alle Berechnungen durchführen müssen, die

00:01:49,600 --> 00:01:55,440
hier stehen. Und auch die Reihenfolge, in der
Dinge berechnet werden, kann von Interesse sein und ist

00:01:56,000 --> 00:02:01,680
erklärt, warum wir uns mit dem Pattern-Matching beschäftigen.
Dies wird ein sehr einfaches Beispiel sein, das ich

00:02:01,680 --> 00:02:07,760
in der Whiteboard-App machen werde. Aber die gleichen
Prinzipien erklären auch, wie die Lazy-Auswertung

00:02:07,760 --> 00:02:14,800
bei unendlichen Listen funktioniert, und wie wir denken können, wenn
wir über die Effizienz der Auswertung nachdenken müssen

00:02:14,800 --> 00:02:20,400
was in dieser Vorlesung nicht das Hauptthema war,
offensichtlich. Aber wenn wir als fortgeschrittener Haskell-Programmierer verstehen wollen

00:02:20,400 --> 00:02:24,560
fortgeschrittenen Haskell-Programmierer verstehen wollen, wie die Auswertung funktioniert,
dann müssen wir über Pattern-Matching nachdenken.

151 # slide
00:02:29,680 --> 00:02:39,360
Bevor wir das versprochene Video über Evaluation ansehen,
möchte ich zwei Folien mit einigen

00:02:40,160 --> 00:02:45,600
Syntax-Bemerkungen, die für die Übungen interessant
Übungen, aber auch einige allgemeinere Punkte.

00:02:46,320 --> 00:02:50,640
Die erste Beobachtung... ein wichtiger Aspekt ist
dass Pattern-Matching nicht auf die linke

00:02:50,640 --> 00:02:54,960
Seite der Funktionsdefinition beschränkt ist, wie
was wir gesehen haben, wo ich die Funktion definiere,

00:02:54,960 --> 00:03:01,680
und mehrere Gleichungen für sie aufstelle, und
auf der linken Seite verwende ich Pattern wie

00:03:01,680 --> 00:03:07,040
Nil oder Cons in der Funktionsdefinition. Wie auch immer,
wir können Pattern-Matching auch expliziter verwenden

00:03:07,040 --> 00:03:11,360
auf der rechten Seite von Funktionen verwenden, und dann
dies mithilfe des case-Schlüsselworts, das eine Art

00:03:11,360 --> 00:03:18,000
eines mächtigeren if-then-else, wenn Sie so wollen, das
ein Teil von Ausdrücken ist. Hier ist ein Beispiel, bei dem

00:03:18,000 --> 00:03:24,400
dies relevant werden kann. Auch in der letzten
Übung und auch in der nächsten Übung,

00:03:24,400 --> 00:03:30,480
gibt es Situationen, in denen wir mit
Maybe-Werten arbeiten müssen. Und ein typisches

00:03:31,760 --> 00:03:36,960
Pattern / Struktur, die wir haben könnten, ist, dass
wir ein Maybe-Ding haben und zuerst prüfen wollen

00:03:36,960 --> 00:03:44,320
prüfen, ob es Nothing ist, und wenn ja, dann tun wir
etwas, und wenn es nicht Nothing ist, und es ist Just

00:03:44,320 --> 00:03:49,440
etwas ist, dann wollen wir etwas mit
dem Wert, der in diesem Just gekapselt wurde,

00:03:49,440 --> 00:03:54,160
dann würden wir etwas tun wie fromJust von diesem
maybeThing, und dann etwas mit diesem Wert machen.

00:03:55,120 --> 00:04:01,920
Das ist wahrscheinlich die Art und Weise, wie wir angedeutet oder
vorgeschlagen, dass wir mit Maybe-Werten arbeiten,

00:04:01,920 --> 00:04:07,040
weil wir kein Pattern-Matching mit dem
Fall-Schlüsselwort. Aber wenn wir das Fall-Schlüsselwort haben

00:04:07,040 --> 00:04:10,800
und wir erlauben uns Pattern-Matching
auf der rechten Seite von Funktionsdefinitionen durchzuführen,

00:04:10,800 --> 00:04:15,440
dann könnten wir stattdessen etwas schreiben
wie dieses. Also, statt if-then-else,

00:04:15,440 --> 00:04:20,000
das mit Booleschen Werten arbeitet, müssen wir zuerst
etwas machen müssen, das eine boolesche Bedingung ist,

00:04:20,000 --> 00:04:26,720
könnten wir direkt einen Fall für das maybeThing haben.
Was sind die Fälle? Es kann Nothing sein,

00:04:26,720 --> 00:04:32,320
und dann tun wir etwas, und ansonsten ist es
Just, und dann können wir hier eine Variable binden,

00:04:32,320 --> 00:04:40,960
und tun, was immer wir im Fall von Just tun wollen
Fall tun und das Ding direkt verwenden. Das ist

00:04:40,960 --> 00:04:45,520
wie eine Switch-Anweisung, aber jetzt für algebraische
Datentypen, nicht für konstante Werte wie in C.

00:04:46,720 --> 00:04:53,920
Wir können auf die gekapselten Teile
des nicht-nullstelligen Datenkonstruktors

00:04:53,920 --> 00:05:00,480
über die Variablen hier zugreifen. Auf den ersten Blick sieht das
sehr ähnlich aus, aber tatsächlich gibt es

00:05:01,520 --> 00:05:06,080
wichtige Unterschiede, die diese Version zur
bevorzugte Version ist, nämlich vor allem

00:05:06,080 --> 00:05:14,480
dass der Compiler nun wieder zum Beispiel
erschöpfende und überlappende Prüfungen durchführen kann. Hier,

00:05:14,480 --> 00:05:19,280
sieht der Compiler nur ein if-then-else. Hier sieht der
Compiler sieht, dass wir eine Fallunterscheidung bei den

00:05:19,280 --> 00:05:23,520
Werte dieses maybeThing gemacht haben. Dieser hat einen bestimmten Typ
und der Compiler kann überprüfen, dass wir alle

00:05:23,520 --> 00:05:32,720
Fälle abgedeckt haben. Außerdem können wir hier nicht versehentlich versuchen
auf das Ding von innerhalb des Just im

00:05:32,720 --> 00:05:38,960
Nichts-Fall. Hier könnten wir also zum Beispiel auch
fromJust maybeThing in den then-Zweig schreiben,

00:05:38,960 --> 00:05:43,280
aber das würde zu einem Laufzeitfehler führen, denn in
diesem then-Zweig haben wir ein Nothing. Wir können also nicht

00:05:43,280 --> 00:05:48,880
fromJust schreiben, aber der Compiler sieht das nicht,
während wir hier nicht einmal etwas schreiben dürften

00:05:48,880 --> 00:05:55,120
etwas zu schreiben, das sich auf dieses Ding im Nothing
Teil zu schreiben, weil es dort nicht einmal gebunden ist. Also,

00:05:55,120 --> 00:06:02,800
kann der Compiler hier mehr Sicherheit geben. Außerdem,
im Hinblick auf die Effizienz: Wenn dieses maybeThing nicht

00:06:02,800 --> 00:06:10,240
nur eine Variable oder ein Wert, sondern ein komplizierterer
Ausdruck, dann könnten wir hier versehentlich

00:06:12,560 --> 00:06:16,960
vergessen, die übliche Eliminierung von Unterausdrücken durchzuführen.
Wir hätten dann hier einen Ausdruck. Und derselbe

00:06:16,960 --> 00:06:20,960
Ausdruck vielleicht hier wieder. Wir berechnen das
mehrmals berechnen, während es hier klar ist. Wir

00:06:20,960 --> 00:06:27,360
berechnen es einmal, führen die Prüfungen durch und haben dann
direkten Zugriff auf die Sache. Wir müssen nicht

00:06:27,360 --> 00:06:34,560
Funktionsaufrufe machen, um den inneren Wert zu erhalten.
Er wird also direkt über diese Bindung bereitgestellt.

00:06:36,160 --> 00:06:43,200
Dies ist spezifisch für den Maybe-Typ, aber die gleiche
Strategie gilt auch für andere Typen: unsere eigenen definierten

00:06:43,200 --> 00:06:50,560
algebraischen Datentypen, aber auch für die Listentypen.
Da wir in der Vorlesung bisher noch kein Pattern-Matching

00:06:50,560 --> 00:06:57,280
in der Vorlesung vorgestellt haben, haben Sie oft
mit Null-Tests und Head- und Tail-Zugriffsfunktionen programmiert

00:06:58,400 --> 00:07:06,480
Arbeiten Sie von nun an vorzugsweise mit
case-Ausdrücken. Anstelle von head und tail,

00:07:06,480 --> 00:07:11,520
könnten Sie etwas haben wie: case, Ihre Liste
Ding der leeren Liste, tun was immer man tun möchte

00:07:11,520 --> 00:07:17,440
in diesem Fall, Cons case, tun, was immer Sie tun wollen
mit dem Kopf- und dem Endelement,

00:07:17,440 --> 00:07:25,120
aber ohne die Funktionen head und tail aufzurufen,
eigentlich. Eine letzte Bemerkung dazu:

00:07:25,120 --> 00:07:31,520
Wir könnten auch anfangen, case-Ausdrücke zu verschachteln.
Wir könnten vielleicht einen weiteren case-Ausdruck

00:07:31,520 --> 00:07:39,840
auf der rechten Seite haben, der auf etwas anderes passt
anderen Ding, sei es das maybeThing oder eine Liste

00:07:39,840 --> 00:07:46,160
Ding, dann müssen wir vorsichtig sein, was das
Layout aufpassen, damit das nicht zufällig eingerückt ist

00:07:46,960 --> 00:07:53,440
im Vergleich zu diesem Fall. Wenn wir also weitere
Fallunterscheidungen hier mit case-of machen, dann müssen wir

00:07:53,440 --> 00:07:58,880
auch mit dem Layout vorsichtig sein, denn, wie Sie wissen,
ist Haskell eine layout-sensitive Sprache. Also,

00:07:58,880 --> 00:08:02,640
lohnt es sich, einen Haskell-Editor zu verwenden
(einen Haskell-erkennenden Editor) für diese Aufgabe

00:08:02,640 --> 00:08:05,600
denn er hilft Ihnen, Ihre Ausdrücke einzurücken.

152 # slide
00:08:11,040 --> 00:08:17,280
Zum Schluss möchte ich noch auf eine mögliche
Falle hinweisen, in die vor allem Anfänger manchmal

00:08:17,280 --> 00:08:23,040
tappen, nämlich misszuverstehen, was
Pattern-Matching für die Variablen bedeutet

00:08:23,040 --> 00:08:28,320
die darin gebunden sind. Pattern-Matching bindet immer
die Variablen (die Namen, die in den Pattern

00:08:28,320 --> 00:08:35,200
vorkommen), und das könnte bestehende Dinge
mit demselben Namen, was nicht unbedingt nach dem klingt, worüber

00:08:36,640 --> 00:08:42,080
man stolpern könnte. Aber es gibt
Situationen, in denen dies für Anfänger verwirrend sein kann.

00:08:42,080 --> 00:08:48,800
Anfänger verwirren kann. Zum Beispiel, wenn Sie mit dem
CodeWorld-Farbtyp arbeiten, für den Sie wahrscheinlich

00:08:48,800 --> 00:08:54,480
wissen, dass es einige konstante Werte gibt
wie z.B. die aktuelle Farbe ist rot, grün, etc.,

00:08:54,480 --> 00:09:01,120
dann könnten Sie versucht sein, eine
Funktion für Farben zu schreiben, die auf dem Prinzip des Pattern-Matching beruht:

00:09:03,200 --> 00:09:07,680
Wenn ich die Primärfarben erkennen will, kann ich
einige einfache Fälle haben, wie z.B. den Abgleich mit Rot,

00:09:07,680 --> 00:09:12,240
grün, blau und in diesen Fällen True sagen
und für andere Fälle False.

00:09:12,960 --> 00:09:19,280
Aber das ist nicht das, was der Autor dieses Codes
dachte, was es tun sollte. Warum ist das nicht das

00:09:19,280 --> 00:09:23,920
was er sich vorgestellt hat? Weil
rot hier eine Variable ist. Es handelt sich also nicht um einen

00:09:23,920 --> 00:09:29,040
Datenkonstruktor. Datenkonstruktoren werden mit
Großbuchstaben geschrieben. Dieses "red" hier ist eine Wertkonstante,

00:09:29,040 --> 00:09:34,400
aber es ist kein Datenkonstruktor. Wenn etwas
so geschrieben, dann könnte dieses "red" eigentlich

00:09:34,400 --> 00:09:40,880
genauso gut x sein. Es wird wie eine Variable behandelt. Es ist
nicht diese Konstante hier. Das macht also nicht das, was

00:09:40,880 --> 00:09:47,600
wir erwartet haben, und der Compiler wird sich
je nach den verwendeten Warnstufen

00:09:47,600 --> 00:09:52,480
verhalten. So könnte er sich zum Beispiel beschweren über
Abschattung beschweren und sagen, dass dieser Variablenname hier

00:09:52,480 --> 00:09:58,480
den vorhandenen Wert "red" aus der CodeWorld-Bibliothek überschattet
der CodeWorld-Bibliothek, oder der Compiler könnte auch

00:09:58,480 --> 00:10:03,120
beschweren, dass es Überschneidungen gibt, weil
wenn dies nur eine Variable ist, dann ist dies auch eine,

00:10:03,120 --> 00:10:08,800
und dies ist auch, also haben wir drei Fälle wie
Primärfarbe x, Primärfarbe y, Primärfarbe z,

00:10:09,600 --> 00:10:15,840
und diese sind natürlich genau die gleiche
Regel bis auf den Namen von x, y oder z.

00:10:15,840 --> 00:10:21,440
Der Compiler hat also viele Gründe, sich zu beschweren
über einen Code wie diesen zu beanstanden, der mit dem

00:10:21,440 --> 00:10:27,040
falschen Verständnis davon geschrieben wurde, was Pattern-Matching
hier. Er vergleicht nicht mit diesen Konstanten;

00:10:27,040 --> 00:10:31,680
er verwendet sie als Variablen. Die Situation ist
anders als bei den Zahlenkonstanten, denn diese sind

00:10:31,680 --> 00:10:39,840
Konstruktoren sind. Oder wenn Sie eine Aufzählung haben
wo es einige Konstanten gibt... einige Null-Daten

00:10:39,840 --> 00:10:44,453
Konstruktoren, dann kann man sie natürlich auch
hier verwenden, aber das ist nicht das, was die rote Farbe ist. Es

00:10:44,453 --> 00:10:50,080
ist kein Datenkonstruktor. Es ist eine Variable...
ein konstanter Wert, aber kein Datenkonstruktor.

00:10:51,520 --> 00:10:58,080
Seien Sie also vorsichtig mit so etwas wie
diesem Missverständnis.
