0:00:01.840,0:00:10.160
Okay, ich habe beschlossen, dass bevor ich mit den Folien weitermache,
insbesondere über Funktionen höherer Ordnung

0:00:10.160,0:00:15.840
auf Listen spreche, es wahrscheinlich gut wäre, ein
weiteres Video im Whiteboard-Stil zu machen, in dem ich noch einmal,

0:00:15.840,0:00:21.200
kurz über die Syntax von Funktionsdefinitionen,
insbesondere anonyme Funktionen, Abschnitte

0:00:21.200,0:00:26.720
die wir dann weitergeben können an diese
anderen, höherwertigen Funktionen auf Listen weitergeben können.

0:00:26.720,0:00:32.080
Und weil die Notizen, die ich in den
Folien im vorherigen Video gemacht

0:00:32.080,0:00:35.440
habe, vielleicht nicht in allen Fällen so gut funktionierten.

0:00:36.160,0:00:40.800
Auch wegen meiner technischen
Probleme, also bin ich zurück zu diesem Aufbau hier.

0:00:40.800,0:00:43.520
Und nun, was ich erzählen werde,
ist hauptsächlich eine Wiederholung.

0:00:43.520,0:00:46.240
Also, erinnern wir uns.

0:00:46.240,0:00:51.120
Also, wie schreiben wir normalerweise neue Funktionen hier?

0:00:51.120,0:00:54.160
Also, ich stelle mir eine Funktion vor,
die ich irgendwo verwenden möchte.

0:00:54.160,0:00:58.080
Es ist eine Funktion von den ganzen Zahlen zu den ganzen Zahlen.

0:00:58.640,0:01:05.760
Und normalerweise würde ich etwas sagen wie
newFunction, mit irgendeinem nützlichen Namen.

0:01:05.760,0:01:09.440
Und sie nimmt ein Argument und
vielleicht berechnet sie x plus x.

0:01:09.440,0:01:09.940
Okay?

0:01:10.480,0:01:12.080
Es ist nicht wirklich wichtig, was sie berechnet.

0:01:12.080,0:01:15.040
Okay, so haben Sie also bisher
Funktionen eingeführt.

0:01:15.760,0:01:17.360
Okay, was wir jetzt tun können,

0:01:17.360,0:01:22.560
das ist das, was ich als Teil der Folien
über Lambda-Abstraktionen vorgestellt habe.

0:01:22.560,0:01:27.200
Sie könnten jetzt mit der gleichen
Signatur geschrieben haben, aber statt der

0:01:27.200,0:01:31.120
die Definitionszeile (diese eine Gleichung),
hätten wir auch diese Gleichung schreiben können.

0:01:36.400,0:01:41.200
Ja, mit dieser Lambda-Syntax. So,
würde das Lambda so aussehen.

0:01:41.200,0:01:44.560
Aber wie Sie auf den Folien gesehen haben, wird in der

0:01:45.520,0:01:49.440
ASCII-Syntax den Backslash
anstelle des Lambda-Symbols verwendet.

0:01:49.440,0:01:54.320
Aber wenn ich es aufschreibe, werde ich manchmal
das explizite griechische lambda dafür.

0:01:55.280,0:01:59.360
Deshalb nennt man es Lambda-Ausdrücke/Abstraktionen.

0:01:59.360,0:02:03.440
Wir hätten also auch diese Zeile
anstelle der vorherigen Zeile schreiben können.

0:02:04.720,0:02:10.000
Okay, in einer benannten Funktionsdefinition,
und auf die gleiche Weise könnten wir auch die rechte

0:02:10.000,0:02:15.680
Seite direkt in einem Funktionsaufruf verwenden
wo wir sonst die "newFunction" übergeben würden.

0:02:15.680,0:02:19.360
Sagen wir also, wir haben irgendwo einen Funktionsaufruf f.

0:02:19.360,0:02:24.960
Und dann braucht sie ein Argument, das eine Funktion ist
von Int nach Int ist, und wir könnten

0:02:25.840,0:02:31.760
eine neue Funktion als
Argument an diese andere Funktion f übergeben.

0:02:31.760,0:02:33.680
Oder wir könnten auch f schreiben.

0:02:33.680,0:02:37.520
Und anstatt diesen Namen zu benutzen, oder sogar
diesen Namen einzuführen, könnte man direkt

0:02:37.520,0:02:42.480
einen Lambda-Ausdruck an diesen übergeben.

0:02:45.280,0:02:51.760
Okay, und das Wichtigste dabei ist, dass wir hier
diese Klammern um den Lambda-Ausdruck brauchen,

0:02:51.760,0:02:54.880
wir brauchen das hier nicht
in der Definitionszeile wie oben.

0:02:55.680,0:03:01.040
Und wenn Sie ihn als Argument an eine andere Funktion
übergeben, müssen wir normalerweise diese Klammern verwenden.

0:03:01.040,0:03:01.680
Und warum?

0:03:01.680,0:03:04.160
Weil es etwa später ein
weiteres Argument geben könnte, richtig?

0:03:04.160,0:03:06.320
Vielleicht nimmt f also mehr als ein Argument an.

0:03:06.320,0:03:09.440
Und dann müssen wir wissen
was im Grunde der Geltungsbereich ist.

0:03:10.080,0:03:12.560
Dies führt also eine Variable x ein, was ist der Geltungsbereich?

0:03:12.560,0:03:18.800
Nun, an einer Stelle wie dieser, ist es bis zum Ende
des Ausdrucks, Ende der Zeile, im Grunde,

0:03:20.000,0:03:22.240
denn das ist die rechte Hand
Seite einer Funktionsdefinition.

0:03:22.240,0:03:24.720
Aber zum Beispiel in einer Anwendung wie dieser,

0:03:24.720,0:03:29.920
müssen wir wissen, wie weit sich dieses x
nach rechts erstreckt, die Definition oder der Geltungsbereich.

0:03:30.480,0:03:37.440
Und das geht in diesem Fall, bis diese
Klammer geschlossen ist, die hier geöffnet wurde.

0:03:37.440,0:03:40.720
Okay, deshalb können wir nicht
einfach ohne diese beiden Klammern

0:03:41.680,0:03:44.960
schreiben. Es wäre nicht eindeutig und klar,

0:03:44.960,0:03:45.840
was wir damit meinen.

0:03:47.520,0:03:50.800
Okay, das ist also der Teil
über Lambda-Abstraktionen,

0:03:50.800,0:03:52.960
und wie sie verwendet werden, was ihre Rolle ist.

0:03:53.520,0:03:55.920
Dann gab es diese Kommentare über Abschnitte.

0:03:55.920,0:03:59.360
Und vielleicht ist es auch nützlich zu zeigen,
wie diese Abschnitte

0:03:59.920,0:04:02.720
anonymen Funktionen entsprechen
mit Lambda-Abstraktionen.

0:04:02.720,0:04:04.800
Lassen Sie mich also noch eine kurze Anmerkung machen.

0:04:04.800,0:04:09.440
Also, wir hatten einige Dinge wie "kleiner
als fünf" als Prädikat, zum Beispiel,

0:04:09.440,0:04:15.680
man könnte auch dies haben oder vielleicht so etwas wie
dies: > 0.5. Dies wäre also die

0:04:15.680,0:04:21.200
Section-Syntax, denn wir wenden diesen
binären Operator auf nur ein Argument an.

0:04:22.320,0:04:24.400
In diesem Fall ist es das, was wir hier sehen.

0:04:26.240,0:04:31.280
Okay, und das ist wirklich äquivalent zu: ...
Lassen Sie mich das jetzt auch mit Klammern schreiben

0:04:32.320,0:04:33.760
innerhalb einer Lambda-Abstraktion.

0:04:35.280,0:04:41.920
Und innerhalb der Lambda-Abstraktion wäre dies
dasselbe wie eine anonyme Funktion, die ein Argument annimmt

0:04:41.920,0:04:51.200
ein Argument nimmt und dann x > 0,5 berechnet.
Und wenn Sie einen Abschnitt andersherum verwenden,

0:04:51.200,0:04:55.840
wo wir die linke Seite bereitstellen, die
linke Argumente.... Wenn Sie also stattdessen geschrieben hätten

0:04:56.400,0:05:07.200
"0,5 >" geschrieben und dies als unsere neue Funktion verwendet,
dann ist dies äquivalent zu lambda x, wobei 0,5

0:05:08.560,0:05:14.160
größer x ist. Das ist also die Regel für
die Gliederung nach links oder nach rechts,

0:05:15.280,0:05:19.760
ausgedrückt als Lambda-Abstraktionen, ist es
klar, es wird klarer, vielleicht

0:05:19.760,0:05:27.040
wir sind das unbekannte oder das
noch-erwartetes Funktionsargument

0:05:27.040,0:05:27.540
wird.

0:05:31.680,0:05:32.560
Okay, das war's.

0:05:33.120,0:05:39.280
Und dann ist es auch für spätere Nutzer
interessant oder wichtig und relevant zu wissen

0:05:39.280,0:05:44.160
dass wir natürlich jetzt, wo wir Funktionen
als Werte erster Klasse haben, können wir auch

0:05:44.160,0:05:48.320
mit ihnen operieren, so wie es die Mathematik erlaubt
auf Funktionen erweiterungsmäßig zu operieren.

0:05:48.320,0:05:53.760
Nicht durch einen Blick in die Syntax oder die
Definition eines Funktionsarguments, das in einer Funktion verwendet wird.

0:05:53.760,0:06:00.400
Wir können also nicht irgendwie nachschauen, wie das definiert
ist, und können dann Fallunterscheidungen treffen.

0:06:00.400,0:06:01.840
Das können wir nicht tun.

0:06:01.840,0:06:08.000
Aber Operationen, die semantisch auf
Funktionen in der Mathematik funktionieren, können auch hier verwendet werden.

0:06:08.000,0:06:13.040
Und die bekannteste
Ich denke, die bekannteste ist die Funktionskomposition, richtig?

0:06:13.040,0:06:17.200
Wenn Sie also in der Mathematik Funktionen haben,
und die Domäne und Ko-Domäne zweier Funktionen

0:06:17.200,0:06:21.920
auf eine bestimmte Weise übereinstimmen, dann kann man
sie komponieren. Sie sollten wissen

0:06:22.960,0:06:28.080
aus Ihrem Kurs in Diskreter Mathematik, zum Beispiel,
oder anderen Mathevorlesungen, diese Schreibweise kennen.

0:06:28.080,0:06:32.400
Wenn man eine Funktion f und eine Funktion g hat,
dann kann man sie zusammensetzen und erhält eine neue Funktion.

0:06:32.400,0:06:44.000
Ja, wenn man also etwas hat wie: g ist eine
Funktion von den rationalen Zahlen zu den natürlichen Zahlen,

0:06:44.000,0:06:51.680
und f ist eine Funktion von den natürlichen Zahlen
zu den reellen Zahlen, zum Beispiel, dann kann man

0:06:52.320,0:07:02.320
daraus machen: "Funktion f komponiert g", die
von den rationalen zu den reellen Zahlen geht.

0:07:02.320,0:07:07.360
Denn im Grunde kommt eine rationale Zahl
rein, eine natürliche Zahl kommt raus, und dann geht diese

0:07:07.360,0:07:13.440
durch Komposition an die zweite Funktion,
an f, und das Ergebnis ist eine reelle Zahl.

0:07:14.400,0:07:17.840
Okay, das ist eine typische Operation
auf Funktionen in der Mathematik.

0:07:17.840,0:07:22.000
Und das Gleiche ist auch in Haskell möglich,
natürlich benutzen wir nicht diesen

0:07:22.560,0:07:26.400
seltsamen oder lustigen Kreis hier,
wir brauchen eine andere Syntax.

0:07:26.400,0:07:31.920
Und eigentlich müssen wir auch
über diese Domänen/Mengen nachdenken.

0:07:31.920,0:07:33.600
Und natürlich ist die Funktion polymorph, richtig?

0:07:33.600,0:07:38.960
Ich verwende einfach die rationalen, natürlichen und reellen
Zahlen, um ein Beispiel zu geben.

0:07:38.960,0:07:44.960
Aber im Wesentlichen brauchen wir
Mengen, die in der Mitte übereinstimmen.

0:07:44.960,0:07:45.200
Richtig?

0:07:45.200,0:07:49.920
Was wir also in Haskell haben
den folgenden Operator.

0:07:51.040,0:07:52.480
Er wird einfach als Punkt geschrieben.

0:07:54.320,0:07:58.720
Okay, als ein Operator, also wieder in
diesen Klammern. Und was ist sein Typ?

0:07:59.440,0:08:02.560
Nun, er ist sehr polymorph.

0:08:02.560,0:08:08.640
Also, er hat einige Typvariablen b und c, und die
Funktion zwischen diesen Typen.

0:08:08.640,0:08:11.840
Und es muss eine weitere
Funktion geben, die von a nach b geht.

0:08:11.840,0:08:15.760
Und der wichtige Teil hier ist, dass
diese beiden die gleiche Typvariable sind, was

0:08:15.760,0:08:20.400
der Tatsache entspricht, dass in der Mathematik,
wir brauchen eine Übereinstimmung dieser beiden Mengen hier.

0:08:21.200,0:08:22.320
Und was ist dann das Ergebnis?

0:08:22.320,0:08:27.520
Nun, das Ergebnis ist wiederum eine Funktion, aber eine
Funktion von a nach c. Und wie ist sie definiert?

0:08:27.520,0:08:33.040
Nun, bei einem f, bei einem
g, wie können wir das definieren?

0:08:33.040,0:08:40.320
Nun, wir können sagen: Dies ist eigentlich eine
Lambda-Abstraktion, die ein a nimmt,

0:08:42.480,0:08:51.120
es an g weitergibt, wobei g im Grunde eine Funktion ist
dieses Typs ist, also können wir ihr einen (a)-Wert geben.

0:08:51.120,0:08:55.200
Ich habe hier die gleiche
Typvariable wie hier verwendet. Das ist natürlich nicht

0:08:55.200,0:08:57.040
gezwungen, aber ich habe es einfach so gemacht.

0:08:57.680,0:09:00.880
Wenn ich g auf etwas vom Typ (a) anwende, erhalte ich ein (b),

0:09:01.440,0:09:07.840
und (b) ist etwas vom Typ (b). Es ist etwas, das ich
an die andere Funktion, die Funktion f, übergeben kann.

0:09:09.360,0:09:17.120
Okay, was ich hier erhalte, ist also f von g von a,
was intuitiv genau dem mathematischen

0:09:17.120,0:09:30.320
Begriff der Funktionskomposition entspricht, und jetzt ist er
nun auch als Operator in Haskell verfügbar.
