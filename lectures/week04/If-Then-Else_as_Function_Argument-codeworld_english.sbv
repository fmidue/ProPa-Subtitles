0:00:01.280,0:00:03.860
Okay, another discussion on an example.

0:00:03.860,0:00:08.720
And actually, it's one of the examples from
the last exercise week.

0:00:08.720,0:00:13.519
And of course, I won't discuss this in full
now here because that's the job of the exercise

0:00:13.519,0:00:14.929
videos that will also be made.

0:00:14.929,0:00:19.570
So, there will be a full discussion of the
example and alternatives et cetera.

0:00:19.570,0:00:24.680
But there's one thing that I wanted to point
out already here now in the lecture, and that

0:00:24.680,0:00:30.840
is because it actually was a comment I made
towards the end of the last lecture week,

0:00:30.840,0:00:34.230
and that can be very nicely illustrated here.

0:00:34.230,0:00:41.120
So, let me recall this, there was this comment
about not shying away from using if-then-else

0:00:41.120,0:00:42.120
as a subexpression.

0:00:42.120,0:00:47.409
So, in the slides, I think it was one of the last
slides (in the current semester, slide 47) in the last week,
there was some comment

0:00:47.409,0:00:59.110
like: if you have something like, well, some
condition and if this condition is fulfilled,

0:00:59.110,0:01:01.739
then you apply some function to something;

0:01:01.739,0:01:06.180
else, we'll say expression one that was
a more complicated version on the slide, like

0:01:06.180,0:01:11.390
f x y (if exp1 then exp2 else exp3), let's say
we have something like if a condition holds,

0:01:11.390,0:01:15.560
then something which applies f to an expression.

0:01:15.560,0:01:21.829
And else, it so happens that we apply the
same function to another expression.

0:01:21.829,0:01:26.840
Okay, and then there was this command in the
slides, that actually does the equivalent,

0:01:26.840,0:01:28.780
I think it was written the other way around
in the slide.

0:01:28.780,0:01:29.939
But of course, it's an equation.

0:01:29.939,0:01:30.939
So, it doesn't matter which order.

0:01:30.939,0:01:37.560
I do this-, this is the same semantically
as saying, let me apply f to something.

0:01:37.560,0:01:38.560
What is the something?

0:01:38.560,0:01:45.320
It's-, well, if the condition is fulfilled, then
its expression one else its expression two.

0:01:45.320,0:01:52.560
And I've noticed every time I give this lecture,
actually, that students somehow grappled with

0:01:52.560,0:01:53.560
this, right.

0:01:53.560,0:01:59.420
This is a valid transformation that can be
applied to Haskell code, but it's rarely done,

0:01:59.420,0:02:00.520
at least in the beginning.

0:02:00.520,0:02:05.950
And it has to do, I think, with the nature
of if-then-else, as an expression-concept

0:02:05.950,0:02:11.510
in Haskell and like languages, compared to
completely different languages like imperative

0:02:11.510,0:02:17.680
languages, in which if-then-else is usually
understood as a command level thing where

0:02:17.680,0:02:22.099
such nesting doesn't seem very favourable or
is not even possible.

0:02:22.099,0:02:27.370
Okay, well, it was an abstract comment, and
well, we did an action in your submissions.

0:02:27.370,0:02:29.120
This is not exactly.

0:02:29.120,0:02:34.620
I won't call out one specific student, but
I had to look at the submissions for the first

0:02:34.620,0:02:35.980
task of this week.

0:02:35.980,0:02:40.950
And typical solutions looked like this, of
course, with all the shape, but there are

0:02:40.950,0:02:46.379
versions like here, the 'scene' function, I
have two versions because they can be used

0:02:46.379,0:02:47.440
in two different ways.

0:02:47.440,0:02:53.650
So, if somehow the time parameter is smaller
than pi, then something is drawn, grass and

0:02:53.650,0:02:56.480
the rotated sun, and otherwise, just grass
is drawn.

0:02:56.480,0:03:01.849
It's of course, organized here, that sun and
grass are actually given names and used as

0:03:01.849,0:03:06.049
reusable constructs, rather than writing somehow
complicated.

0:03:06.049,0:03:10.409
For example, this coloured green rectangle
in these two places, so that there's grass,

0:03:10.409,0:03:15.500
grass instead of two times, this expression
is, of course, already nice.

0:03:15.500,0:03:19.049
But there's something else that can be improved
here, following this remark from above here,

0:03:19.049,0:03:22.170
which is one version when you run it, and
it's worth the task.

0:03:22.170,0:03:25.610
So, there's nothing bad about this.

0:03:25.610,0:03:28.510
So, that's fine.

0:03:28.510,0:03:30.230
And here, the sun disappears.

0:03:30.230,0:03:39.040
And some other solutions among many versions
that can be done more and somehow, actually

0:03:39.040,0:03:43.200
letting the sun set at some place and then
leaving it there, is also nice, basically

0:03:43.200,0:03:44.950
stopping this rotation

0:03:44.950,0:03:51.159
already, before we have made a half circle
or something like stopping at some point above

0:03:51.159,0:03:58.030
the horizon, then there is this again and if-then-else,
so if some stop condition is not yet met,

0:03:58.030,0:04:04.310
we draw grass and the sun rotates to somewhere,
and otherwise, we also draw the grass and

0:04:04.310,0:04:07.270
the sun rotated to somewhere else, namely
to this stopping point, right?

0:04:07.270,0:04:09.670
And if you run this, then we get a similar
picture.

0:04:09.670,0:04:15.220
Well, it now looks-, or similar animation that
now looks at the spinning, it looks the same,

0:04:15.220,0:04:20.260
and then it stops here because now the sun
after this 95% of the half circle, the sun

0:04:20.260,0:04:21.260
stops.

0:04:21.260,0:04:26.970
Okay, and these are fine solutions, but there's
something strange in some sense, or something

0:04:26.970,0:04:27.970
undesirable.

0:04:27.970,0:04:31.490
Namely, there's two times you have this
then-else and they both share something, right?

0:04:31.490,0:04:35.990
They both either draw grass and something
or just grass or grass and something

0:04:35.990,0:04:38.759
or your grass and something else.

0:04:38.759,0:04:42.340
Okay, and now, duplication is the enemy
of programmers.

0:04:42.340,0:04:48.090
So, one might ask, wouldn't it be nicer to
not say if the condition holds, then we draw

0:04:48.090,0:04:50.560
grass and something else.

0:04:50.560,0:04:53.620
Otherwise, we draw grass and yet something
else.

0:04:53.620,0:04:57.060
Yeah, both in the "then" and "else" branch, we
have to draw the grass.

0:04:57.060,0:05:01.509
So, why do we even say this inside the then-else
if it's an unchanged part?

0:05:01.509,0:05:05.830
So, somehow the grass is not something which
differs between the "then" and the "else" branch,

0:05:05.830,0:05:09.990
so it shouldn't be necessary to put it into
the then-else parts.

0:05:09.990,0:05:12.789
Okay, and how can we actually do this?

0:05:12.789,0:05:13.789
But what can we do?

0:05:13.789,0:05:16.770
Well, that is exactly an instance of this
pattern here, right?

0:05:16.770,0:05:18.889
So, if some condition, right?

0:05:18.889,0:05:25.630
That's the condition here, then we do something
with some subexpression, else, we do the same

0:05:25.630,0:05:26.630
thing

0:05:26.630,0:05:31.110
but with another subexpression, and then the
recipe here says, well, let's express this

0:05:31.110,0:05:32.810
as we do the something.

0:05:32.810,0:05:35.370
So, what that with a function is, right?

0:05:35.370,0:05:39.610
It describes some computation, and only the argument
is conditional.

0:05:39.610,0:05:41.910
Okay, how does this fit in here?

0:05:41.910,0:05:46.360
Well, let's consider this operation of putting
the grass beside something else as a function

0:05:46.360,0:05:49.750
to let's say, this "grass and â€¦" is our function
f.

0:05:49.750,0:05:53.780
What we have here is if some condition, then
"grass and".

0:05:53.780,0:05:55.970
And that's the changing subexpression.

0:05:55.970,0:05:58.061
Else, again, "grass and".

0:05:58.061,0:06:00.620
And this is a changing subexpression.

0:06:00.620,0:06:05.319
So, actually, we should have said this, or
could have said this as saying the scene

0:06:05.319,0:06:08.870
of t is "grass and",

0:06:08.870,0:06:14.180
so we will always draw grass, not just under
some conditions, and well, what is (after) the "and"?

0:06:14.180,0:06:15.639
What do we also have to draw?

0:06:15.639,0:06:22.259
Well, if t is smaller than this stopping time,
then we draw the one kind of rotated sun,

0:06:22.259,0:06:24.729
and otherwise we draw the other kind of rotated
sun.

0:06:24.729,0:06:30.199
So, we move this common part of these two
expressions outside if-then-else because

0:06:30.199,0:06:33.319
this doesn't depend on the condition, it doesn't
even depend on the t, right?

0:06:33.319,0:06:39.470
So, previously, it looked like grass, depending
somehow on this condition, and maybe this

0:06:39.470,0:06:41.560
also on the t, but grass is a constant here.

0:06:41.560,0:06:43.810
So, it doesn't depend on a t.

0:06:43.810,0:06:47.970
Okay, so we avoid some duplication, of course,
not a big amount of duplication.

0:06:47.970,0:06:52.560
But in other expressions, it could be a larger
refactoring or more helpful refactoring, which

0:06:52.560,0:06:55.840
saves a lot of duplicated code.

0:06:55.840,0:07:00.819
And to express more clearly the scene always
contains grass, and then under some conditions,

0:07:00.819,0:07:02.030
different versions of the sun.

0:07:02.030,0:07:05.259
Okay, does this still work?

0:07:05.259,0:07:10.760
Well, of course it does, because mathematically
we have said exactly the same.

0:07:10.760,0:07:15.800
Because what I gave here and on a slide
last week, is really a mathematical identity.

0:07:15.800,0:07:17.900
Yes, it does make perfect sense.

0:07:17.900,0:07:20.889
So, that's something that motivates this
moving out.

0:07:20.889,0:07:26.910
Okay, now we can ask ourselves there, was
this just because of this syntactic happenstance

0:07:26.910,0:07:30.580
that it looked exactly the same "grass and"
and we don't even have this here, right?

0:07:30.580,0:07:33.000
So, how can we move the grass out of the scene1
function?

0:07:33.000,0:07:40.449
Yes, I just switched to scene1 here, which
of course still works and then the question

0:07:40.449,0:07:47.319
could be well, what now, so I can't move the
"grass and" outside of this thing, because it

0:07:47.319,0:07:51.800
doesn't occur in both the "then" and the "else"
branch.

0:07:51.800,0:07:57.410
But it doesn't, let's consider again last
week, we had this nice concept of a neutral

0:07:57.410,0:08:01.169
element of some type and I talked about this
for lists but also for pictures, actually

0:08:01.169,0:08:03.330
picture was the motivating example.

0:08:03.330,0:08:04.330
What is grass?

0:08:04.330,0:08:10.979
We want to see the Else branch as grass and
something, and the easy thing to do this is to say,

0:08:10.979,0:08:14.659
let's consider this grass as "grass and blank".

0:08:14.659,0:08:20.500
Yes, the blank picture is something that I can
always put beside my grass, for example.

0:08:20.500,0:08:22.479
And of course, the question is, would I do
this?

0:08:22.479,0:08:23.479
Right?

0:08:23.479,0:08:29.039
It looks stupid now, why did I complicate this
as branch from grass to "grass and blank"?

0:08:29.039,0:08:33.270
Well, on its own that would probably indeed
be a stupid change.

0:08:33.270,0:08:40.710
But now, I have actually rephrased my program
slightly in such a way that I can apply this

0:08:40.710,0:08:45.820
trick again, or this refactoring again, because
now I more clearly see that, really, the grass

0:08:45.820,0:08:49.690
is something which is common and even this
"grass and something" that is common to these

0:08:49.690,0:08:57.020
both branches, because I've made the nothing,
the two main blank picture explicit, but then

0:08:57.020,0:09:03.100
I can again pull this out, I can say well,
my scene1 is always grass.

0:09:03.100,0:09:06.800
Let's express this by having this here.

0:09:06.800,0:09:16.000
That's always grass and then conditioned on
this, I either have rotated the sun or simply

0:09:16.000,0:09:21.490
syntactically throwing away the "grass and"
here, otherwise, I have blank which also expresses

0:09:21.490,0:09:22.490
this nicely.

0:09:22.490,0:09:27.030
We always have the grass, under some conditions
I have rotated some sun, under other conditions

0:09:27.030,0:09:31.200
after some time, I have nothing, maybe just
the grass.

0:09:31.200,0:09:36.730
And again, this is more conceptually appealing
than the original version of this because I have

0:09:36.730,0:09:41.640
eliminated this duplicate grass occurrence
and I've made more conceptually clear what

0:09:41.640,0:09:46.029
is actually depending on the time, namely,
detect whether or not

0:09:46.029,0:09:50.330
I have a picture and if I have a picture of
that is-, that also clearly see under what

0:09:50.330,0:09:53.290
conditions I have nothing beside the grass.

0:09:53.290,0:09:55.480
Okay, and of course, it would still run.

0:09:55.480,0:10:00.260
Let's check this.

0:10:00.260,0:10:03.730
And it still works exactly the same way.

0:10:03.730,0:10:08.120
Okay, we have massaged the program a bit using
this hint.

0:10:08.120,0:10:15.010
Later in the future, maybe you do this kind
of refactoring on your own already.
