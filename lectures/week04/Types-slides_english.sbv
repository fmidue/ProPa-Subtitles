0:00:01.370,0:00:06.620
First of all, I have to slightly correct myself:

0:00:06.620,0:00:15.370
I said in the previous video that I finished
last lecture week with the slide on moving

0:00:15.370,0:00:22.420
if-then-else expressions in and out of function
argument positions.

0:00:22.420,0:00:23.610
That wasn't actually true.

0:00:23.610,0:00:27.420
That was slide 47, whereas last week's lectures
ended with slide 52.

0:00:27.420,0:00:33.340
So, there was some other material afterwards,
namely, talking about syntax.

0:00:33.340,0:00:42.210
That said, I want to call out another observation
from the exercises here.

0:00:42.210,0:00:49.039
Actually, this is not exactly from this year's
exercise tasks, but from a task similar to

0:00:49.039,0:00:52.170
the "moving sun" example, from last year.

0:00:52.170,0:00:55.699
There was some observation that I want to
make here again, even though it's not exactly

0:00:55.699,0:01:01.660
the example that was used in this year's exercises.

0:01:01.660,0:01:04.680
It's about common subexpressions.

0:01:04.680,0:01:08.571
So, it appears here in the case of an if-then-else,
but that's not the main point.

0:01:08.571,0:01:11.550
The point is about common subexpressions.

0:01:11.550,0:01:19.870
Also Marcellus and Oliver talked about this
in their videos, about moving expressions

0:01:19.870,0:01:25.390
that appear repeatedly, to somehow named entities.

0:01:25.390,0:01:29.530
And that was used there for the grass, for
the sun, for branches, etc.

0:01:29.530,0:01:32.130
So, basically for constant expressions.

0:01:32.130,0:01:37.630
But the concept of common subexpression elimination
applies also to expressions that contain variables.

0:01:37.630,0:01:39.570
And this is nicely illustrated here.

0:01:39.570,0:01:41.240
Let's consider this example.

0:01:41.240,0:01:45.910
There was some "scene" computation and somehow
it had something to do with rotation or moving

0:01:45.910,0:01:46.910
stuff around.

0:01:46.910,0:01:58.210
So, there was some condition: if 8 * sin t
> 0 then do something (where sin and cos are

0:01:58.210,0:02:00.010
used), and else do something else.

0:02:00.010,0:02:01.810
This doesn't really matter.

0:02:01.810,0:02:03.220
Maybe this was blank here.

0:02:03.220,0:02:04.400
Maybe something else.

0:02:04.400,0:02:07.930
The important thing here is that there was
a recomputation.

0:02:07.930,0:02:13.489
So, this value is computed here, and then at
least if it is positive, the "then" branch

0:02:13.489,0:02:16.150
is taken, and it is computed again.

0:02:16.150,0:02:19.430
It's not a very expensive computation.

0:02:19.430,0:02:24.780
Yes, just computing the sine may not be the
most problematic case, but it would be both

0:02:24.780,0:02:29.769
more efficient and also clearer to say: Let's
give names to these things.

0:02:29.769,0:02:35.849
We can simply name things that contain no
other variables, but of course, we can also

0:02:35.849,0:02:40.420
name the subexpressions "8 * cos t" and "8
* sin t".

0:02:40.420,0:02:44.959
And then it becomes clearer because then
we can see that we actually check if the y-coordinate

0:02:44.959,0:02:52.249
is greater than zero, then we move whatever
we had here to the x and y position, otherwise

0:02:52.249,0:02:53.349
we do something else.

0:02:53.349,0:02:58.060
So, this is both clearer (the second version),
and also slightly more efficient.

0:02:58.060,0:03:06.390
Because we don't compute this very same mathematical
expression twice.

0:03:06.390,0:03:10.920
There is a concern that sometimes comes up
at this point, maybe also the reason why the

0:03:10.920,0:03:17.569
student originally writing this code didn't
do this renaming, that well, maybe in the

0:03:17.569,0:03:23.219
"else" branch we don't need the cosine (the
x value).

0:03:23.219,0:03:27.180
So, here we say: If this condition is true,
then we compute this, and then we have to

0:03:27.180,0:03:28.920
compute this a second time.

0:03:28.920,0:03:31.840
But if this condition is false, we go to the
"else" branch.

0:03:31.840,0:03:34.900
And maybe in the "else" branch we don't have
the cosine or the sine.

0:03:34.900,0:03:36.569
Maybe the "else" branch is really "blank".

0:03:36.569,0:03:41.529
Then one could argue that while here we compute
the x and the y, and then we check whether

0:03:41.529,0:03:46.139
the y is positive (if so, then of course we
use the x and y), and otherwise we do nothing

0:03:46.139,0:03:50.540
(we have the "blank"); then why do we have
the computation of x?

0:03:50.540,0:03:54.939
That is a concern that students might have
or have had at this point.

0:03:54.939,0:03:57.669
And well, this concern is unfounded.

0:03:57.669,0:03:58.669
Why?

0:03:58.669,0:03:59.709
Because we are not in an imperative language.

0:03:59.709,0:04:03.349
So, it's not even true that at this point we
compute x and y.

0:04:03.349,0:04:04.530
It's not a variable assignment.

0:04:04.530,0:04:09.590
It is not like you go through this piece of
code, and you compute this value, assign it

0:04:09.590,0:04:15.620
to x, compute this value, assign it to y,
do the check, and if we end up in the "else"

0:04:15.620,0:04:21.430
branch, and have a "blank", then we have computed
the x for nothing.

0:04:21.430,0:04:25.949
That's not what's happening here because
this is not sequential code by which we compute

0:04:25.949,0:04:27.949
this, and this, and this.

0:04:27.949,0:04:29.520
These are just mathematical definitions.

0:04:29.520,0:04:37.919
So, what this is saying is that x, if you
happen to need it later on, will be evaluated

0:04:37.919,0:04:39.840
using this expression.

0:04:39.840,0:04:46.199
So, it is not computing the x at all yet, just
declaring: If x is relevant at some point,

0:04:46.199,0:04:48.850
then that's what the value would be.

0:04:48.850,0:04:49.850
And the same goes for y.

0:04:49.850,0:04:52.250
Then, we check the y, of course.

0:04:52.250,0:04:56.340
The y will indeed be computed, but isn't computed
at this point when it is declared.

0:04:56.340,0:04:57.930
It's computed when this check happens.

0:04:57.930,0:05:01.590
And of course, we need the value of y in order
to do this comparison.

0:05:01.590,0:05:05.280
So, the y will be computed when we do this
check.

0:05:05.280,0:05:08.840
If this check is positive, then we will do
this, and then of course, we will need the

0:05:08.840,0:05:09.840
x.

0:05:09.840,0:05:10.919
And that's when the x would be computed.

0:05:10.919,0:05:16.470
So then that's when the cos t will be computed
here.

0:05:16.470,0:05:21.110
If, however, the y turns out to not be positive,
we end up in the "else" branch.

0:05:21.110,0:05:23.030
The "else" branch is "blank", for example.

0:05:23.030,0:05:25.240
So, it doesn't even mention x.

0:05:25.240,0:05:27.990
Then x will never be computed.

0:05:27.990,0:05:33.070
So, you have to free yourself from sequential
thinking, where seeing this, you think: Now

0:05:33.070,0:05:38.180
I compute the expensive x, and now I compute
the expensive y, and then I do something with

0:05:38.180,0:05:39.180
those values.

0:05:39.180,0:05:42.440
That's not what's happening, because this
is not sequential code.

0:05:42.440,0:05:45.930
It's mathematical declarations.

0:05:45.930,0:05:51.639
And if the x is not needed because in the
"else" branch we have "blank", then the x

0:05:51.639,0:05:58.650
will never be computed.

0:05:58.650,0:06:00.310
Let's talk a bit about types.

0:06:00.310,0:06:03.110
And first of all, about number types.

0:06:03.110,0:06:07.940
That is also something that is now increasingly
coming up in the exercises.

0:06:07.940,0:06:11.889
The first examples in CodeWorld, of course,
were all about Doubles, because that's the

0:06:11.889,0:06:15.520
unit in which things are measured in CodeWorld.

0:06:15.520,0:06:22.099
Then, in the last exercise task, about the
list of natural numbers, there was already

0:06:22.099,0:06:25.930
this integer type for non-fractional values (whole numbers).

0:06:25.930,0:06:32.389
And actually, some students already mixed
floating-point and integer types in that exercise.

0:06:32.389,0:06:33.389
It was not needed.

0:06:33.389,0:06:36.050
There was a way to compute this just on integers.

0:06:36.050,0:06:41.130
But some students tried to used conversion
for detecting the number of digits of a number.

0:06:41.130,0:06:43.970
Instead of working with division and rounding
of values, etc.

0:06:43.970,0:06:51.490
So, they already worked with functions that
move between floating-point and integer values.

0:06:51.490,0:06:56.320
You will, at some places, need both and also
their interplay.

0:06:56.320,0:06:58.020
So, we have to talk about this.

0:06:58.020,0:07:02.909
And it also serves as the first view into
some aspects of the types in Haskell, other

0:07:02.909,0:07:06.070
than what you have seen so far in function
types.

0:07:06.070,0:07:09.990
First of all, from the outside, Haskell does
have various number types.

0:07:09.990,0:07:14.569
Like in most programming languages, there
are integer types of different sizes and there

0:07:14.569,0:07:17.150
are floating-point types of different sizes.

0:07:17.150,0:07:18.949
So, you see here Float and Double.

0:07:18.949,0:07:26.270
They correspond roughly to what you find in
other languages with those type names.

0:07:26.270,0:07:29.300
The Rational type is maybe not so common in
other languages.

0:07:29.300,0:07:33.319
It's really a type of the rational numbers
with arbitrary precision.

0:07:33.319,0:07:35.169
These are not floating-point numbers.

0:07:35.169,0:07:39.009
Actually, every rational number is exactly
representable in this type.

0:07:39.009,0:07:43.930
So, there is no loss of precision when, for
example, adding rational numbers.

0:07:43.930,0:07:47.759
And also, for integers there is this interesting
distinction between Int and Integer.

0:07:47.759,0:07:52.729
And the way to think about this is that Int
is basically the machine integer, so something

0:07:52.729,0:07:56.190
which has a fixed bit length like 32 or 64
bits.

0:07:56.190,0:08:04.270
So, there is a finite range of integer numbers
that can be represented in Int.

0:08:04.270,0:08:06.650
Whereas Integer is the mathematical integer
type.

0:08:06.650,0:08:12.360
So, these are really arbitrary large integer
numbers, with an arbitrary number of positions

0:08:12.360,0:08:15.939
and no loss of precision.

0:08:15.939,0:08:18.889
So, we have these different types.

0:08:18.889,0:08:24.759
And of course, we can use our literal numbers
with different types, just as in other languages.

0:08:24.759,0:08:31.760
So, the number three, just a constant written
3, can be an Int, can be a Float, can be an

0:08:31.760,0:08:34.580
Integer, or can be a Rational, or many other
types.

0:08:34.580,0:08:39.070
So for a number you don't see, as given, which
type it is.

0:08:39.070,0:08:41.310
That is basically polymorphic or overloaded.

0:08:41.310,0:08:45.880
There are also constants that don't have all
the number types.

0:08:45.880,0:08:51.050
So if you write 3.5, then the compiler knows
(and also we do) that it's not an Int, nor

0:08:51.050,0:08:52.050
an Integer.

0:08:52.050,0:08:55.889
So, 3.5 could be a Float or a Double, but it
couldn't be an Integer, for example.

0:08:55.889,0:08:58.630
Whereas 3 can be both an Integer and a Float.

0:08:58.630,0:09:03.570
That's a common practice in other languages
as well.

0:09:03.570,0:09:07.510
Also, as expected in some sense, there are
conversion functions.

0:09:07.510,0:09:13.500
But we will see that they play a slightly
different role in some situations on the next

0:09:13.500,0:09:14.500
slide.

0:09:14.500,0:09:19.730
But if we need to convert between some of
these number types, then we can do so.

0:09:19.730,0:09:23.740
So, there are conversion functions that don't
lose precision.

0:09:23.740,0:09:30.839
These are functions that go from Int to Integer,
or other non-floating-point types to any number

0:09:30.839,0:09:31.839
type.

0:09:31.839,0:09:35.350
For example, if you want to go from machine
integers to this arbitrary precision integer

0:09:35.350,0:09:37.230
type, then you can use the function "fromIntegral".

0:09:37.230,0:09:39.851
It is not "fromInteger" or something like
that.

0:09:39.851,0:09:40.993
That is something students sometimes mix up.

0:09:40.993,0:09:47.370
Because there are also older versions of Haskell
where it is still existing, but not really

0:09:47.370,0:09:49.110
used, or mainly deprecated.

0:09:49.110,0:09:52.840
There is a 'fromInteger' function as well.

0:09:52.840,0:09:53.930
It's not something that you should use.

0:09:53.930,0:09:57.370
You should use the 'fromIntegral' function.

0:09:57.370,0:09:58.380
It has many different types.

0:09:58.380,0:09:59.700
It is also overloaded.

0:09:59.700,0:10:05.790
So, it can convert an Int to an Integer, an
Integer to an Int, an Int to a Rational, and

0:10:05.790,0:10:09.029
an Int to a Float/Rational/Double, as I mentioned
already.

0:10:09.029,0:10:15.670
So, these are basically from one integer type
into a number type, whether that number type

0:10:15.670,0:10:17.320
is an integer type or not.

0:10:17.320,0:10:18.820
And there is no loss of precision here.

0:10:18.820,0:10:21.570
Well, in the case of "from Integer to Int",
there is some loss of precision, of course.

0:10:21.570,0:10:26.850
There must be, because of the limited expressiveness.

0:10:26.850,0:10:31.260
But there's no loss of precision in terms
of rounding errors because of digits after

0:10:31.260,0:10:35.560
the comma sign or something like that.

0:10:35.560,0:10:38.970
Because this just goes from Integer and similar
types.

0:10:38.970,0:10:43.760
In the opposite direction, in some sense,
there are functions that really have a rounding

0:10:43.760,0:10:46.840
error/discrepancy.

0:10:46.840,0:10:52.410
Because if you have 3.5 and you want an integer,
then you have to go to 3 or 4, so you must

0:10:52.410,0:10:53.560
make a change.

0:10:53.560,0:10:56.670
You can round up, you can round down, you
can truncate.

0:10:56.670,0:11:00.800
And basically, for all these different modes,
there are functions in Haskell.

0:11:00.800,0:11:07.730
So "truncate" would go from 3.5 to 3, whereas
"round" would move from 3.5 to 4, because

0:11:07.730,0:11:08.730
of the rounding up.

0:11:08.730,0:11:13.560
And "ceiling" and "floor" are similar to "truncate",
but behave differently depending on whether

0:11:13.560,0:11:18.029
they get negative or positive numbers.

0:11:18.029,0:11:23.210
Which types do these precision losing conversion
functions have?

0:11:23.210,0:11:26.529
They can move from a Float to an Int, for
example.

0:11:26.529,0:11:30.860
Because the input would be a floating-point
number, because we have something like 3.5.

0:11:30.860,0:11:35.420
The outcome will be, again, an integral type
like Int or Integer.

0:11:35.420,0:11:38.550
That's because after you have "truncated",
you have a 3 or a 4.

0:11:38.550,0:11:41.459
So, you don't need a floating-point number
anymore.

0:11:41.459,0:11:53.010
You can move, with these functions, from this
to an Integer or Int type.

0:11:53.010,0:11:59.890
In addition to the constants that are overloaded,
also most of the mathematical operators are

0:11:59.890,0:12:00.890
overloaded.

0:12:00.890,0:12:07.070
Because it would be very cumbersome and inconvenient
(but actually, it is the case in some languages)

0:12:07.070,0:12:12.399
that you need different mathematical operators
depending on whether you work on floating-point

0:12:12.399,0:12:14.540
numbers or integer numbers, for example.

0:12:14.540,0:12:18.730
There are certain versions like a specific
function for integer division in Haskell,

0:12:18.730,0:12:21.060
but most of the operators are overloaded.

0:12:21.060,0:12:30.360
So if you have something like f x = 2 * x
+ 3.5, then you don't have to somehow make

0:12:30.360,0:12:37.040
your own distinction about 3.5 being a floating-point
number, and about this being an integer number.

0:12:37.040,0:12:41.800
In the sense that this may be an integer multiplication,
but then, floating-point additions, so maybe

0:12:41.800,0:12:43.709
some conversion would be needed.

0:12:43.709,0:12:46.910
No, because these operators are overloaded.

0:12:46.910,0:12:49.529
They work at the correct types.

0:12:49.529,0:12:54.490
So, in 3 + 4.5 the "+" knows that it must be
a floating-point addition, because we have

0:12:54.490,0:12:55.490
a floating-point number here.

0:12:55.490,0:12:59.510
It also knows that this 3, even though it
could also be an integer, will actually be

0:12:59.510,0:13:02.139
taken as a floating-point 3.

0:13:02.139,0:13:03.990
And that's also why this works.

0:13:03.990,0:13:08.360
And an appropriate type for f will be chosen
by the compiler if you do something like this.

0:13:08.360,0:13:11.370
It will work out that the x must also be a
floating-point value, because otherwise you

0:13:11.370,0:13:16.399
couldn't double it and then add it with a
floating-point addition.

0:13:16.399,0:13:22.361
Similarly, if you have some other function
which uses f, then again, we know from what

0:13:22.361,0:13:28.399
I just said that x (the argument of f) must
be a floating-point thing, because of this

0:13:28.399,0:13:29.399
expression.

0:13:29.399,0:13:33.600
And that works out nicely because the 4 can
also be seen as a floating-point value.

0:13:33.600,0:13:36.839
Then the outcome of the f will also be floating-point
values.

0:13:36.839,0:13:41.699
So, the g will actually know that this division
must be a floating-point division, so y must

0:13:41.699,0:13:42.699
also be a floating-point number.

0:13:42.699,0:13:48.319
So if you write something like this, then
we don't have to convert, because the language

0:13:48.319,0:13:52.230
overloads both the constants and the mathematical
operations.

0:13:52.230,0:13:57.470
That's the case here, because we leave the
compiler the choice of what types to assign

0:13:57.470,0:13:58.470
to x and y.

0:13:58.470,0:14:03.769
We haven't written down types for f and g,
and made no constraints on x and y, nor on

0:14:03.769,0:14:04.880
the outcome of these functions.

0:14:04.880,0:14:10.000
So, the compiler can, via overloading, choose
appropriate number types for x and y.

0:14:10.000,0:14:14.220
In this case, it will choose floating-point
types because of what I just explained.

0:14:14.220,0:14:21.079
If, on the other hand, we do write down explicit
function types, and those also constrain the

0:14:21.079,0:14:27.380
input and output types, for example to integers,
then we need to convert.

0:14:27.380,0:14:32.570
To illustrate this, let's look at a similar
example.

0:14:32.570,0:14:36.800
First, let's look at this here.

0:14:36.800,0:14:40.339
Let's say I want f to be a function from integers
to floats.

0:14:40.339,0:14:48.970
Then if I want to use the same expression
as here, I actually have to make sure that

0:14:48.970,0:14:51.589
this value in this position is a floating-point
value.

0:14:51.589,0:14:54.130
And it isn't.

0:14:54.130,0:14:58.250
If I say, f goes from integer to float, then
x would be an integer.

0:14:58.250,0:15:01.860
Then in order to use it for floating-point
multiplication, which I have to do because

0:15:01.860,0:15:06.410
afterwards I want to do a floating-point addition,
then I have to convert this x from Int to

0:15:06.410,0:15:07.889
a floating-point number.

0:15:07.889,0:15:12.029
And that's what "fromIntegral" can do, because
as I said on the previous slide, this "fromIntegral"

0:15:12.029,0:15:15.110
can go from types like Int or Integer to any
suitable other type.

0:15:15.110,0:15:16.870
So, it could go to Float.

0:15:16.870,0:15:19.019
So, this will work.

0:15:19.019,0:15:21.550
And this is then a kind of conversion.

0:15:21.550,0:15:25.279
Yes, it is not a syntactic conversion as happens
in C.

0:15:25.279,0:15:27.600
It's a function which does this conversion.

0:15:27.600,0:15:33.149
So, it is not somehow a built-in extra syntactic
construct.

0:15:33.149,0:15:35.839
And similarly, if for example I do an example
as above:

0:15:35.839,0:15:43.000
So, the f x is again free to choose its type,
but somehow in the second function, instead

0:15:43.000,0:15:50.040
of putting the value 4 here, I want to have
the length of the string "abcd".

0:15:50.040,0:15:54.850
Now I would have to know that the 'length' function
in Haskell is a function which takes, in this

0:15:54.850,0:15:56.970
case, a String, and gives a natural number.

0:15:56.970,0:16:00.680
It doesn't give a floating-point number, because
"length" makes more sense with an integer

0:16:00.680,0:16:01.680
result.

0:16:01.680,0:16:06.690
So if I write something like this (so I replace
the 4 by the length of "abcd"), then again

0:16:06.690,0:16:07.690
I need to convert.

0:16:07.690,0:16:08.690
Why?

0:16:08.690,0:16:12.050
Because here, the 4 didn't have a type, so
the compiler decided, via overloading: "Well,

0:16:12.050,0:16:14.399
I consider this 4 to be a floating-point number".

0:16:14.399,0:16:17.070
This can't be done here if I say it is the
result of the 'length' function.

0:16:17.070,0:16:20.279
The 'length' function always returns an integer.

0:16:20.279,0:16:25.220
If I then want to use it as an argument to
f, and for f the compiler has deduced that

0:16:25.220,0:16:30.810
the argument must be a floating-point value
because of this addition here, then I need

0:16:30.810,0:16:35.029
to make sure that I embed my integer (which
comes out of the 'length' function) into this

0:16:35.029,0:16:36.029
floating-point type.

0:16:36.029,0:16:37.889
And again, I can do this with "fromIntegral".

0:16:37.889,0:16:42.449
So, I would again need a conversion here.

0:16:42.449,0:16:44.279
Now, at this point, students sometimes ask:

0:16:44.279,0:16:48.759
"Why is it that here I have to make these
explicit conversions, whereas here they are

0:16:48.759,0:16:52.600
somehow hidden? Maybe the compiler is introducing
silent conversions here."

0:16:52.600,0:16:54.380
But that's not how to view this.

0:16:54.380,0:16:59.220
It is not the case that here we have explicit
conversions, and here we have somehow hidden

0:16:59.220,0:17:00.220
conversions.

0:17:00.220,0:17:01.220
No.

0:17:01.220,0:17:02.220
What's actually happening is:

0:17:02.220,0:17:06.130
Here we need conversions, here we don't need
conversions.

0:17:06.130,0:17:07.900
So, there are no hidden conversions.

0:17:07.900,0:17:11.740
Just by not giving types for f and g, we let
the compiler choose what the types are.

0:17:11.740,0:17:15.959
And the compiler can, in this case, choose
the types in such a way that no conversions

0:17:15.959,0:17:16.959
are necessary.

0:17:16.959,0:17:19.319
Because the compiler simply decides that x
is a Float.

0:17:19.319,0:17:21.970
Then there is no need for conversion.

0:17:21.970,0:17:25.559
If we say "No, the x is an integer", then
conversion is necessary.

0:17:25.559,0:17:28.100
And the compiler won't introduce conversion
on its own.

0:17:28.100,0:17:29.340
We have to write it.

0:17:29.340,0:17:42.850
Otherwise, it would defeat the discipline
of types in Haskell (also for number types).

0:17:42.850,0:17:47.669
For the sake of completeness: There actually
are some operators that are not completely

0:17:47.669,0:17:48.669
overloaded.

0:17:48.669,0:17:50.920
So, they are not available at all types.

0:17:50.920,0:17:52.299
And division is one of these examples.

0:17:52.299,0:18:01.190
The division symbol, as you are probably used
to see it in many languages, like this, is

0:18:01.190,0:18:03.160
not available on integer types.

0:18:03.160,0:18:05.450
It is a floating-point style operation.

0:18:05.450,0:18:10.770
It does work on the rationals, but not on
integer types.

0:18:10.770,0:18:12.170
What do we have instead?

0:18:12.170,0:18:15.000
We have a dedicated division function.

0:18:15.000,0:18:17.960
This operator "div" is also known from other
languages.

0:18:17.960,0:18:23.210
It operates on Int or Integer, but not on
floating-point numbers, for example.

0:18:23.210,0:18:27.650
So, it is really a different operation, a
different symbol than the slash symbol for

0:18:27.650,0:18:30.340
division on floating-point numbers.

0:18:30.340,0:18:40.429
A nice syntactical trick is that binary functions
like "div", but also all non-arithmetic functions,

0:18:40.429,0:18:41.600
can be used like operators.

0:18:41.600,0:18:46.250
So while there is no slash operator for division
in Haskell, this function can be used as an

0:18:46.250,0:18:50.860
operator by simply writing it infix and with
these backticks.

0:18:50.860,0:18:52.539
But that's just syntactic sugar.

0:18:52.539,0:18:59.880
So for "17 `div` 3", written this way, the
compiler knows that it is the same as applying

0:18:59.880,0:19:04.620
the binary function "div" to 17 and 3 as its
two arguments.

0:19:04.620,0:19:08.980
It is just a different way of writing it.

0:19:08.980,0:19:12.580
It is not a new operator or something like
that.

0:19:12.580,0:19:15.490
And another useful thing, of course, is that
many further mathematical constants and functions

0:19:15.490,0:19:16.490
exist.

0:19:16.490,0:19:17.490
We have seen some of them already.

0:19:17.490,0:19:18.490
I used the mathematical constant pi.

0:19:18.490,0:19:19.490
I used this sine function.

0:19:19.490,0:19:24.110
There also is this function for square root;
minimum and maximum functions on integers

0:19:24.110,0:19:25.320
and other types.

0:19:25.320,0:19:33.919
So, a lot of functions exist and have the expected
names, similar to mathematical libraries in

0:19:33.919,0:19:35.090
other languages.

0:19:35.090,0:19:38.010
I won't introduce all of them, they will simply
come up in examples.

0:19:38.010,0:19:44.730
So if you find a need, then maybe look up
in some Haskell library or the standard library

0:19:44.730,0:19:47.300
what the function is that you need for a certain
purpose.

0:19:47.300,0:19:54.450
So, I will not give a complete list or something
like that.

0:19:54.450,0:19:57.909
That shouldn't be needed.

0:19:57.909,0:20:04.120
Still in the context of number types, let
me also make an observation based on past

0:20:04.120,0:20:05.120
years' exercises.

0:20:05.120,0:20:10.620
So, this is also something that probably will
come up again in exercise tasks now.

0:20:10.620,0:20:14.140
I mentioned the need for conversion.

0:20:14.140,0:20:19.260
And the general strategy to deal with that
in your next exercise tasks, where you might

0:20:19.260,0:20:25.940
encounter both integer and floating-point
types, is that usually it doesn't hurt to

0:20:25.940,0:20:27.790
add some "fromIntegral" calls.

0:20:27.790,0:20:29.140
Why is that?

0:20:29.140,0:20:31.510
They may have many different types.

0:20:31.510,0:20:34.620
So, among others, they have types
like "Int → Int".

0:20:34.620,0:20:40.250
So if you have something which maybe draws
from a generator list in a list comprehension,

0:20:40.250,0:20:41.720
0 to 10 or something like that:

0:20:41.720,0:20:45.020
It would be an Int, but maybe you need to
use it as a Double.

0:20:45.020,0:20:49.590
Then it doesn't hurt to add a "fromIntegral"
on the variable that you draw from that "0

0:20:49.590,0:20:50.789
to 10" list.

0:20:50.789,0:20:53.830
Because either it will be used as an Int,
and that's fine, because "fromIntegral" will

0:20:53.830,0:20:57.900
turn Int into Int (nothing has changed), or
it will be used as a Double, and then you

0:20:57.900,0:21:01.290
are also fine, because you have added this
"fromIntegral" call, which will actually turn

0:21:01.290,0:21:03.470
the integer into a Double, for example.

0:21:03.470,0:21:07.910
In that sense, "fromIntegral" in the worst case
will be a no-op.

0:21:07.910,0:21:12.460
So, it doesn't really hurt to add it at certain
places, in particular, if you get error messages

0:21:12.460,0:21:16.500
about Int vs. Double, for example.

0:21:16.500,0:21:22.549
Also, if you add redundant fromIntegral calls,
actually the compiler/Autotool will warn you

0:21:22.549,0:21:23.549
about this.

0:21:23.549,0:21:25.710
So, in that sense, it doesn't hurt.

0:21:25.710,0:21:27.010
It is similar to the brackets.

0:21:27.010,0:21:32.279
In the beginning, when you write Haskell programs
you tend to add too many brackets, and maybe

0:21:32.279,0:21:36.740
it is even a good strategy at the beginning
to add a few more brackets just to be on the

0:21:36.740,0:21:42.230
safe side, and then let the compiler or Autotool
or whatever tool you use tell you which brackets

0:21:42.230,0:21:43.230
are redundant.

0:21:43.230,0:21:47.919
In a similar way, you could use this fromIntegral,
add it where you are suspicious that you might

0:21:47.919,0:21:53.770
need it, and if in your final program it turns
out it's not needed, then you can have the

0:21:53.770,0:21:58.580
compiler or Autotool tell you where you can
remove some of these "fromIntegral" calls again.

0:21:58.580,0:22:01.650
That's then a safe strategy.

0:22:01.650,0:22:04.110
That was one remark.

0:22:04.110,0:22:09.870
Another remark generally applies to all functions,
but specifically (because of all these conversion

0:22:09.870,0:22:13.090
issues) to types involving numbers.

0:22:13.090,0:22:18.789
It's good practice and really helpful to write
down type signatures, at least for the top-level

0:22:18.789,0:22:19.789
functions.

0:22:19.789,0:22:24.530
This has benefits like the compiler being
better able to help you with type errors.

0:22:24.530,0:22:29.419
But among other things, it saves you from
dealing with certain complicated looking types

0:22:29.419,0:22:30.460
like the one here.

0:22:30.460,0:22:36.651
So if you write some function on numbers, and
you don't say "I want this to be a function from Float

0:22:36.651,0:22:37.651
to Float",

0:22:37.651,0:22:40.140
then the compiler will infer some type.

0:22:40.140,0:22:46.360
It might infer something which looks somewhat
daunting like this "Floating a" and "Ord a",

0:22:46.360,0:22:51.880
and then this strange arrow which isn't a
function arrow, and then "a → a".

0:22:51.880,0:22:56.230
At the moment, you are not expected to understand
this.

0:22:56.230,0:23:01.000
If you want to have some inkling of what's
happening here: it's a bit similar to Java

0:23:01.000,0:23:10.320
interfaces, where "Floating" and "Ord" are basically
completely abstract classes (in Java, they would be

0:23:10.320,0:23:11.700
declared with "interface").

0:23:11.700,0:23:13.940
But you don't need this at this point.

0:23:13.940,0:23:20.470
And you can avoid such concepts in Haskell
by being more explicit.

0:23:20.470,0:23:25.409
So, if you write down that your "fun" is a
function from Int to Int, then the compiler

0:23:25.409,0:23:26.520
will believe you.

0:23:26.520,0:23:31.030
Well, it will not simply believe you, it will
check it.

0:23:31.030,0:23:37.150
And you don't have to rely on inference which
might lead to such complicated looking types.

0:23:37.150,0:23:40.030
So, this is a comment specifically about number
types.

0:23:40.030,0:23:44.210
But also more generally, at least top-level
functions in your exercise submissions should

0:23:44.210,0:23:45.230
be given type signatures.

0:23:45.230,0:23:49.309
You don't have to do it for all the local
definitions, like I did in the example earlier

0:23:49.309,0:23:52.770
today with the local functions x and y.

0:23:52.770,0:23:56.779
You don't have to write all the type signatures
for things like this, but for top-level functions

0:23:56.779,0:24:05.160
you should prefer to do it.

0:24:05.160,0:24:06.870
Of course, there are not just number types.

0:24:06.870,0:24:09.960
There are all kinds of types in Haskell.

0:24:09.960,0:24:17.520
And I will talk through some basic types on
this slide and probably afterwards make a

0:24:17.520,0:24:24.429
small video with the whiteboard to look at
some example values, in particular, for compound

0:24:24.429,0:24:25.429
types.

0:24:25.429,0:24:29.440
So, let's go through the pre-existing types
quickly, besides numbers.

0:24:29.440,0:24:32.030
So, there is a type of Boolean values.

0:24:32.030,0:24:35.180
And actually the only inhabitants of that
type are "True" and "False".

0:24:35.180,0:24:40.500
And on those values, you have operators like
"&&" (and), "||" (or), "not".

0:24:40.500,0:24:42.830
So, the logical operators on the Boolean type.

0:24:42.830,0:24:43.980
It is really a separate type.

0:24:43.980,0:24:49.830
It is not like in C, where somehow 0 and 1
of an integer type also act as Boolean values.

0:24:49.830,0:24:54.690
That is really a separate type: True and False,
and operators on them.

0:24:54.690,0:25:00.370
And of course, this type is actually also
the type of conditions you use in "if-then-else".

0:25:00.370,0:25:03.770
The condition must be something that evaluates
to a "Bool".

0:25:03.770,0:25:08.000
And also of course, you can use these Boolean
operators in these places.

0:25:08.000,0:25:11.480
So, this is one thing.

0:25:11.480,0:25:14.290
And then, there is a type of character values.

0:25:14.290,0:25:16.570
It is called "Char".

0:25:16.570,0:25:25.919
It has the expected values, like all the letters
that you can have, also special characters

0:25:25.919,0:25:27.870
like "a new line" ('\n'), etc.

0:25:27.870,0:25:37.270
There are operations like moving forwards
of backwards in the ASCII table, in a sense.

0:25:37.270,0:25:42.120
The successor of 'a' is 'b', and the predecessor
of 'b' as a character is 'a'.

0:25:42.120,0:25:47.340
You can also compare characters with the usual
comparison operations that you would also

0:25:47.340,0:25:48.340
use on numbers.

0:25:48.340,0:25:49.340
So, these are also overloaded.

0:25:49.340,0:25:53.669
More interestingly, there is a construction
of list types.

0:25:53.669,0:25:58.020
We have already seen some lists, namely when
we did list comprehensions: lists of pictures.

0:25:58.020,0:26:01.809
But this construction can be used arbitrarily.

0:26:01.809,0:26:03.010
So, you can have a list of anything.

0:26:03.010,0:26:04.070
You can have a list of integers.

0:26:04.070,0:26:05.200
You can have a list of Bools.

0:26:05.200,0:26:07.890
You can have a list of lists of integers.

0:26:07.890,0:26:10.110
And there are many predefined functions.

0:26:10.110,0:26:14.990
You see some of them later on, or maybe next
week.

0:26:14.990,0:26:23.230
But anyway, there is a lot of available machinery
to work on list, such as the list comprehensions,

0:26:23.230,0:26:26.010
but also defining functions and operators.

0:26:26.010,0:26:30.470
So, you have, for example, the 'reverse' function
which takes a list, reverses the order.

0:26:30.470,0:26:36.380
Or functions for selecting certain parts of
a list, the prefix or suffix, or whatever.

0:26:36.380,0:26:38.560
And: lists are homogeneous.

0:26:38.560,0:26:43.170
So, if you have a list of Ints (integers),
then in that list you can only have Int (integer)

0:26:43.170,0:26:44.170
numbers.

0:26:44.170,0:26:47.610
We can't have a list where some of the values
are integers and some of them are Boolean

0:26:47.610,0:26:48.610
values.

0:26:48.610,0:26:49.640
You have a type of integer (Int) lists.

0:26:49.640,0:26:51.429
You have a type of Boolean (Bool) lists.

0:26:51.429,0:26:55.520
But you don't have a type of "some of these
values are integers, and some are Booleans".

0:26:55.520,0:26:59.390
So, this has to be homogeneous.

0:26:59.390,0:27:05.370
Then there is a type of character sequences,
and it is called "String" as in other languages.

0:27:05.370,0:27:07.919
But it is a list of characters.

0:27:07.919,0:27:14.590
Yes, we can write a special notation ("abc"),
but what it really is under the hood, it is

0:27:14.590,0:27:19.539
a normal list, where the element type is the
character type (Char).

0:27:19.539,0:27:23.260
So "abc" is actually the list of these three
characters 'a', 'b' and 'c'.

0:27:23.260,0:27:27.890
So, something like the 'reverse' function I
just mentioned is also applicable on strings,

0:27:27.890,0:27:29.480
because strings are also just lists.

0:27:29.480,0:27:34.220
It just happens to be the case that it's a
list of characters.

0:27:34.220,0:27:42.679
Important in this connection is that in CodeWorld,
this String type is not directly used.

0:27:42.679,0:27:44.730
So CodeWorld uses its own text type.

0:27:44.730,0:27:45.730
It is called "Text".

0:27:45.730,0:27:47.170
It's very similar to String.

0:27:47.170,0:27:53.360
And you can also use notation like this, but
you also need to use the 'pack' function.

0:27:53.360,0:27:56.870
And if you have looked at the examples or
the templates for the last exercise we gave,

0:27:56.870,0:27:58.070
you can see this in action.

0:27:58.070,0:28:02.929
So, if you want to use strings or character
sequences in CodeWorld, then do it in the

0:28:02.929,0:28:07.440
same way it was done in the previous exercise
week.

0:28:07.440,0:28:12.980
From there, use the examples for how this
is done.

0:28:12.980,0:28:19.960
And then, there's another way to combine or
arrange values in a more complex structure.

0:28:19.960,0:28:22.049
Besides lists, there are tuple types.

0:28:22.049,0:28:26.630
But the difference with them is that, on the
one hand, they don't have to be homogeneous.

0:28:26.630,0:28:31.040
So, you can have a pair of integers or a triple
of integers, strings, and Booleans.

0:28:31.040,0:28:34.800
So, it doesn't have to be homogeneous, but
with a fixed length.

0:28:34.800,0:28:39.080
If you have a triple type, then all values
of the type must be triples.

0:28:39.080,0:28:44.100
You can't, like in a list type, have several
lists of different lengths, for example.

0:28:44.100,0:28:49.260
So list types are homogeneous and a list value
can be arbitrarily long.

0:28:49.260,0:28:57.350
Tuple types are not homogeneous: You can have
triples of different types as ingredients,

0:28:57.350,0:29:00.429
but every element of this type has to be a
triple.

0:29:00.429,0:29:05.450
You can't have a type which contains some
pairs and some triples, for example.

0:29:05.450,0:29:07.970
And all these constructs can be combined.

0:29:07.970,0:29:13.700
So, you can have lists of pairs, pairs of lists,
lists of pairs of lists and pairs.

0:29:13.700,0:29:17.419
You can nest basic types at all places.

0:29:17.419,0:29:22.540
And of course, later on, when we define our
own datatypes, they can also be used in lists

0:29:22.540,0:29:23.950
and tuples, etc.

0:29:23.950,0:29:34.179
So, there is a combinatorial domain of type
constructors and you can combine them in many

0:29:34.179,0:29:35.179
different ways.

0:29:35.179,0:29:40.299
And already with the basic things that you
see on this slide, you have quite a few choices

0:29:40.299,0:29:42.539
to arrange your data.

0:29:42.539,0:29:49.940
And to illustrate this, I will show some values
of some of these types in a separate whiteboard

0:29:49.940,0:29:50.440
video.
