
0:00:00.000,0:00:08.700
Diese Aufgabe ist erneut eine CodeWorld-Aufgabe.
Erneut geht es um eine Erweiterung eines alten

0:00:08.700,0:00:18.030
Programms. In diesem Fall soll der Baum animiert
werden, vom letzten Mal. Es gibt auch wieder eine

0:00:18.030,0:00:30.630
Vorschau, die wir uns dazu anschauen können. So
in etwa soll das Ganze aussehen. Dafür füge ich

0:00:32.760,0:00:45.360
erstmal den Code des Baums vom letzten Mal ein.
Die 'scene'-Funktion ist hier bereits definiert,

0:00:45.360,0:00:51.210
das heißt, die brauchen wir nicht. Stattdessen
definieren wir jetzt 'tree'. Ich füge das einfach

0:00:51.210,0:01:04.200
mal so ein und zeige das Ganze an. Also das ist der
Baum, der nicht animierte Baum, und zunächst ist es

0:01:05.010,0:01:15.870
günstig, den Baum zu unterteilen, und zwar anders
als das hier getan ist mit 'wood' und 'leaves',

0:01:15.870,0:01:24.900
sondern in bewegliche und nicht bewegliche
Teile. Die nicht beweglichen Teile bestehen

0:01:25.800,0:01:30.510
im Prinzip nur aus dem 'trunk'. Jetzt haben wir
hier diesen 'wood'-Teil, der aus 'trunk' und

0:01:31.020,0:01:36.510
'branches' besteht und dieses 'colored brown'. Um
diese Unterteilung zu machen, würde ich 'colored

0:01:36.510,0:01:44.170
brown' jetzt jeweils in 'trunk' und 'branches'
packen. Also anstatt das hier zu machen, kommt

0:01:44.170,0:02:03.550
das in 'trunk' und auch in 'branches'. Dann haben
wir den Baum sozusagen bestehend aus 'trunk' und

0:02:03.550,0:02:30.430
'movingParts'. Und 'movingParts' besteht aus den
'branches' und den 'leaves'. Und der Baum sollte

0:02:30.430,0:02:37.330
jetzt noch immer genau so aussehen wie vorher,
allerdings ist der Code jetzt umstrukturiert.

0:02:37.330,0:02:51.070
Dann geht es weiter, also jetzt wollen wir den
Baum bewegen, und wenn wir uns das hier nochmal

0:02:51.070,0:02:57.310
anschauen, dann sehen wir, dass eine Rotation
stattfinden soll. Jetzt könnte man natürlich

0:02:57.310,0:03:04.930
naiv sagen, wir rotieren dann einfach die Blätter
erstmal und gucken, was passiert, denn da haben

0:03:04.930,0:03:17.410
wir ja sowieso schon eine Rotation drin. Dafür
müssen wir den Parameter t, hier diesen Double-

0:03:17.410,0:03:25.270
Wert, auch in die beweglichen Teile weiterreichen.
Das heißt, dazu muss aus dem Wert 'movingParts'

0:03:25.270,0:03:33.520
eine Funktion werden, die entsprechend diesen
Parameter entgegennimmt. Genauso müssen

0:03:33.520,0:03:45.190
'branches' und 'leaves' solche Funktionen werden.
Also 'branches' wird auch zu einer Funktion von

0:03:45.190,0:03:57.610
Double nach Picture und 'leaves' auch, und sie
erhalten beide jeweils diesen Parameter t. Naiv

0:03:57.610,0:04:04.780
gesehen, habe ich gesagt, man könnte hier jetzt
einfach den t-Parameter mit in diese 'branches'

0:04:04.780,0:04:12.910
packen, und wenn man das ausführt, dann stellt man
fest: irgendwas ist verkehrt, nämlich es rotieren

0:04:12.910,0:04:19.690
nur die Äste, also das funktioniert so nicht. Also
gehen wir strukturiert daran. Ich zeige den Baum

0:04:19.690,0:04:30.670
nochmal an. Was müssen wir denn machen, damit sich
die Blätter und auch die Zweige so bewegen, wie in

0:04:30.670,0:04:41.470
dem Bild gezeigt? Wir müssen rotieren, und
zwar um diesen Punkt hier. Denn die Äste sollen

0:04:41.470,0:04:51.280
weiterhin am Baum bleiben, aber es soll da um
diesen Punkt rotiert werden. Das heißt, es wäre

0:04:51.280,0:04:59.890
günstig, diesen Punkt auch zu identifizieren.
Dafür können wir die 'coordinatePlane' nehmen,

0:04:59.890,0:05:12.790
die letzte Woche auch in der Übung vorgestellt
wurde. Wenn wir hier hinschauen, dann sehen wir:

0:05:12.790,0:05:25.810
Dieser Punkt liegt bei (0,2). Das ist der Punkt,
um den wir rotieren wollen. Was bedeutet das also?

0:05:29.320,0:05:43.240
Wir wollen eine Verschiebung um den Punkt (0,2)
in unseren 'movingParts' haben. Also hier soll

0:05:43.240,0:06:04.300
stehen: 'translated 0 2 branches'. Wenn ich das
jetzt machen würde, dann würde es natürlich die

0:06:04.300,0:06:10.750
Zweige weiter nach oben verschieben. Das ist nicht
das, was wir haben wollen. Also muss die Korrektur

0:06:10.750,0:06:18.220
in den 'branches' wieder erfolgen. Hier haben wir
schon eine Verschiebung um 2,5. Wenn ich die jetzt

0:06:18.220,0:06:34.830
auf 0,5 ändere, dann sind die Zweige wieder dort,
wo sie sein sollten. Jetzt kann ich ganz einfach

0:06:34.830,0:06:49.620
die Rotation um diesen Punkt ausführen, indem
ich das hier rotiere. Also nicht den verschobenen

0:06:49.620,0:07:14.970
Punkt, sondern hier diesen 'branches'-Teil.
Rotated um t. Das ist jetzt an der richtigen

0:07:14.970,0:07:22.110
Stelle, wir rotieren im Moment noch etwas zu weit,
aber das sieht erstmal gut aus. Tatsächlich wird

0:07:22.110,0:07:26.730
jetzt das t in 'branches' nicht mehr gebraucht.
Das heißt, das können wir hier wieder wegnehmen,

0:07:26.730,0:07:33.660
wir können 'branches' als Wert betrachten.
Dementsprechend kann das wieder verschwinden

0:07:33.660,0:07:41.670
und wir haben dieses Verhalten. Dasselbe wollen
wir jetzt auch bei 'leaves' machen. Da gilt

0:07:41.670,0:07:51.030
natürlich auch dasselbe, also ich kann jetzt hier
mal 'rotated t' angeben für den 'leaves'-Teil.

0:07:59.120,0:08:06.080
Und dann sehen wir, das ist nicht das, was
wir haben wollten. Wir wollen wieder genau

0:08:06.080,0:08:10.100
diese Verschiebung. Also wir wollen wieder
dasselbe Verhalten wie bei 'branches' hier.

0:08:10.100,0:08:22.790
Die Verschiebung um (0,2) und dann das
Rotieren. Also 'translated 0 2 (rotated

0:08:24.500,0:08:32.570
t leaves)' und hier den t-Parameter benötigen
wir wieder nicht in 'leaves'. Das heißt,

0:08:32.570,0:08:44.390
'leaves' kann ein Wert sein und braucht
keine Funktion zu sein und dann muss hier

0:08:45.890,0:08:54.590
die Verschiebung wieder um 2 reduziert werden auf
der y-Koordinate, da hier ja schon um 2 verschoben

0:08:54.590,0:09:07.100
wird. Dann funktioniert die Rotation so, wie
wir uns das vorstellen. Kleine Änderung am



0:09:07.100,0:09:13.700
Code. Wir haben hier zweimal 'translated 0 2' und 'rotated t'. Das heißt, wir können

0:09:13.700,0:09:20.990
das Ganze auch zusammenfassen und können hier sagen, dass 'branches' und 'leaves', dass das

0:09:20.990,0:09:44.900
als Parameter sein soll. 'Rotated t (branches & leaves)'. Das erhält erstmal die Funktionalität,

0:09:44.900,0:09:59.090
aber ist besser lesbarer Code. Nun müssen wir es noch schaffen, dass der Baum, also die Krone,

0:09:59.090,0:10:06.860
nicht komplett im Kreis dreht, sondern sich nur hin und her bewegt. Dafür können wir uns

0:10:06.860,0:10:14.890
jetzt überlegen, dass wir an den beweglichen Teil hier nicht t übergeben, sondern einfach nur einen

0:10:14.890,0:10:25.360
bestimmten Winkel, den wir gerade haben wollen. Den bekommen wir mit einer trigonometrischen

0:10:25.360,0:10:32.680
Funktion. In dem Fall bietet sich Sinus an, da wir am Anfang den Baum genau so rotiert haben wollen,

0:10:32.680,0:10:51.670
wie er am Anfang ist und danach wollen wir den Baum nach rechts und nach links rotieren. Hier

0:10:51.670,0:11:03.430
rotieren wir erst nach links und dann nach rechts und rotieren immer wieder hin und zurück. Jetzt

0:11:03.430,0:11:11.890
kann man noch ein bisschen an der Darstellung arbeiten. Die Äste gehen relativ weit rüber,

0:11:11.890,0:11:18.250
deshalb kann man vielleicht die Amplitude der Rotation noch etwas senken. Sagen wir mal mit

0:11:18.250,0:11:27.370
0,3 mal. Wenn die Amplitude gesenkt wird, ändert sich auch die Geschwindigkeit der

0:11:27.370,0:11:33.040
Rotation. Das könnte man beheben, indem man dann die Geschwindigkeit erhöht. Also z.B.

0:11:33.040,0:11:42.550
die doppelte Geschwindigkeit, indem wir 2 * t als Parameter an die Sinus-Funktion übergeben.

0:11:42.550,0:11:51.040
Und dann kommen wir natürlich zu unserer letzten Anforderung an das Programm. Es soll auch so sein,

0:11:51.040,0:12:01.060
dass die Rotation nach einer bestimmten Zeit endet. Das können wir erreichen, indem wir eine

0:12:01.060,0:12:13.420
Fallunterscheidung machen. Das heißt, wir können sagen, wenn t kleiner als irgendein Endwert ist,

0:12:13.420,0:12:27.740
z.B. '2 * pi', dann rotieren wir, ansonsten geben wir als Winkel 0 an. Das heißt, die Rotation endet

0:12:27.740,0:12:42.890
dann, weil wir nicht mehr weiter rotieren. Jetzt muss man beachten, dass man für dieses Beenden

0:12:42.890,0:12:51.920
auch einen günstigen Zeitpunkt nimmt, nämlich einen, zu dem die Animation auch wirklich sanft

0:12:51.920,0:12:58.580
beendet wird. Wenn ich hier z.B. einfach < 2 wähle, dann werden wir in der Animation sehen,

0:12:58.580,0:13:09.020
dass es abrupt endet. Das heißt, es gibt so einen Sprung. Das wollen wir nicht haben,

0:13:09.020,0:13:21.170
deshalb müssen wir einen Wert wählen, der genau am Ende einer solchen Rotation liegt, damit dann auch

0:13:22.190,0:13:32.120
das Wanken des Baumes sanft endet. Dann können wir die 'coordinatePlane' da wegnehmen, dann die

0:13:32.120,0:13:40.370
Animation noch einmal anschauen und jetzt sehen wir auch, dass die Rotation nach einer gewissen

0:13:40.370,0:13:53.390
Zeit endet. Somit haben wir die Aufgabe gelöst und das basierend auf dem alten Programm. Man kann das

0:13:53.390,0:14:03.500
Ganze auch von Grund auf neu entwickeln. Dabei kann man vermeiden, dass die Rotation zweimal

0:14:03.500,0:14:19.790
durchgeführt wird. Also wir rotieren hier ja einmal den Gesamtteil der Krone und man könnte

0:14:19.790,0:14:28.710
es aber auch so machen, dass man die Rotation hier mit in den 'branch'-Teil mit einbaut und

0:14:28.710,0:14:36.360
dann die 'leaves' nur noch rotiert. Das wäre dann auch eine mögliche Option, um nicht den 'branch'

0:14:36.360,0:14:42.360
Teil sozusagen zweimal zu rotieren. Das könnte man machen, wenn man das von Grund auf entwickelt.

0:14:42.360,0:14:48.810
Aber darauf möchte ich nicht weiter eingehen, stattdessen belasse ich das hier jetzt dabei.

