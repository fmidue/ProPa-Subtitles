0:00:00.000,0:00:07.500
In dieser Codeworld Aufgabe sind ganz viele Teile
schon vordefiniert. Es geht hier im Prinzip um ein

0:00:07.500,0:00:16.230
Spiel, um die Welt für ein solches Spiel, um
genau zu sein. Wir haben eine level-Funktion

0:00:16.230,0:00:28.860
vordefiniert, die uns aus einem Tupel, also einem
Paar von Integern einen Integer liefert, und zwar

0:00:28.860,0:00:37.770
genau eine Definition von einen bestimmten
Typen. Hier steht als Kommentar immer da, was

0:00:37.770,0:00:46.470
für ein Typ das sein soll und diese entsprechenden
Typen, die sind definiert als Bilder. Das heißt,

0:00:46.470,0:00:53.460
man kann hier genau immer diese Bilder sehen,
die für dieses paar generiert werden sollen.

0:00:55.410,0:01:07.620
Das heißt bei 1 soll das 'block' sein, bei zwei
'water' und so weiter. Unsere Aufgabe ist als

0:01:07.620,0:01:21.930
erstes genau diese Funktion zu definieren, diese
aTile-Funktion, die einen Integerwert nimmt,

0:01:21.930,0:01:27.990
also einen, den diese Funktion zum Beispiel zurück
liefert und dann das entsprechende Bild liefert,

0:01:27.990,0:01:36.750
was hier dargestellt ist. Und dabei können wir
sozusagen hier schauen, was passieren soll in dem

0:01:36.750,0:01:50.310
jeweiligen Fall. Bei 1 soll der Wert 'block'
zurückkommen und so lässt sich das straight

0:01:50.310,0:02:07.650
forward definieren, also bei 2 soll 'water' sein
bei 3 'pearl' bei 4 'air'. Und ganz wichtig auch

0:02:07.650,0:02:16.680
noch, hier ist 0 definiert für außerhalb des
Levels, besser ist es wohl, wenn alles andere als

0:02:16.680,0:02:24.240
außerhalb des Levels definiert wird, weil dann
ist auch gleichzeitig der der Fall abgedeckt,

0:02:24.240,0:02:32.580
dass sozusagen keine Definition gegeben. Was ist
denn außerhalb des Levels überhaupt? Das können

0:02:32.580,0:02:38.460
wir einfach als das leere Bild nehmen. Dafür haben
wir 'blank' und das können wir einfach einsetzen.

0:02:41.130,0:02:49.560
Das wäre der erste Teil der Aufgabe. Der zweite
teil der Aufgabenstellung ist nun genau diese

0:02:49.560,0:03:00.690
Spielfläche zu erzeugen und dafür haben sichtbare
Koordinaten von -10 bis 10 für x und ebenso auch

0:03:00.690,0:03:11.580
für y. Dann soll die aTile-Funktion genutzt
werden um das entsprechende Bild zu produzieren.

0:03:11.580,0:03:20.130
Hier steht natürlich auch noch da, dass das
sicherlich besser funktionieren kann, als alle

0:03:20.130,0:03:28.410
dieser einzelnen Definition, alle Kombinationen
dieser Zahlen händisch hinzuschreiben. Und zwar

0:03:28.410,0:03:36.330
auch noch besser als rekursiv. Wie kann man das
denn sonst machen? Als List Comprehension. Das

0:03:36.330,0:03:42.150
haben wir hier in CodeWorld auch schon öfters
gesehen, also mit der pictures-Funktion kann

0:03:42.150,0:03:47.820
man aus einer Liste von Bildern ein Bild machen
und genau das nutzen wir jetzt hier auch aus

0:03:47.820,0:04:04.860
und wir sollen die 'aTile' Funktionen aufrufen und
zwar auf, genau was soll die denn darstellen? Hier

0:04:04.860,0:04:12.090
kriegen wir einen Integerwert, also sollen wir
hier reingeben, den Integerwert bekommen wir über

0:04:12.090,0:04:22.770
die level-Funktion. Das heißt, wir übergeben
an 'aTile level' von den Koordinaten x und y. Die

0:04:22.770,0:04:27.720
Koordinaten haben wir jetzt natürlich noch nicht,
aber wir müssen ja über jede mögliche Kombination

0:04:27.720,0:04:34.200
von x und y laufen und da bietet sich auch die
List Comprehension perfekt an, weil sie uns das

0:04:34.200,0:04:43.140
Kreuzprodukt liefert. Das heißt, wir können hier
von den Koordinaten - 10 bis 10 laufen auf der

0:04:43.140,0:04:56.820
x Koordinate und ebenso auf der y Koordinaten
und kriegen so alle Kombinationen von den x und

0:04:56.820,0:05:05.070
y Werten und können so unser Bild malen. Wenn wir
das machen, dann sieht das noch nicht richtig aus

0:05:05.070,0:05:13.530
weil wir hier nur ein Feld haben. Warum ist das
der fall? Ich kommentiere das kurz mal, um die

0:05:13.530,0:05:20.700
Übersichtlichkeit besser zu bewahren. Wir haben
hier 'aTile' aufgerufen, aber wir haben den Block

0:05:20.700,0:05:31.530
noch nicht dahin positioniert, wo er hingehört,
denn wir haben ja noch die Koordinaten, haben die

0:05:31.530,0:05:37.950
aber noch nicht benutzt, um das entsprechende bild
zu platzieren. Dafür können wir die 'translated'

0:05:37.950,0:05:47.490
Funktionen wie gewohnt verwenden und übergeben
hier x und y und dann das entsprechende 'aTile'.

0:05:47.490,0:05:54.840
Jetzt meldet CodeWorld hier einen Fehler, nämlich
dass der Typ 'Integer' nicht mit dem Typ 'Double' zu

0:05:54.840,0:06:06.600
matchen ist. Warum tritt dieser Fall auf? Weil
wir hier bei 'translated' einen Doublewert

0:06:06.600,0:06:16.830
brauchen und hier den Integerwert haben. Um das
zu korrigieren, müssen wir hier den x Wert in

0:06:16.830,0:06:28.180
einen Doublewert wandeln durch die Benutzung von
'fromIntegral' und dasselbe für den y Wert wird

0:06:28.180,0:06:37.330
auch. Wenn wir das machen, dann verschwindet die
Fehlermeldung und wenn wir es ausführen erhalten

0:06:37.330,0:06:42.520
wir das komplette Spielfeld, was wir erwartet
haben und sind fertig mit dieser Aufgabe.
