0:00:02.000,0:00:03.600
Welcome back to exercise 4

0:00:04.480,0:00:08.320
First off, we have Task10
where we should write a little

0:00:08.320,0:00:13.760
function that checks if a string that is
given as an input is a palindrome or not.

0:00:14.560,0:00:19.600
So whether it's the same word
read forwards or backwards.

0:00:24.640,0:00:31.360
We start with naming the parameter
xs, for example, and then

0:00:33.280,0:00:39.280
if we look at the lecture slides there was
a function that did a very similar thing.

0:00:39.840,0:00:47.600
It also checked for palindrome: xs == reverse xs

0:00:48.240,0:00:49.440
Nice and declarative.

0:00:51.600,0:00:56.160
And is this already a solution to our task?

0:00:56.160,0:01:05.600
Well, we have this test suit here so we can
just load it into ghci and test whether this

0:01:05.600,0:01:08.560
has the desired behavior.
So let's do that.

0:01:11.440,0:01:18.480
Load the ghci for Task10.
Okay, and now we run main which

0:01:18.480,0:01:23.520
does some QuickCheck testing and tells
us whether we have done the right thing.

0:01:25.360,0:01:28.720
Okay, so the first test passes.

0:01:31.040,0:01:34.720
A single character is a palindrome
according to our function.

0:01:35.920,0:01:41.920
But the second test fails because what we do is we

0:01:43.120,0:01:50.160
take a random character and a random
string and put the character in uppercase

0:01:51.280,0:01:58.320
in the front and unaltered in the back, and
it tells us that for this character being a

0:01:58.320,0:02:06.160
and string being the empty string our isPalindrome
function does not do the same right thing.

0:02:06.160,0:02:12.560
So let's check that.
isPalindrome of adding an upper

0:02:12.560,0:02:22.480
case to the front of the empty string and then
lowercase to the back; indeed does not yield True.

0:02:24.000,0:02:31.040
Okay, so in contrast to the palindrome function
from the lecture we should here take care of

0:02:31.600,0:02:35.920
upper and lower case and make sure
that the case does not matter.

0:02:35.920,0:02:39.520
So our 'isPalindrome' function
should be case insensitive.

0:02:40.240,0:02:43.840
Okay, so how do we do this?

0:02:43.840,0:02:49.920
We have this 'toUpper' and
'toLower' function to work with.

0:02:49.920,0:02:54.560
So what we have to do is transform the whole list

0:02:55.200,0:03:03.840
into, for example, the lower case variant of
it before we check it against its reverse.

0:03:04.960,0:03:09.520
We could obviously choose up uppercase
making everything uppercase as well

0:03:09.520,0:03:11.920
But let's go for lower.

0:03:12.880,0:03:20.560
So how can we do this; transform everything into
lowercase? Well, we use a list comprehension.

0:03:24.080,0:03:29.120
Getting every element from the
list and then applying toLower

0:03:31.680,0:03:35.680
to that element giving us this new list.

0:03:35.680,0:03:47.120
And then you just check this lowered list to
against its reverse and see if it's the same.

0:03:47.120,0:03:58.960
So if we reload this into ghci now
for isPalindrome of "Aa" we get True.

0:03:58.960,0:04:10.960
We can test it on some other palindromes like
this play around with the capitalization.

0:04:13.440,0:04:14.400
Seems to work.

0:04:14.400,0:04:19.120
Let's try the QuickCheck tests
again, and this time both succeed.

0:04:21.520,0:04:26.560
So this is a valid solution.
Is there another solution?

0:04:27.760,0:04:36.800
There's always another solution, at least in most
cases, so let's try to find another solution.

0:04:39.040,0:04:47.120
Let's define isPalindrome' :: String ->Bool

0:04:56.000,0:04:57.680
Let's start with the basic skeleton.

0:04:58.400,0:05:06.160
Let's again name the parameter.
And now what can we do?

0:05:08.880,0:05:13.760
Let's use the functions 'head' and 'last'.

0:05:14.960,0:05:17.440
If we check out ghci what they do.

0:05:18.480,0:05:22.560
We have head of some list
- let's take the list [1..5],

0:05:24.240,0:05:34.480
for example -
head to gives us 1 and tail gives us the rest.

0:05:36.000,0:05:38.240
And we also have 'last'

0:05:42.080,0:05:52.240
and 'init' and with these functions we are
going to try to implement isPalindrome now.

0:05:52.240,0:06:00.640
Because we can compare the first element against
the last and then cleverly use tail and init to

0:06:01.760,0:06:06.160
get the middle list and then
recursively call isPalindrom.

0:06:06.160,0:06:13.680
So what we're doing is we're getting the head of
the list and comparing it to the last element,

0:06:13.680,0:06:20.240
exactly what the palindrome is, if the first and
the last are equal then it can be a palindrome.

0:06:21.840,0:06:33.040
And then we say okay, if this is the
case then also isPalindrome' of ...

0:06:33.040,0:06:34.880
And now we need the middle list

0:06:34.880,0:06:41.040
and for the middle list to get this
we cleverly combine init with tail.

0:06:41.040,0:06:43.120
Because if we take first the tail

0:06:45.600,0:06:56.080
and then the initial part of the tail we end up
with dropping the first and the last element.

0:06:56.080,0:07:05.920
So we're doing this here init (tail xs).

0:07:07.360,0:07:11.600
And now we need to take care of
the upper and lower case as well.

0:07:15.440,0:07:21.440
So toLower here and here.

0:07:26.480,0:07:30.840
And now ...

0:07:31.760,0:07:38.440
isPalindrome' of our example ...

0:07:39.680,0:07:43.840
Oh there's something wrong.
We have forgotten something.

0:07:46.720,0:07:52.400
Basically we're doing recursion
here and we're taking init and tail

0:07:52.400,0:07:56.720
but we're never checking for the empty list.

0:07:56.720,0:08:05.120
Because head does not work on the empty list,
tail does not work on the empty list init

0:08:07.120,0:08:10.260
some work some don't.
(Actually, none of the used functions do!)

0:08:10.260,0:08:12.640
If we take head [] gives an error,

0:08:14.960,0:08:20.600
tail [] is an error, init [],

0:08:22.080,0:08:26.560
and the last [] is also an error.

0:08:26.560,0:08:29.280
There are some functions like
this that work on empty lists.

0:08:32.720,0:08:35.120
None of these work on empty lists.

0:08:35.120,0:08:40.080
So we need to make sure that we actually catch

0:08:41.440,0:08:49.120
the case where the list is empty or small
enough where we don't need to do recursion.

0:08:49.680,0:08:50.880
So we add some guards.

0:08:53.280,0:08:53.840
Make this the

0:08:58.080,0:09:00.720
otherwise case, and

0:09:02.320,0:09:13.040
check the length and we say the length has to be
smaller than 2 then we know it's a palindrome.

0:09:15.120,0:09:20.960
Because if it's empty, i.e,
length xs == 0 it is a palindrome,

0:09:20.960,0:09:26.000
and if it's just a single character
it is also a palindrome, by default.

0:09:27.920,0:09:30.160
Okay, now let's try this again.

0:09:34.080,0:09:37.680
Now we get the desired result.

0:09:37.680,0:09:43.120
We can again do this capitalization
thing and now if we change

0:09:45.600,0:09:54.400
the function in these tests to
refer to our alternative solution.

0:09:55.600,0:10:03.840
Load this up and run main it passes all the
tests so this is a valid solution as well.
