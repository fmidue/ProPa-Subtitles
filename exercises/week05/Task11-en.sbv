0:00:03.200,0:00:05.600
Next, we have Task 11.

0:00:05.600,0:00:11.600
And here we should implement a
function that sums a list of integers,

0:00:14.240,0:00:18.240
and that uses some sort of
divide and conquer approach.

0:00:18.800,0:00:20.160
That is, we should

0:00:21.200,0:00:27.840
use this splitting 'splitAt' function to
split the list in two parts of equal size.

0:00:28.720,0:00:36.080
And then recursively compute the sum of
these lists and in the end combine them.

0:00:37.440,0:00:40.400
And we should only use one equation.

0:00:41.440,0:00:48.320
We can use guards but we cannot introduce
additional equations, for example,

0:00:48.320,0:00:54.720
with a where clause, so we are encouraged
to use let instead if we need a where.

0:00:57.120,0:01:01.200
Okay, so let's start by
giving the parameter a name.

0:01:03.360,0:01:08.640
And then let's think about the basic structure.

0:01:08.640,0:01:10.320
So we start with

0:01:14.560,0:01:21.360
splitting the list to an a and b.

0:01:22.480,0:01:25.840
And let's just use the

0:01:27.920,0:01:34.560
function call from right here.
Our list is called xs in this example.

0:01:34.560,0:01:46.640
Okay and now we also need to
give it the list parameter.

0:01:48.000,0:01:53.840
Now we have an a and a b and
these are two lists of integers.

0:01:55.840,0:02:00.000
Now you can also define the sum of a.

0:02:03.920,0:02:07.840
And the sum of b.

0:02:08.360,0:02:14.160
- Just for clarity as extra bindings -

0:02:14.160,0:02:18.960
And then we just say okay, sum a + sum b.

0:02:21.120,0:02:24.720
Okay, so that's our basic
divide and conquer approach:

0:02:24.720,0:02:28.160
We split the list into two equal parts

0:02:29.360,0:02:38.160
in the middle, that's what this div 2 here
does, and then we take the left part sum it up,

0:02:38.720,0:02:47.200
take the right part sum it up, by a recursive
calls, and then we combine the results.

0:02:47.200,0:02:49.840
Okay, so is that all?

0:02:49.840,0:02:56.800
Well, if we look at this test down
here we see that sum [] should equal 0.

0:02:57.840,0:03:04.000
Well, that's not really encoded
anywhere here in our function.

0:03:04.000,0:03:08.320
So, let's add some guards to
make sure we catch this case.

0:03:09.680,0:03:17.840
Let's add the guard in case xs is the empty list.

0:03:20.000,0:03:22.480
So null xs would return True.

0:03:23.440,0:03:38.320
And the otherwise case has our divide and conquer
scheme and if our list is empty we just return 0.

0:03:39.520,0:03:45.840
Okay let's load this up.

0:03:54.880,0:03:56.320
Let's try it out.

0:03:56.320,0:04:02.560
So sum [] = 0. Okay so far so good.

0:04:02.560,0:04:09.280
Let's check a list with one
element, oh so nothing is happening.

0:04:11.120,0:04:15.440
Or maybe there's something
happening but it's not finishing.

0:04:16.880,0:04:18.880
Now we get a stack overflow.

0:04:22.320,0:04:24.240
So what's the problem here?

0:04:24.240,0:04:28.160
Well, let's take a look at our splitting function:

0:04:29.520,0:04:35.040
We have a list with one element
so this list has length 1.

0:04:35.040,0:04:44.160
And if we have 1 `div` 2 we get
0. Because this takes the division

0:04:44.720,0:04:52.800
and ignores the rest of the division
if it isn't a clear division.

0:04:53.440,0:04:58.000
Okay so what we actually do is we do

0:04:58.000,0:05:12.480
splitAt 0 [1] in this case.
So this is what this (a, b) does.

0:05:12.480,0:05:15.360
So we end up with [] and [1].

0:05:19.520,0:05:25.680
And then we recursively call
sum [], this would return zero.

0:05:26.880,0:05:36.320
But now we call sum again on [1] which is what
we just did so we have an infinite loop here.

0:05:36.880,0:05:46.640
Because for lists of length one the
splitting does not produce any progress.

0:05:47.760,0:05:55.800
So we need to get an additional case .

0:05:56.720,0:06:06.480
If the length of xs is one then we
just have one element in our list.

0:06:06.480,0:06:07.440
What's the sum?

0:06:07.440,0:06:12.880
Well, it's just that element, so this
one element is the head of the list.

0:06:16.240,0:06:17.200
Let's check that:

0:06:18.640,0:06:30.000
So now sum [1] is actually that
element (1) like we would expect.

0:06:30.000,0:06:37.920
Okay, so does it work for
lists with multiple elements?

0:06:40.080,0:06:41.680
Let's check some examples...

0:06:44.800,0:06:47.840
Okay, looks good.

0:06:49.280,0:06:54.320
You can check some bigger examples:
Let's sum all the numbers from 1 to 100.

0:06:57.760,0:07:01.200
This also looks right.

0:07:06.560,0:07:07.760
So this seems to work.

0:07:10.000,0:07:15.520
There exist some variations of this program.

0:07:15.520,0:07:22.880
For example, if we would like to calculate the
length of the list just once we could try to

0:07:25.440,0:07:29.840
fit these two cases into one.

0:07:30.720,0:07:36.720
If we were allowed to use where we could
do that and define something like...

0:07:38.440,0:07:44.160
... where n = length xs.

0:07:44.160,0:07:47.680
Then we can use n here and here.

0:07:48.960,0:07:51.520
But in this case we are not allowed to do this.

0:07:53.760,0:08:06.560
So if we want to do the same kind of
refactoring we just do it in the otherwise case.

0:08:06.560,0:08:18.560
So, we use let n = length xs.

0:08:20.160,0:08:27.360
And then we can use if to check if n == 1.

0:08:29.360,0:08:35.920
If this is the case we return head xs.

0:08:36.480,0:08:39.840
And else

0:08:45.520,0:08:50.160
we do the divide and conquer strategy.

0:08:53.440,0:09:01.680
And now we have calculated length xs only once.
Not necessarily for performance reasons

0:09:01.680,0:09:08.400
but for readability and maintainability
of our solution this is a good idea.

0:09:13.360,0:09:21.360
Okay, so that's that for Task 11.
