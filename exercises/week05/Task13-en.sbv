0:00:02.000,0:00:05.120
For the last task this week
we switch over to CodeWorld.

0:00:05.760,0:00:15.920
And here we have given a level description
for some video game where we have Integer

0:00:15.920,0:00:24.560
coordinates that are mapped to an Integer value
indicating what to draw at that specific location.

0:00:26.960,0:00:34.800
So we have four different types of
tiles that we would like to draw and

0:00:38.320,0:00:40.560
zero indicating blank space.

0:00:40.560,0:00:47.680
And we have these four different tiles
defined here, already given to us.

0:00:47.680,0:00:49.520
And we should now

0:00:51.360,0:00:58.960
define a function that does this mapping from
these numbers to the actual images for the tile.

0:00:58.960,0:01:03.600
And then we should build a scene
that renders the whole level

0:01:06.400,0:01:11.840
from values for x and y from -10 to 10.

0:01:12.640,0:01:19.280
Okay, let's start with mapping the integer
encoding of the tiles to the actual pictures.

0:01:22.560,0:01:28.400
Once again, first we can name our input.

0:01:28.960,0:01:31.680
And now it's tempting to

0:01:32.720,0:01:48.400
just use guards and say, okay input 0 then
we're using blank if x == 1 and so on.

0:01:50.080,0:01:53.840
This works fine but it's
not the best way to do it.

0:01:55.360,0:02:00.960
Instead of using guards here, you can
write the integers directly here and

0:02:02.800,0:02:15.680
Haskell will match these and choose the correct
right-hand side depending on what input we get.

0:02:15.680,0:02:24.080
So we can just write it like this for 0
and then write aTile 1 = ... and now 1

0:02:25.440,0:02:31.120
should correspond to blocks, so we
just choose the picture for block here

0:02:31.840,0:02:36.800
aTile 2 should be water.

0:02:39.280,0:02:45.680
aTile 3 is a pearl.

0:02:48.400,0:02:54.880
And aTile 4 is air.

0:02:54.880,0:03:01.520
And then instead of the otherwise
we can use the wildcard (_).

0:03:01.520,0:03:14.560
Just say this blank and now we could merge
this zero case with the one down here.

0:03:15.920,0:03:24.800
So aTile 0 is then caught by
this case and produces blank.

0:03:27.360,0:03:39.120
Okay, so let's quickly see if this works
by using this function here in scene.

0:03:43.600,0:03:49.680
For 1 we get the block, for
2 we hopefully get water.

0:03:51.200,0:03:54.000
Yes, that's what water looks like here.

0:03:58.240,0:03:59.840
Then we have the pearl.

0:04:04.880,0:04:07.120
And air.

0:04:10.480,0:04:18.480
Okay, this works fine and if we now use 0 we
get in the default case where it's just blank.

0:04:19.280,0:04:22.880
And the same thing happens if
we, for example, choose something

0:04:23.920,0:04:35.680
way out of bounds like 11 so
we have a blank picture there.

0:04:35.680,0:04:42.320
Okay, so now how do we actually
draw all these coordinates?

0:04:42.320,0:04:49.360
So we should go from -10 to 10 on both
dimensions and evaluate the level,

0:04:50.000,0:04:56.240
check out what we have to
draw there and then draw it.

0:04:56.240,0:05:00.480
And the task requires us
to not use recursion here.

0:05:00.480,0:05:12.000
So what we do is, we use a list comprehension
because we want to evaluate the 'level' function

0:05:13.200,0:05:23.840
at some x's and y's and these x's and y's
are drawn from the range of -10 to 10.

0:05:34.640,0:05:41.760
Let's change the layout a little bit.

0:05:41.760,0:05:44.320
This will come in handy in a second.

0:05:46.400,0:05:50.880
Okay, now we have all these
red squiggly lines that

0:05:50.880,0:05:55.440
tell us that this is actually
a [Integer] and not a Picture.

0:06:00.320,0:06:03.680
But it is a list of Integers
so that's a good first step.

0:06:03.680,0:06:10.640
Now we have this 'aTile' function which
actually converts Integers into Pictures

0:06:12.080,0:06:18.880
so we call aTile on this Integer value
that we just got from the 'level' function.

0:06:19.680,0:06:26.720
And now the compiler complains that we should have
given a Picture but instead given a [Picture].

0:06:26.720,0:06:37.680
Well, we use the 'pictures' function to combine
these multiple pictures into one single Picture.

0:06:38.240,0:06:44.560
And now we evaluated the level at
each position and drawn the tile.

0:06:44.560,0:06:50.320
But they are all on top of each other,
that's not really what we wanted.

0:06:50.320,0:07:00.400
We have this huge list of tiles and
they are all in the coordinate origin.

0:07:01.600,0:07:03.360
So we need to translate them.

0:07:10.400,0:07:19.840
And the question is what values
we use to translate them?

0:07:24.000,0:07:25.920
Just x and y really.

0:07:28.880,0:07:37.600
For example, the (-10, -10) tile should go
all the way here and down here somewhere.

0:07:37.600,0:07:40.080
So we translate it by -10 and -10.

0:07:42.240,0:07:43.840
Now we have a problem though.

0:07:44.960,0:07:49.760
Because translated requires Doubles
and the level requires Integers,

0:07:51.440,0:07:54.560
x cannot be both a Integer and a Double.

0:07:54.560,0:08:04.800
So the error occurs here because this is
inferred first to Double and then here

0:08:04.800,0:08:11.840
we try to use the x and y that are
inferred as Double as Integers.

0:08:13.440,0:08:20.240
Generally it's better to use non-floating
point numbers for these ranges

0:08:20.240,0:08:25.840
because they behave more nicely so
we want to actually change these.

0:08:27.360,0:08:31.760
We want to treat x and y as Integers
and convert them to Double here.

0:08:31.760,0:08:42.000
And for that we use fromIntegral x.

0:08:47.600,0:08:49.280
Same for y.

0:08:50.800,0:08:56.480
And now the compiler is happy
because this x is now an Integer.

0:08:56.480,0:09:02.080
Here we use it as Integer to call level and
here we convert it from an Integer to a Double.

0:09:03.600,0:09:07.840
Okay, so let's see what happens.

0:09:11.760,0:09:16.560
This is our level as specified over here.

0:09:21.200,0:09:29.120
And with this translation function from Integers
to pictures and this layout here we get our nice

0:09:31.200,0:09:33.280
grid-based level.

0:09:33.280,0:09:36.840
And if we now change something here ...

0:09:39.440,0:09:41.560
Change what is drawn there ...

0:09:41.560,0:09:46.400
We can alter the level.

0:09:46.400,0:09:57.200
And you can play around with this and design your
own level if you want which is a fun exercise.

0:10:04.240,0:10:07.840
Okay, so that's that for this task.

0:10:09.280,0:10:13.040
If you know that you should use a list
comprehension for it, the solution

0:10:13.920,0:10:15.040
comes really naturally.

0:10:16.160,0:10:21.120
You follow the types a bit to make
sure everything fits together.

0:10:23.760,0:10:31.840
Nothing too fancy but the result is quite nice.
