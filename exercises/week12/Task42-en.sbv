0:00:00.480,0:00:05.360
Hello, in this task we are writing the predicate
'penultimate', and we know this needs to be a

0:00:05.360,0:00:10.320
binary predicate because of the '\2' here, and
this predicate needs to be such that given a

0:00:10.320,0:00:17.040
list 'Xs' and an element 'X' it returns true if
'X' occurs as the penultimate element in the list

0:00:17.040,0:00:23.440
'Xs', so the second to last element. We have two
examples here, given the list '[a,b,c,d]' and the

0:00:23.440,0:00:28.800
element 'c' it should return true, because 'c'
is indeed the second to last element, and given

0:00:28.800,0:00:34.320
the list '[a,b,c]' and 'c' should not return true,
because now 'c' is not the second to last element,

0:00:34.320,0:00:41.360
that would be 'b'. Now what cases do we need to
cover here? Usually, since we are working with a

0:00:41.360,0:00:47.680
list of undetermined length, we would first take
a look at the case with the empty list, you could

0:00:47.680,0:00:56.800
write this like so... however this tells Prolog
that given an empty list and a variable X this

0:00:56.800,0:01:01.280
should return true and this is not what we want,
because an empty list doesn't have a penultimate,

0:01:01.280,0:01:08.480
so what do we do here? Unlike Haskell which throws
an error at us if we leave some case undefined

0:01:09.120,0:01:13.360
Prolog doesn't do this, any undefined
case is simply false and we can

0:01:13.360,0:01:19.680
use this to our advantage by just not defining
this case, because we would want this to be false.

0:01:21.840,0:01:27.200
But I can still work with this, because we can
extend this to the next case; which would be a

0:01:27.200,0:01:31.840
list with just one element, but once again
a list with just one element doesn't have a

0:01:31.840,0:01:36.800
penultimate element, so we don't want this case to
be true as well. So the next case is the first one

0:01:36.800,0:01:43.440
that actually could return true and that would
be a list with two elements, two elements have

0:01:43.440,0:01:48.160
a penultimate element which also happens to be the
first element, so we call the first element 'X',

0:01:49.040,0:01:52.720
same as our parameter that we're looking for,
because these two need to be the same for this

0:01:52.720,0:01:59.120
to be true, and the second element in the list we
can just use the underscore, because while we need

0:01:59.120,0:02:05.520
this to be in here we're not going to be using
it, so we can basically not assign it to anything.

0:02:06.340,0:02:10.160
This just tells it "okay, I have a list
with two elements, the first of which

0:02:11.360,0:02:17.440
should be the same as my parameter, and if
that's the case return true", so this is our

0:02:18.560,0:02:21.840
first case that can return true. Now

0:02:23.040,0:02:29.440
for the next case, obviously, logically
that would be a list with three elements but

0:02:30.000,0:02:36.400
this doesn't really make that much sense, finding
it like this, because while this can be true

0:02:37.120,0:02:42.480
we would then need to define the case for a list
of four elements and five elements and so on and

0:02:42.480,0:02:46.880
that's not really practical, because we want
to work with lists of any length, so instead

0:02:46.880,0:02:53.360
what we're gonna do here is... we already have
a true case, why don't we just use recursion to

0:02:53.360,0:02:58.800
reduce down any lists that are longer than that to
eventually get into this case? So we're going to

0:02:58.800,0:03:03.600
do this by still taking the first element, and
now we're going to use the pipe character and

0:03:03.600,0:03:08.640
call the remaining list Xs; the pipe character
kind of works like the double point in Haskell,

0:03:08.640,0:03:13.840
so this tells it this is a list with a first
element and then some remaining list afterwards,

0:03:15.360,0:03:23.040
and we define this as only being true when another
call to penultimate, taking this now reduced list,

0:03:23.040,0:03:33.920
so the tail basically, and our parameter X, is
true. So we are basically taking the list here

0:03:33.920,0:03:39.360
that is NON-EMPTY, throwing the
first element away, and calling penultimate again

0:03:39.360,0:03:45.440
on the remaining list. So no matter how long the
list, we are eventually gonna reduce it down to a

0:03:45.440,0:03:50.240
case where it's just two elements long and then
we fall into this case and it can check, "Okay,

0:03:50.240,0:03:55.280
is the first element of my two element list the
same as my parameter?", and if so, return true and

0:03:55.280,0:04:00.560
then we get our result, which is exactly what we
want. So this basically already solves our task.

0:04:02.880,0:04:09.760
Now we can save this and load it up into a
Prolog prompt, and now we can actually try out

0:04:11.040,0:04:16.560
our new predicate here with the examples from the
task description. So I've taken this [a,b,c,d]

0:04:17.200,0:04:24.240
and element 'c', it should return true... and
it does. And given the list [a,b,c] and 'c'

0:04:24.240,0:04:29.680
should return false and it does as well,
so this is working correctly. Obviously now

0:04:30.320,0:04:34.080
this is of course a little boring, this is just
validation, we already know the full list and

0:04:34.080,0:04:41.840
we already know the second to last element, so
what else can we do here? We can actually just

0:04:41.840,0:04:47.440
change the second parameter to a variable, this
big X here and then the query is changed to:

0:04:48.400,0:04:54.080
"I know the first parameter is a list of
[a,b,c], but I don't know the penultimate,

0:04:55.360,0:05:00.960
find me a suitable substitution for X
for which penultimate returns true",

0:05:00.960,0:05:05.440
so we're basically now asking Prolog to
find the second to last element for us,

0:05:05.440,0:05:10.400
and if we query this we can see it gets us
X is 'b' which is exactly what we're looking

0:05:10.400,0:05:15.840
for. This is the penultimate element and that's
the substitution for the variable that we are

0:05:15.840,0:05:23.040
looking for here and with that it found the second
to last element for us. Now something else that

0:05:23.040,0:05:26.960
we can do, and I'm going to turn trace on for
this so you can see what's actually going on,

0:05:27.840,0:05:35.360
is switch this around... let's say we don't know
the list but we know that the second to last

0:05:35.360,0:05:41.840
element should be 'a', now we can create this and
then using the trace we can see the first call is

0:05:43.280,0:05:49.840
our parameter, this '(_3156)' is a placeholder
value that Prolog uses, whenever you see these

0:05:49.840,0:05:56.640
underscore with some number value this is how
Prolog sees this Xs or whatever variable you've

0:05:56.640,0:06:02.480
used, and our 'a' that we're looking for and
then the next step... oh it's found a list

0:06:03.040,0:06:11.040
containing 'a' as the first element and some
other value, this could be anything, this is

0:06:11.040,0:06:15.840
another placeholder, but this is basically just
a list with the penultimate element of 'a'

0:06:16.400,0:06:20.720
and some other value, this could be anything,
and of course this is our 'a' and then it returns

0:06:20.720,0:06:24.560
us this value here, and if we keep doing
this by clicking semicolon you can see...

0:06:27.440,0:06:30.880
it builds us increasingly longer lists,
now this is a list of three elements,

0:06:33.200,0:06:36.800
now a list with four elements and so on,
we could keep going like this although it

0:06:36.800,0:06:43.120
gets a bit messy with the trace on. So what's
basically going on here, is in the first step

0:06:43.120,0:06:49.440
it doesn't know the list but it knows our variable
already or what 'X' should be, and then it goes

0:06:49.440,0:06:55.200
through all the definitions it has in this rule
set here and it sees "Okay, the first one tells me"

0:06:55.200,0:07:02.000
here's X and here's a list with X in it as well,
so why don't I just make a list with any element,

0:07:02.000,0:07:07.760
and the 'X' I already know and give it back?"
and then the next step goes one step further

0:07:08.800,0:07:14.480
gets into here, makes the recursion call, ends
up here again, and then once again it sees "okay,

0:07:15.040,0:07:18.640
that's the X that I already know and this
is the X that needs to be in the list,

0:07:18.640,0:07:23.360
so I can build the list", and it takes a step back
on the recursion, adds the elements it moved again

0:07:24.000,0:07:31.040
and then that's how it creates the lists longer
than that. So this is pretty useful, now instead

0:07:31.040,0:07:38.320
of just having a program that can validate for
us, if we already know the penultimate element,

0:07:38.320,0:07:44.800
it can also find the penultimate element for us
or build us lists with the element that we know,

0:07:45.680,0:07:50.480
as the penultimate element. Obviously it
doesn't work if we don't know either parameter

0:07:50.480,0:07:56.640
that should be pretty clear. Now if
we turn off trace for a moment and

0:07:57.680,0:08:04.800
do something else, because one of the interesting
things to consider here is "What happens to all

0:08:04.800,0:08:11.040
of this, if we swap these rules around?" Let's
say we thought of the recursion immediately and

0:08:11.040,0:08:16.480
the recursion step right away and then we
wrote the final case afterwards, so this

0:08:16.480,0:08:23.360
just happened to be how we were thinking about
this. Does this change anything? We save this and

0:08:24.640,0:08:31.280
load it up again, and then turn trace back on
again... I turned trace off, because it gets kind

0:08:31.280,0:08:39.360
of ugly when it loads a file, but that's just an
aside, now you also saw how to turn trace off and

0:08:39.360,0:08:48.080
on again. So now with the file reloaded in this
configuration here, let's run our cases again,

0:08:48.800,0:08:54.880
so first case the list [a,b,c,d] and 'c', it
should return true. You can walk the trace

0:08:54.880,0:09:02.560
here and we can see it's working it out and it
returns true for us. Okay that works, the other

0:09:02.560,0:09:09.680
case was [a,b,c], let's see, this should return
false and we can see it working it out again,

0:09:10.320,0:09:16.560
and it returns false as well. Now the case of
finding the second to last element for us...

0:09:18.560,0:09:28.640
okay, it found X = b our second to last element in
this list again, so this all still works. However

0:09:29.920,0:09:36.880
we now use the case where we're looking for
the list itself and looking for any lists with

0:09:36.880,0:09:42.720
'a' as the penultimate element... walking through
this let's see... okay taking a little longer,

0:09:43.360,0:09:49.920
we just keep going... you can see it never gets
out of this step, if we had trace off we would

0:09:49.920,0:09:56.000
eventually get a stack error, because it runs out
of stack space, because it keeps going. As you can

0:09:56.000,0:10:02.080
see these are all different placeholders, it just
keeps going into the first case so basically it

0:10:02.080,0:10:10.720
has some placeholder here for this list, and then
it takes part of that list and calls this again,

0:10:10.720,0:10:17.760
then it ends up back in here so we are basically
looping through this first case here and never

0:10:17.760,0:10:22.400
getting to the second case, which would be
the only case where it actually sees "Okay,

0:10:22.400,0:10:27.920
this is the X I'm looking for and this is
where it should be in the list." So basically

0:10:28.560,0:10:33.920
if we order it like this searching for list in
this case doesn't work, because it just keeps

0:10:34.800,0:10:42.960
stepping through the first case... and to end
this we actually need to abort this process,

0:10:42.960,0:10:48.640
because otherwise it just keeps going until the
stack error, but that takes a little while with

0:10:48.640,0:10:53.440
trace on. You can turn trace back off again
for a moment to see what the error looks like

0:10:53.440,0:10:59.440
if we run this... and we can see it takes a little
while, and then it tells you 'Out of local stack'

0:11:00.640,0:11:06.480
and it keeps doing that, so once again
we abort this. But that was just a little

0:11:06.480,0:11:16.160
aside so let's change this back to the correct
configuration here and this is our task solved!
