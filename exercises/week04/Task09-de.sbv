0:00:00.000,0:00:09.690
Zum Schluss haben wir noch Task 9. Auch das ist
wieder eine kleine Aufgabe, wo wir eine Animation

0:00:09.690,0:00:14.490
gegeben haben, die wir abändern sollen.
Wir haben hier so ein paar Sachen,

0:00:14.490,0:00:18.720
die alle übereinander passieren
und wir sollen das so sortieren,

0:00:18.720,0:00:27.090
dass es hintereinander abläuft und auch an all den
Stellen noch kleine Modifikationen vornehmen.

0:00:30.240,0:00:36.180
Diese drei Animationen, die hintereinander
ablaufen sollen, sind hier oben gegeben. Die sollen wir

0:00:36.180,0:00:43.080
nicht verändern. Das heißt, wir sehen die ersten
Animationen dauert 2 Sekunden, die zweite 3,

0:00:43.080,0:00:54.570
die dritte wieder 2 Sekunden. Wenn wir das
noch mal abspielen, sehen wir, dass die

0:00:54.570,0:01:01.260
eine früher aufhört, bzw. zwei hören früher
auf als die anderen, die eine dauert noch eine

0:01:01.260,0:01:11.400
Sekunde länge. Was wir machen sollen: Wir sollen
diese 'scene' Animation so abändern, dass die drei

0:01:11.400,0:01:20.040
Animationen hintereinander abgespielt werden und
am Ende der Schriftzug dasteht. Wie in der letzten

0:01:20.040,0:01:24.630
Aufgabe sind hier Guards hilfreich. Natürlich kann
man das auch wieder mit 'if then else' schachteln,

0:01:24.630,0:01:35.490
aber das sieht nicht schön aus und ist nicht
so der klassische Haskell weg. Das heißt,

0:01:35.490,0:01:43.650
wir machen erst mal jede Animation, weil
die sollen ja nicht alle gleichzeitig

0:01:43.650,0:01:49.350
abgespielt werden, sondern immer eine auf einmal,
tun wir jeweils alles hinter einen Guard und

0:01:49.350,0:02:00.750
packen erstmal so eine wild card da rein. Der
Compiler sagt uns, dass wir da irgendwelche

0:02:00.750,0:02:08.490
booleschen Ausdrücke reinschreiben sollen.
Der letzte ist wie immer 'otherwise',

0:02:08.490,0:02:19.140
unser default case sozusagen. Jetzt müssen wir
hier irgendwie Ausdrücke reinschreiben, wann die

0:02:19.140,0:02:27.570
einzelnen Animationen abgespielt werden sollen,
die dann von oben nach unten geprüft werden, um

0:02:27.570,0:02:33.540
zu gucken was gewählt wird. Wenn wir die Animation
erstmal einfach der Reihe nach abspielen wollen,

0:02:33.540,0:02:42.390
gucken wir uns an, wie lange sind die Animationen.
Die erste Animation ist zwei Sekunden lang. Das

0:02:42.390,0:02:49.080
heißt, wenn t kleiner als 2 ist, spielen wir die
erste Animation ab, die zweite Animation geht 3

0:02:49.080,0:03:00.690
Sekunden. Das heißt, wenn t unter 5 ist, spielen
wir die zweite Animation ab, also zwischen 2 und 5, und

0:03:00.690,0:03:12.230
bei kleiner gleich 7 spielen wir Animation 3, weil
Animation 3 wieder 2 Sekunden lang ist.

0:03:14.300,0:03:20.150
Gucken wir uns das an, dann sehen wir: Wir fangen mit dem
roten Kreis an, dann kommt das schwarze Rechteck

0:03:20.150,0:03:30.500
und dann irgendwie nichts. Was haben wir falsch
gemacht? Wir haben den t Parameter in der letzten

0:03:30.500,0:03:38.390
Aufgabe auch gleich gelassen, wieder nicht angepasst. Das
heißt, hier müssen wir natürlich jetzt sagen: Wir

0:03:38.390,0:03:45.260
wollen wieder bei 0 starten, sonst kommen wir hier
oben sofort in den blank. Wir haben das Rechteck

0:03:45.260,0:03:51.800
einmal kurz gesehen, weil hier eine Sekunde
noch über war, aber wir müssen im Prinzip die

0:03:51.800,0:03:58.640
vorherige Zeitschranke jedes mal wieder abziehen,
damit jetzt ganz normal erst der Kreis kommt,

0:03:58.640,0:04:08.810
dann das Rechteck und der Kreis. Dann haben wir
noch die zusätzliche Aufgabe. Wir sollen nicht nur

0:04:08.810,0:04:16.370
alles nacheinander abspielen, sondern wir sollten
auch noch Animation 2 skalieren, mit Faktor 2,

0:04:16.370,0:04:25.820
und Animation 3 soll auf halber Geschwindigkeit
abgespielt werden. Skalieren können wir die

0:04:25.820,0:04:34.940
'scaled' oder 'dilated' Funktion verwenden.
'scaled' würden wir so verwenden. Wir skalieren

0:04:34.940,0:04:47.390
einfach nach beiden Achsen um 2, aber weil wir
um beide Achsen gleich skalieren, können wir auch

0:04:47.390,0:05:00.260
'dilated' verwenden, das macht genau, dass beide
Achsen um ein und denselben Faktor skalieren. Das

0:05:00.260,0:05:10.840
heißt, jetzt ist die zweite Animation doppelt so
groß. Jetzt muss nur noch die dritte Animation

0:05:10.840,0:05:15.760
auf halber Geschwindigkeit. Wie machen wir
das? Halbe Geschwindigkeit heißt einfach,

0:05:15.760,0:05:27.310
der Zeit-Parameter ist halb so groß. Wenn die
Zeit halb so schnell vergeht für die Animation,

0:05:27.310,0:05:33.970
wird sie halb so schnell abgespielt, weil
die Änderung nur halb so schnell passiert.

0:05:33.970,0:05:47.290
Dann sehen wir jetzt, dass der Kreis deutlich
langsamer ist als vorher. Und das ist im Prinzip

0:05:47.290,0:06:02.500
schon die Aufgabe hier. Viel kann man hier nicht
unbedingt variieren. Man könnte natürlich auch,

0:06:02.500,0:06:07.390
wenn wir die Animationen verändern würden,
auch wieder, wie in der letzten Aufgabe,

0:06:07.390,0:06:15.220
Parameter rausziehen, die wir hier einbauen
würden, dass man die Animationslänge anpassen

0:06:15.220,0:06:20.500
könnte und dass es sich automatisch
hier anpasst. Aber ist nicht gegeben,

0:06:20.500,0:06:25.420
hier in dieser Aufgabe. Wir nehmen die Animationen
einfach so, wie sie sind und rechnen das von Hand

0:06:25.420,0:06:31.810
aus. Aber das ist auch nicht schlimm, es geht
hauptsächlich darum, dass man sieht, wie man

0:06:31.810,0:06:39.460
die Guards verwendet und zwischen verschiedenen
Animationen oder generell Ausdrücken auswählt.
