0:00:01.200,0:00:08.400
This task is again a CodeWorld task which
is based on another task we had before.

0:00:09.120,0:00:17.200
And that one is the rising sun task which
we're gonna advance on with this task.

0:00:19.200,0:00:27.440
Here again we have a preview of what we shall
do and also an animation which demonstrates what

0:00:27.440,0:00:37.280
we shall not do and then another one where
we can see what advancements are possible.

0:00:37.920,0:00:47.120
So first of all - this is what we want
to do so we want to have the sun rising

0:00:47.120,0:00:52.480
and when the sun is sunken then we want to
have the moon rising and so on and so forth.

0:00:55.200,0:01:08.160
And this is not what we want to do - so the moon
shall not rotate during the rising and setting.

0:01:09.280,0:01:16.080
And this is an advancement that we
can do so when this sun is rising we

0:01:16.080,0:01:20.880
have just the sky and when the moon is
rising we have additionally some stars.

0:01:21.840,0:01:26.720
Okay, so first of all let's go back to our task.

0:01:26.720,0:01:33.600
This time is a bit different so we have
blanks in here instead of 'undefined's

0:01:36.160,0:01:43.600
and we can replace the parts of the program here.

0:01:43.600,0:01:48.320
So first of all let's run the code here.

0:01:48.960,0:01:52.240
So it's happening nothing
because we have these blanks

0:01:52.240,0:01:59.120
in here and the scene defines - or -
is defined as grass and sun or moon.

0:02:01.200,0:02:07.120
Yeah, okay - let's stop this animation
here first of all and then I insert

0:02:08.000,0:02:17.600
code which we had in the previous task
- which is definitions of the scene.

0:02:19.440,0:02:26.880
This time, yeah, the scene looks different, so
we have already a definition for scene given.

0:02:26.880,0:02:32.960
And this one is one of the older tasks and
I've included another version of it as well.

0:02:33.520,0:02:42.480
And yeah. And we have the grass. So,
let's take the grass as we had it before.

0:02:42.480,0:02:51.040
So I remove the given part of grass and
replace it by the old one. And yeah.

0:02:51.040,0:03:01.520
And then we change the part for sun or moon.

0:03:01.520,0:03:10.640
So, we have sun or moon given here and
let's just place the old part of the scene,

0:03:11.360,0:03:17.360
but without the grass into the sun or moon part.

0:03:17.360,0:03:23.200
So, well, let's see what's happening here.

0:03:23.200,0:03:31.920
So, now it's basically what we had in the old
task and if i run this stuff we shall see a

0:03:31.920,0:03:39.120
sun which is rising and then setting again
and standing still there at a certain point.

0:03:39.760,0:03:43.840
Now, what was different in the previous
task: we had to start and end point.

0:03:43.840,0:03:51.120
So, we don't need this one anymore so we
can remove start and end point first of all.

0:03:52.800,0:04:04.400
So, let's just say we have the position
given by t here and we remove this part here.

0:04:05.120,0:04:05.920
So, now.

0:04:09.520,0:04:15.280
Now we, yeah if we run this one here,

0:04:15.840,0:04:26.720
we have a rising sun and the setting sun and
then it continues to go beneath our horizon.

0:04:26.720,0:04:45.120
That's not what we want to do. But, yeah, we
want it to be different for - so we want to

0:04:45.120,0:04:53.840
have the sun rising and then the moon rising
so we have two parts we want to insert here.

0:04:53.840,0:05:00.240
And how can we decide whether we want
to have the sun rising or the moon?

0:05:00.240,0:05:09.360
Well we have the t parameter again and we know
that it is a half circle we want to have the sun

0:05:09.360,0:05:16.000
available and the half circle we want to have
the moon available as both are going to be

0:05:17.040,0:05:23.520
rotating for a certain amount of time
- and this shall be a half circle.

0:05:23.520,0:05:32.240
And so, we, as we do the moving by using
this t parameter here directly - this t

0:05:32.240,0:05:42.480
parameter - we can say that this is exactly
the point where t gets to the value of pi.

0:05:42.480,0:05:46.640
So, if we change that then we are

0:05:46.640,0:06:02.960
- well, say that the rotation should go to the
- yeah - to the time point where the - value

0:06:02.960,0:06:18.160
is less than pi, then we can say - so t is less
than pi then we want to have the sun moving.

0:06:19.040,0:06:27.360
So, and I'm using a guard here and we can
use another guard which says otherwise

0:06:28.480,0:06:36.000
we want to move the moon. So,
translated x and y - and the - moon.

0:06:36.560,0:06:43.520
So, this is a rather naive
implementation. And? Would it work now?

0:06:44.400,0:06:45.280
Well, what's happening?

0:06:45.280,0:06:51.440
We are moving the sun and then we
are moving the moon well the moon

0:06:51.440,0:06:58.800
is at the wrong position - and
then it continues to run so.

0:06:59.360,0:07:01.040
There are two points wrong.

0:07:01.040,0:07:03.360
First of all the moon is going

0:07:05.440,0:07:09.520
below the grass, which is not what we
want, and then the moon continues to move.

0:07:10.640,0:07:18.720
So, let's first of all fix the
moon going below the grass level.

0:07:18.720,0:07:24.400
We can introduce a function move
here for the translated part.

0:07:25.360,0:07:32.560
Because we have it defined in both parts
here we have translated for sun and for moon

0:07:32.560,0:07:36.000
and we want to have the
same moving for both parts.

0:07:36.640,0:07:48.800
So we can introduce a new function
called move and this one shall move

0:07:53.280,0:07:59.680
our objects - which is p

0:07:59.680,0:08:02.640
So it's some picture p we want to move.

0:08:04.160,0:08:11.840
So this is just a simple refactoring.
We do move of sun and move of moon.

0:08:13.040,0:08:19.360
And move is of type picture to picture.

0:08:21.840,0:08:37.280
So we can now move this one and we need another
parameter which is t which is our time for moving.

0:08:37.280,0:08:42.480
So, now we can have the same
implementation as before.

0:08:42.480,0:08:47.040
Nothing has changed if we run the
program we get the same result.

0:08:47.040,0:08:51.440
But now we can say that we want to move the moon

0:08:54.480,0:09:04.960
by simply saying we move the moon
when we have the time point minus pi.

0:09:04.960,0:09:07.840
So that should lead to moving

0:09:08.480,0:09:15.680
the moon after the sun starting from
here again. Which is happening here.

0:09:15.680,0:09:19.280
But still the moon continues to
move - that's not what we want.

0:09:19.280,0:09:22.320
So? How can we fix this part?

0:09:22.320,0:09:33.360
Well, I said here, we use the time point t
when it's lower than pi for moving the sun.

0:09:34.240,0:09:43.760
What we actually want is we have used our
trigonometric functions here already sine of t.

0:09:44.320,0:09:47.120
And if we use this one we can say.

0:09:48.080,0:10:00.240
Well actually we want to move the sun when we have
a time point where the sine of t is above zero.

0:10:01.040,0:10:03.840
So, we can say

0:10:04.720,0:10:13.600
we want to have all the time points where sine
of t is greater than zero for moving the sun.

0:10:15.600,0:10:26.000
So now, we move with the first time point, of the,
of the rotation we move the sun and, with the,

0:10:26.000,0:10:31.840
where the sine is less
than zero we move the moon.

0:10:32.480,0:10:36.320
And now the animation continues and we have

0:10:36.320,0:10:42.160
sun rising moon rising sun rising
moon rising and so on and so far.

0:10:45.920,0:10:52.480
Yeah, there is another version
of doing the same stuff which is

0:10:53.440,0:11:00.160
based on the other implementation
we had within last week.

0:11:00.160,0:11:05.600
There we had something like this here.

0:11:06.400,0:11:15.520
I think, oh this one this part here was a negate,
so actually we wrote it like this - negate.

0:11:17.520,0:11:24.120
And let me just choose this scene in
order to demonstrate the other part

0:11:24.120,0:11:28.640
- so this is exactly the same
movement as before without

0:11:30.400,0:11:36.560
changing the parts of the
rotation and adding the moon. So.

0:11:38.800,0:11:44.560
And what we have to do is roughly the same.

0:11:44.560,0:11:49.920
We first of all remove the start
and end points and just use t.

0:11:49.920,0:11:57.440
So I remove this min and
max here and we use just t.

0:11:59.280,0:12:03.360
And we remove start- and endpoint.

0:12:03.360,0:12:11.200
So, and if we do this now our sun should
continue to rotate the whole time.

0:12:12.560,0:12:17.840
Okay, and I stop this one again.

0:12:19.760,0:12:34.800
Now we can simply have the same guards here, so
we can introduce the same guards as below here.

0:12:35.520,0:12:42.480
So we say when this sine of
t is greater than 0 then we

0:12:45.040,0:12:46.360
use -

0:12:48.400,0:12:50.160
Oh this should.

0:12:54.400,0:13:00.000
I just figured out that I shouldn't have
changed the scene - in fact I should have

0:13:00.000,0:13:04.720
changed the sunOrMoon function in
order to have the same behaviour.

0:13:04.720,0:13:09.200
So let me rename this one to sun or moon

0:13:12.000,0:13:12.500
and

0:13:15.680,0:13:19.440
i keep the scene function here.

0:13:19.440,0:13:21.760
And this is sunOrMoon2 - okay.

0:13:22.880,0:13:24.480
I'm sorry for the confusion.

0:13:24.480,0:13:35.600
So, now we have the guard again here and
this is actually not complete yet, because -

0:13:35.600,0:13:47.840
oh we have a non-exhaustive patterns
match in function sunOrMoon.

0:13:50.800,0:14:01.840
This is because we have no case for the otherwise.

0:14:03.680,0:14:11.840
So it shall happen otherwise and let's
just make this one blank for the moment.

0:14:17.040,0:14:17.540
So!

0:14:19.440,0:14:32.480
And, yeah, we can apply the
same part as before - we -

0:14:32.480,0:14:37.360
or the same trick.

0:14:38.000,0:14:50.480
We can define a move here which
is again used for sun and moon.

0:14:51.040,0:14:57.840
And thus, we can because of if here -
well let me just introduce the moon here.

0:14:57.840,0:15:01.840
If we introduce the moon here
we don't see anything because

0:15:02.640,0:15:04.320
the moon is hidden behind the grass.

0:15:04.320,0:15:09.120
So we need to translate it and move
it as well, as we did with the sun.

0:15:11.120,0:15:20.000
So we introduce a new function move here again
as we did in the other case as well. And,

0:15:20.000,0:15:28.560
we take the, we take the rotated part here
again for moving. So I take this part here

0:15:31.680,0:15:34.800
and say move t shall be

0:15:40.400,0:15:45.200
the moving of the sun.

0:15:45.200,0:15:50.160
And then we have the moving of the moon again.

0:15:55.600,0:16:03.680
Yeah. Here's a missing bracket! So this one.

0:16:06.080,0:16:10.320
And of course I've missed
the picture we want to move.

0:16:11.040,0:16:20.240
So this is exactly as we want to
have it for moving sun and moon!

0:16:20.800,0:16:28.000
And again the moon is moving below the grass
this is because we have the - forgotten to

0:16:28.000,0:16:37.280
say that we want to change the
- the angle for the movement.

0:16:37.280,0:16:42.240
So, we want minus pi for the angles
because we want just to have the

0:16:43.520,0:16:46.480
rising and setting part above the grass.

0:16:47.040,0:16:52.000
And still when we do this we
see that the moon is rotating.

0:16:53.120,0:16:55.120
And this is not what we want!

0:16:55.120,0:17:00.000
We want the moon to move
just as smoothly as the sun.

0:17:00.800,0:17:05.360
We didn't have this issue in the other
case because we were translating using

0:17:06.080,0:17:08.240
cosine and sine functions.

0:17:08.240,0:17:11.840
In this case we have to fix this part.

0:17:13.280,0:17:19.520
And we can fix this part by

0:17:21.680,0:17:32.960
rotating the moon. So, and we can rotate the moon

0:17:35.920,0:17:40.320
just, in the, by using t again

0:17:42.400,0:17:42.900
So.

0:17:45.600,0:17:49.280
If we just we're using something like this

0:17:49.280,0:17:57.680
we can - because yeah, well - now
we rotate by t and we rotate, the,

0:18:00.080,0:18:07.360
the complete animation by using negate and now
we should see that the moon is not moving again.

0:18:07.360,0:18:11.920
Because - yeah - they are rotated in other parts.

0:18:11.920,0:18:14.640
However we have introduced another error.

0:18:14.640,0:18:18.080
The moon is pointing in the other direction.

0:18:18.080,0:18:19.200
How can we fix this?

0:18:19.840,0:18:24.480
Well this happened because - when we look here -

0:18:24.480,0:18:33.360
we have t set minus p and because
of t minus pi in this case and

0:18:33.360,0:18:41.440
just t in that case we have
rotated our moon by 180 degrees.

0:18:41.440,0:18:48.240
We can fix this part by introducing
the rotation in our move function.

0:18:49.280,0:18:53.360
So when we put the rotation in in here

0:18:55.280,0:19:03.040
then we use this t here which is t minus pi
in this case, or let's, to make it more clear:

0:19:03.040,0:19:07.200
I just say t prime here to
signify this is another t.

0:19:08.080,0:19:12.960
So we use here another t in
order to rotate the moon.

0:19:13.840,0:19:17.120
And when we do this one then we get

0:19:19.440,0:19:23.120
our animation with the moon
in the correct direction.

0:19:23.840,0:19:34.400
Okay. Now we can think about adding
some more stuff there we had stars

0:19:35.680,0:19:39.280
in the one animation I just want
to show something like this here.

0:19:40.160,0:19:43.280
So we can think about how to create a star.

0:19:43.840,0:19:53.440
And for simplicity of showing the stars
well i just added to the scene here

0:19:53.440,0:20:03.600
and we define now a new function or no
a new variable star which is a picture.

0:20:03.600,0:20:07.680
So it's just one star as a picture.

0:20:08.320,0:20:19.360
And - well, we have a choice of options in order
to create those parts I choose a polygon here!

0:20:19.360,0:20:28.480
And I think we can, well, we can draw a star

0:20:28.480,0:20:35.520
by giving the points of all the
parts that belong to the star.

0:20:36.480,0:20:42.720
I don't want to give all the parts
that's why I draw a part of this star.

0:20:45.760,0:20:54.360
And I used the solidPolygon function
which is defined in the API. So we can ...

0:20:57.600,0:21:04.880
solidPolygon - which gets a series
of points and draws a picture.

0:21:04.880,0:21:16.800
So, solidPolygon and I draw a bigger star,
just because I can think about the values more

0:21:16.800,0:21:23.920
easy so we start at point (1, 0) and then we go

0:21:25.360,0:21:47.360
to 0.25 and 0.25 and move up to 1 or 0 right and
now up to (0, 1) and then we add point zero zero.

0:21:49.200,0:21:56.320
And if you could follow me - we will now get
a polygon - which draws a part of a star.

0:21:56.320,0:22:01.600
So we're drawing here just one part of
the star and I want to have this star

0:22:01.600,0:22:04.800
all filled by having the other parts as well.

0:22:05.760,0:22:13.200
And, yeah, I could add more points
in order to draw the complete star.

0:22:14.000,0:22:23.280
But i choose another way here - which
is - using another function of CodeWord.

0:22:24.960,0:22:33.040
There is the 'reflected' function and this

0:22:34.080,0:22:41.360
reflects across a line through the
origin at this angle in radians.

0:22:42.160,0:22:47.600
So we can use a part of an object
and reflect it through the origin.

0:22:48.160,0:22:57.600
Okay, and i demonstrate this part by
applying this function to solid angle.

0:22:58.320,0:23:04.320
So we use reflected and in this case I

0:23:07.680,0:23:15.120
reflect it to the angle of 180
degrees, which is in radians pi.

0:23:16.240,0:23:24.960
And if i do this, then we get
the star part below here - okay?

0:23:27.440,0:23:32.640
But I do not want to have the reflection
- I want to have the original part as well

0:23:32.640,0:23:37.840
so i want to have this part combined with

0:23:40.640,0:23:41.200
this part.

0:23:41.200,0:23:43.440
Like, like this here, okay?

0:23:44.720,0:23:46.080
But I do not want to

0:23:48.080,0:23:55.120
duplicate the code, thus I introduce a function
which does this and I call this function 'mirrored'.

0:23:57.040,0:24:11.200
And mirrored has two parameters it has the angle
and the picture as values it gets and it returns

0:24:13.200,0:24:14.160
a picture again.

0:24:15.040,0:24:20.160
So we have an angle and a picture and we

0:24:20.160,0:24:27.440
return the reflected picture by
angle and the picture itself.

0:24:28.080,0:24:35.360
So. And if we use mirrored instead of reflected.

0:24:37.360,0:24:41.520
Well - We get half of a star.

0:24:42.160,0:24:47.120
And we can apply the same trick once
more in order to get the full star by

0:24:48.480,0:24:53.680
reflecting it across the y-axis.

0:24:54.320,0:24:58.000
And how can we reflect across the y-axis?

0:24:58.000,0:25:01.880
Well we mirrored by p or ...

0:25:02.400,0:25:15.440
so this is the horizontal reflection, but we can
rotate it by pi and a half which is 90 degrees

0:25:16.320,0:25:25.360
or mirror it at this axis and
then we get a complete star.

0:25:26.320,0:25:29.840
And now we can scale this one.

0:25:29.840,0:25:35.680
I use the 'dilated' function in
order to make it a bit smaller. And

0:25:38.240,0:25:42.080
so let's say one third of the original size.

0:25:42.080,0:25:43.920
So, now we have a little star.

0:25:43.920,0:25:55.840
And we can, if we want, we can colorise
the whole picture by applying coloured.

0:25:58.320,0:26:02.560
Yeah and now the line is
getting long already, so I

0:26:05.200,0:26:12.080
indent the code a bit in order
to make it more readable. So!

0:26:13.120,0:26:20.920
Now we have all the parameters for the star.

0:26:20.920,0:26:22.240
And have a little star here.

0:26:23.280,0:26:30.000
Okay. And we can add the star to the night sky.

0:26:31.360,0:26:43.680
Well we can do this by giving certain parameters
to moving the star to a certain part of the sky.

0:26:46.560,0:26:55.040
Yeah, so let's create a value of
stars which shall again be a picture.

0:26:56.320,0:27:05.840
And first of all let's say
stars are translated by,

0:27:08.240,0:27:12.240
yeah, a value of x and y -
let's just say five and eight.

0:27:12.880,0:27:21.840
And then the star - so and now - the star is here
and so now we can move one star to that position

0:27:22.960,0:27:25.840
well okay we have one star
here but we want to have more.

0:27:26.960,0:27:35.600
Luckily for this case we
have the function 'pictures'

0:27:38.160,0:27:38.660
which

0:27:42.960,0:27:45.680
takes a list of pictures and returns a picture.

0:27:46.560,0:27:49.040
And we already know about list comprehension.

0:27:49.040,0:27:53.120
So we can use list comprehension
in order to create a set of stars.

0:27:55.840,0:28:02.240
So we can say we want to have pictures
which are translated by x and y.

0:28:03.280,0:28:06.480
And we give a list of x and y's.

0:28:08.240,0:28:16.480
And the star, all stars,
shall be part of this list.

0:28:16.480,0:28:21.120
So, now we can add some values
where we want to position the stars,

0:28:21.120,0:28:26.160
and this can be any values you like

0:28:27.360,0:28:38.320
I just take values which are above the x-axis.

0:28:38.960,0:28:49.440
And then I choose some values on the
left hand side and so we have negative x

0:28:49.440,0:28:53.600
and some which are on the right
hand side with positive x.

0:28:53.600,0:28:55.920
So - this one was a mistake.

0:28:55.920,0:29:00.000
So I choose y values which are above zero!

0:29:00.000,0:29:03.120
And then they should fill the sky.

0:29:03.760,0:29:08.880
And well we can just add some
stars and then we have a star sky.

0:29:09.840,0:29:13.840
Sure, of course we just want
to have these stars at night!

0:29:13.840,0:29:22.640
So we add them in our 'sunOrMoon' function and
say we have stars only when the moon is there.

0:29:22.640,0:29:29.520
So we say stars & move .. moon and then we have

0:29:31.920,0:29:39.360
the moon only when - when the - or
the stars only when it is night. So!

0:29:39.360,0:29:54.720
Okay. And instead of choosing the positions
for the stars by - yeah - by giving values

0:29:54.720,0:30:00.960
you can of course use different variations of
the list comprehension features in order to

0:30:02.400,0:30:10.560
generate a set of x and y coordinates in
order to distribute stars across the sky.

0:30:11.840,0:30:20.880
And maybe to do some fancy stuff like
have these stars aligned like within

0:30:20.880,0:30:27.760
the European Union flag or something like
this; using rotation and so on and so far.

0:30:27.760,0:30:31.680
But I won't demonstrate this
here, so I will stop right here.

0:30:31.680,0:30:39.920
And yeah, I just give the basics for this task.
