0:00:00.640,0:00:04.160
Task number 23.
In this task we're going to use

0:00:04.160,0:00:07.120
divideAndConquer just like we did last week.

0:00:07.920,0:00:11.760
So, the definition of the
function itself is still the same.

0:00:12.800,0:00:18.240
The difference is that this time we're going
to make a function called “findSatisfying”,

0:00:18.880,0:00:20.080
and we're going to use

0:00:20.880,0:00:23.200
divideAndConquer in this function.

0:00:24.400,0:00:28.000
So, this function "findSatisfying"

0:00:29.360,0:00:33.920
should take a range and…

0:00:35.280,0:00:39.200
No. First of all, it should take
a condition like a predicate,

0:00:39.200,0:00:40.640
which is a function that takes

0:00:41.840,0:00:45.680
an integer and returns a boolean (True or False),

0:00:45.680,0:00:48.400
and takes a range from

0:00:49.280,0:00:51.360
some number to some other number.

0:00:52.160,0:00:54.160
We're just going to call them a and b.

0:00:55.920,0:00:57.840
And then, it gives us “True” or “False”,

0:00:58.560,0:01:04.480
so, whether there is any number from a to b

0:01:05.280,0:01:07.680
that fulfills this condition,

0:01:08.880,0:01:11.840
so, if there is a number at least,

0:01:12.480,0:01:19.360
here in this range, that if you put it
into this function, it gives you True.

0:01:20.800,0:01:24.720
So, the first parameter that we're going
to give to divideAndConquer is this one,

0:01:25.440,0:01:29.200
which is a predicate that tests
whether an input is simple enough.

0:01:29.200,0:01:34.560
And it has this type signature.
Now what does “simple enough” mean in this case?

0:01:35.360,0:01:42.800
So, last week we had lists and we said
that when we have, for example, this list.

0:01:44.720,0:01:50.720
And this list here is not simple enough
because it consists of more than one element.

0:01:51.760,0:01:54.160
It has five.
So, we divide it

0:01:56.320,0:02:00.720
somehow and then we get such a list.
This one is still not simple enough.

0:02:01.360,0:02:06.320
This one is simple enough.
So, why is it simple enough?

0:02:06.320,0:02:11.200
Because we can test the only
element left in this list.

0:02:11.200,0:02:14.320
We can just test it. We can deal with it directly.

0:02:15.600,0:02:19.840
And what about the empty list?
Well… The empty list is also simple enough

0:02:21.040,0:02:25.200
because it has no elements.
It doesn't need to be divided anymore.

0:02:26.080,0:02:31.600
So, what about this week?
This week, we have the

0:02:31.600,0:02:39.360
beginning and the end of the range.
So, let's say I want the numbers from one to five.

0:02:42.960,0:02:47.040
Then we get these numbers.
Let's say I want the numbers from one to two.

0:02:48.160,0:02:51.680
We get these.
Let's say I want from one to one.

0:02:52.560,0:02:56.800
We get just one.
And what if we

0:02:56.800,0:03:03.840
say I want numbers from three to one?
Then we get the empty list.

0:03:05.040,0:03:11.920
This means we have a function
here that takes a and b

0:03:13.280,0:03:18.320
and it gives us True only
when we have a equal to b,

0:03:18.320,0:03:23.680
which is this case,
or when we have a bigger than b which is

0:03:24.800,0:03:36.960
this case, for example.
This means we say a is bigger or equal to b.

0:03:39.680,0:03:44.560
So, the second parameter that we're going to give
to the function divideAndConquer is this one,

0:03:45.200,0:03:52.320
which is a function that computes
the output directly for simple cases.

0:03:52.960,0:03:56.320
And it has this type signature.
Now as we discussed here,

0:03:56.960,0:04:01.360
the simple cases... the only
case is that this function

0:04:05.520,0:04:06.640
considers simple,

0:04:07.440,0:04:14.240
are when a is equal to b, which means
that our range has exactly one number,

0:04:14.240,0:04:19.200
and when a is bigger than b,
which means our range is empty.

0:04:20.560,0:04:26.080
So, what do we do when we have one
element… I mean one number in our range?

0:04:26.080,0:04:31.040
It's easy. We just apply p to it and
see if it gives us True or False.

0:04:32.400,0:04:36.880
And now what do we do when we have an empty range?

0:04:39.200,0:04:44.160
When we have the empty range,
our function should give us False

0:04:44.160,0:04:49.360
because if you think about it,
no matter what condition p is,

0:04:50.320,0:04:55.040
there are no numbers in this
range that can fulfill it.

0:04:55.680,0:04:59.600
So, yes it should give us False.
Let's write the function now.

0:05:01.600,0:05:09.120
The function takes a tuple a and b (a,b).
Actually, there is a mistake here.

0:05:09.120,0:05:18.000
This also should be a tuple (a,b).
And it gives you True only

0:05:19.280,0:05:24.320
when we have a equal to b,
which means we have exactly one

0:05:24.320,0:05:27.440
number in our range,
and at the same time

0:05:30.560,0:05:37.840
this number (let's take a or b, it
doesn't matter) fulfills the condition p

0:05:41.200,0:05:50.400
Now the third parameter that we're going to give
to divideAndConquer is a function that splits a

0:05:50.400,0:05:57.520
non-simple input into two smaller ones.
And it has this type signature.

0:05:57.520,0:06:05.200
So, it takes a range from a to b,
and then it gives you two ranges…

0:06:05.200,0:06:09.840
two new ranges to… the two
halves of the original range.

0:06:12.800,0:06:13.680
So, the function…

0:06:16.800,0:06:24.640
Actually, I forgot to close this.
Okay… So, the function takes a and b

0:06:27.840,0:06:30.240
and returns two ranges,

0:06:31.200,0:06:36.080
the first of which starts with
a and ends with, let's say, m.

0:06:38.000,0:06:47.840
And the second one starts
with m+1 and ends with b.

0:06:50.000,0:06:54.960
And what is m?
m is a+b/2.

0:07:03.360,0:07:08.720
And now the last parameter that we're going
to give to the function divideAndConquer.

0:07:08.720,0:07:14.000
It is a function to combine the
outputs of two sub-computations,

0:07:14.000,0:07:18.400
and it has this type signature.
Now what does this mean?

0:07:18.400,0:07:23.680
It means that we already tested
two numbers, let's say x and y,

0:07:24.720,0:07:33.360
and we have the results of the test,
whether x and y fulfill the predicate p,

0:07:35.120,0:07:39.760
and we have True or False for x
and we have True or False for y,

0:07:40.480,0:07:47.920
and now we want to decide what we should get.
So, if one of these two numbers

0:07:47.920,0:07:52.160
at least is True,
so, one of these two numbers

0:07:52.160,0:07:57.840
at least fulfills the predicate p,
then we should get True.

0:07:58.960,0:08:04.080
Otherwise, if both of them are
False, then we should get False.

0:08:06.480,0:08:12.320
And what I just said is actually
the definition of the logical “or”.

0:08:12.320,0:08:16.960
And the logical “or” in Haskell
is just like any other function.

0:08:18.160,0:08:27.200
It is a function that takes two boolean
values and gives us one boolean value.

0:08:28.400,0:08:34.400
This means it already fits to what we need here.
So, how about we just write it here?

0:08:37.040,0:08:40.640
And now, I think we are done.
Let's test it.

0:08:42.880,0:08:44.640
So, I'm going to open the file.

0:08:47.840,0:08:52.640
Main.
Yes. As you can see, it is working!
