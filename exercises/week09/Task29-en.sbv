0:00:00.960,0:00:03.000
Before I do task 29,

0:00:03.000,0:00:06.000
I'm going to show
you an example of the function "foldr".

0:00:07.520,0:00:09.600
As you can see, we have a function f here.

0:00:10.320,0:00:13.440
And we're defining something called a.

0:00:14.720,0:00:16.400
And a is equal to foldr

0:00:17.920,0:00:23.920
with this function, and the c as 0, and this list.

0:00:25.040,0:00:29.920
And this a evaluates to the following.

0:00:29.920,0:00:32.160
So, what you're doing here is:

0:00:33.040,0:00:35.920
f of two things... two parameters.

0:00:35.920,0:00:37.760
This is the x and this is the y.

0:00:39.280,0:00:44.080
And the y itself is f of 2 and this.

0:00:45.360,0:00:48.240
And this is also f of 1 and 0.

0:00:49.280,0:00:52.480
So, what is f of 1 and 0?

0:00:52.480,0:00:54.480
It is 1.

0:00:55.520,0:00:56.720
And then you get this.

0:00:57.280,0:01:00.080
You continue… you do the same
and you get 11 in the end.

0:01:01.040,0:01:09.520
So, at the beginning, when dealing with the
function foldr, it's nice to do some evaluation

0:01:10.160,0:01:16.320
to practice using it, by doing some
examples like this, and trying to calculate…

0:01:16.320,0:01:18.640
trying to guess what the result would be.

0:01:20.080,0:01:21.200
...

0:01:21.200,0:01:22.480
This is my guess.

0:01:22.480,0:01:26.160
Now let's see if this is true.

0:01:26.160,0:01:30.320
So, now I just write a and, yes, we get 11.

0:01:31.920,0:01:34.960
Okay, so now let's do the task. We have this.

0:01:34.960,0:01:36.720
This is the original function.

0:01:36.720,0:01:38.960
We need to write it with foldr.

0:01:40.800,0:01:50.000
Let's say, for example, we have this list and we want to evaluate “original” of this list.

0:01:50.000,0:01:55.200
So, we want to evaluate the application of this function on this list.

0:01:59.360,0:02:01.680
The first number in this list is 11.

0:02:01.680,0:02:03.200
And it fulfills this condition.

0:02:04.400,0:02:09.680
So, we get 13 + the “original”
of the “tail” of the list.

0:02:11.280,0:02:12.480
Then we do the same.

0:02:12.480,0:02:19.840
We have 22. And 22 also fulfills the condition.

0:02:19.840,0:02:24.880
So, we get another 13 + “original”
of the “tail” of the list.

0:02:26.320,0:02:30.240
Now we have 1, so it doesn't
fulfill this condition.

0:02:30.800,0:02:36.080
So, we get x multiplied by
“original” of the “tail” of the list.

0:02:37.680,0:02:43.440
And our x, in this case, is 1. So, we get
1 multiplied by “original” of this list.

0:02:45.280,0:02:50.080
We continue. We do the same. So, now we have 2.

0:02:50.080,0:02:56.560
It stays as it is, and we multiply by
“original” of the list which contains only 33.

0:02:57.200,0:03:04.000
But this time, 33 fulfills the condition, so we get
13 + “original” of the “tail” of the list,

0:03:04.000,0:03:10.480
which is the empty list. And now we are at this case: the “origin” of the empty list is 7.

0:03:12.000,0:03:20.800
Now we have just numbers. So, 13 + 7
is 20. 20 multiplied by 2 and so on…

0:03:20.800,0:03:35.360
until we reach the final result which
is 66. Let's test this. Yes, it is 66.

0:03:37.280,0:03:45.840
Okay, now let's make a function
f. And it takes x and y.

0:03:46.560,0:03:54.880
x is going to be this x and y is going to be
“original” applied to the “tail” of the list.

0:03:56.960,0:04:04.480
So, we say: if x fulfills this
condition, then we just do 13,

0:04:04.480,0:04:12.000
and we add it to, as you can see, y, which
is “original” of the “tail” of the list.

0:04:12.000,0:04:18.000
So, we have 13 + “original”
of the “tail” of the list.

0:04:19.200,0:04:23.440
If it doesn't fulfill the
condition, then we have x as it is,

0:04:24.320,0:04:26.560
multiplied by “original”
of the “tail” of the list,

0:04:26.560,0:04:28.400
which is this case here.

0:04:29.600,0:04:34.800
1 is x, and “original” of
the “tail” of the list is y.

0:04:36.480,0:04:39.200
Now let's write the function “alternative”.

0:04:39.200,0:04:43.520
So, “alternative” takes a list of
integers and gives a single integer.

0:04:46.640,0:04:50.560
Foldr… And we use this function here,

0:04:54.480,0:04:58.560
and we give it a starting value which is 7.

0:05:02.320,0:05:07.600
And then we write the list. But as you
can see, we have “list” here and here,

0:05:07.600,0:05:10.720
and it is the last argument on the right side.

0:05:12.080,0:05:14.080
So, we can just do eta reduction.

0:05:15.120,0:05:18.000
And this means we don't need to write this at all.

0:05:20.720,0:05:37.840
Now I'm going to do the
function f as a lambda function.

0:05:43.280,0:05:51.840
And that's it. Now let me test the solution.

0:05:52.560,0:05:55.680
Main. And as you can see, it is working.

0:05:57.280,0:06:02.000
Now just to make sure, I'm going to do evaluation.

0:06:03.120,0:06:07.840
And I copy the definition of the
function “foldr” from the lecture slides.

0:06:10.400,0:06:13.440
I'm going to use the same list here.

0:06:19.200,0:06:22.160
But this time we're doing it with “alternative”.

0:06:22.160,0:06:25.840
So, we say: “alternative” of this list.

0:06:29.440,0:06:32.320
And we're going to follow
the definition step by step.

0:06:33.280,0:06:36.640
So, is the list empty? No, it's not empty.

0:06:37.440,0:06:39.440
So, we go to this case here.

0:06:42.240,0:06:48.160
And we get f x, which is the
first number, which is 11.

0:06:49.840,0:06:57.840
And then, in brackets, we have foldr
f and the initial value which is c,

0:07:00.560,0:07:08.960
which is 7, and the “tail”
of the list [22, 1, 2, 33].

0:07:14.480,0:07:18.400
What is foldr f 7 and tail of the list?

0:07:19.360,0:07:23.440
Again, the list is not
empty, so we go to this case,

0:07:23.440,0:07:30.160
and we get f and the first element, which is 22.

0:07:30.160,0:07:44.720
And in brackets, we have foldr f
7 the tail of the list [1, 2, 33].

0:07:47.120,0:07:59.840
Again f 11... f 22 foldr. No... so, foldr of
this is going to be the first element.

0:08:05.360,0:08:13.520
I mean f then x, which is the first element, and then, again in brackets, we're going to have foldr

0:08:16.400,0:08:25.840
f 7 the tail of the list.

0:08:38.000,0:08:39.840
2

0:08:44.240,0:09:07.840
and f 2... foldr f 7 and the list containing 33. I'm just going to copy this.

0:09:12.320,0:09:14.240
Then here we're going to have

0:09:19.280,0:09:28.960
f 33.

0:09:29.760,0:09:36.160
And then, in brackets, we're going
to have foldr f 7 the empty list.

0:09:40.000,0:09:46.560
Now we know what foldr does with an empty list.

0:09:46.560,0:09:47.920
It just gives us c.

0:09:48.720,0:09:50.640
And c, in our case, is 7.

0:09:50.640,0:09:52.000
So, here we have 7.

0:09:55.280,0:10:01.520
Now what is f of 33 and 7?

0:10:02.480,0:10:03.840
So, let's look here.

0:10:04.480,0:10:08.400
Is 33 mod 11 equal to 0?

0:10:08.400,0:10:13.520
Yes. This means we get 13 + y,
which is the second argument,

0:10:13.520,0:10:25.840
which is, in our case, this 7. So, this
means here we get 13 + 7, which is 20.

0:10:31.360,0:10:34.800
So, now what is f of 2 and 20?

0:10:35.840,0:10:38.800
Is 2 mod 11 equal to 0?

0:10:38.800,0:10:39.280
No.

0:10:39.280,0:10:47.520
So, we get x multiplied by y, which means 40.

0:10:49.920,0:10:52.640
Now again, what is f of 1 and 40?

0:10:53.360,0:10:56.400
1 mod 11 is not equal to 0.

0:10:56.400,0:10:59.360
So, this means we get x multiplied by y.

0:10:59.360,0:11:05.120
We get 40 multiplied by 1, which is 40.

0:11:10.320,0:11:15.040
f of 22 and 40 is 13 + 40.

0:11:23.040,0:11:25.280
So, it is 53.

0:11:26.880,0:11:37.280
Now what is f of 11 and 53? So, 11 mod 11 is 0.

0:11:37.280,0:11:42.800
This means we get 13 + 53.

0:11:48.160,0:11:53.200
And now we have 66, which is the
same result that we got here.

0:11:54.800,0:11:55.840
And that's it.
