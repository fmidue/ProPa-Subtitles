
0:00:00.000,0:00:05.880
Hallo, für diese Aufgabe haben wir ein paar
algebraische Datentypen gegeben, 'Animal' und

0:00:05.880,0:00:13.350
'Bit', und ihre Konstruktoren 'Cat', 'Dog' und
'Bird', und 'O' und 'I'; aber da wir vom Bits

0:00:13.350,0:00:19.020
sprechen, werde ich die einfach nur als Null und
Eins benennen, weil wir hier von Bits reden und es

0:00:19.020,0:00:26.550
einfacher auszusprechen ist. Unsere eigentliche
Aufgabe hier ist es, die 'encode' und 'decode'

0:00:26.550,0:00:34.620
Funktionen zu implementieren. Die 'encode'
Funktion macht aus Listen vom Typ 'Animal' Listen

0:00:34.620,0:00:40.440
vom Typ 'Bit', und die 'decode' Funktion macht
das Gegenteil; also für eine Eingabeliste vom

0:00:40.440,0:00:48.660
Typ 'Bit' sollen wir eine Liste vom Typ 'Animal'
zurückkriegen, aber in 'Maybe' verpackt, wegen

0:00:48.660,0:00:54.810
der Voraussetzungen, die wir hier unten haben,
nämlich dass es für jede Liste vom Typ 'Bit', für die

0:00:54.810,0:01:00.960
es keine originale Liste vom Typ 'Animal' gibt,
soll 'decode' einfach nur 'Nothing' zurückgeben.

0:01:00.960,0:01:10.050
Im Umkehrschluss muss dann auf jede Liste vom Typ
'Bit', die von 'encode' produziert werden kann,

0:01:10.050,0:01:17.070
die Funktion 'decode' angewandt werden, die dann
die originale Liste wiedergeben,

0:01:17.070,0:01:20.820
halt nur in einem 'Just' verpackt. Das heißt,
wenn wir 'encode' hier einmal durchlaufen lassen,

0:01:20.820,0:01:25.740
bauen wir uns eine Liste vom Typ 'Animal';
'Gencode' gibt uns eine Liste vom Typ 'Bit'

0:01:25.740,0:01:31.050
und wir lassen diese Liste dann durch das 'decode'
laufen; dann soll sie uns die originale Liste, die

0:01:31.050,0:01:37.680
wir in 'Gencode' reingegeben haben, wiedergeben,
nur halt in diesem 'Maybe' verpackt; weil wir halt

0:01:37.680,0:01:38.580
den Fall haben können, dass es auch 'Nothing' sein
kann, weswegen es in einem 'Maybe' verpackt ist.

0:01:38.580,0:01:46.380
Damit das auch so funktionieren kann, müssen wir
uns natürlich eine Enkodierungsstrategie ausdenken,

0:01:46.380,0:01:54.330
und unser 'Task' sagt uns auch, wir sollen eine
möglichst platzeffiziente Enkodierung ausdenken,

0:01:54.330,0:02:03.120
die nicht unnötig lange Bitlisten für jedes
'Animal' generiert. 'encode' arbeitet jetzt

0:02:03.120,0:02:06.330
direkt auf einer Liste von 'Animals'. Um uns
das Ganze ein bisschen einfacher zu machen,

0:02:06.330,0:02:11.280
schreiben wir uns eine 'encodeAnimal' Funktion,
die nur auf einem einzelnen 'Animal' arbeitet

0:02:11.280,0:02:18.420
und das zu einer Liste von Bits kodiert.
Wir brauchen hier eine Liste von Bits,

0:02:18.420,0:02:25.830
da wir drei 'Animals' haben, aber nur zwei Bits.
Das heißt, wir können keine Eins-zu-eins-Kodierung

0:02:25.830,0:02:30.720
hier machen, ein Bit für ein Tier, sondern ein
paar von diesen 'Animals' müssen zwangsweise

0:02:32.250,0:02:39.480
zu mehreren Bits kodiert werden. Das wollen wir
jetzt Schritt für Schritt machen; 'encodeAnimal'

0:02:39.480,0:02:46.470
für 'Cat', und da sagen wir dann einfach Eins
und Eins. Ich könnte natürlich mehr machen,

0:02:46.470,0:02:51.120
aber das wäre nicht mehr platzeffizient, da wir
ja nur drei Tiere haben. Das heißt, das längste,

0:02:51.120,0:02:59.160
das wir überhaupt haben sollten an Bitlisten,
sind zwei Bits. 'encodeAnimal' für 'Dog',

0:02:59.160,0:03:10.440
schreiben eine Eins und machen dann eine
Null. Und 'encodeAnimal' für 'Bird' ist jetzt ein

0:03:10.440,0:03:17.100
bisschen kniffliger; der erste Gedanke ist,
wir sagen Null und Null oder Null und Eins,

0:03:17.100,0:03:23.760
aber hier können wir auch direkt Platz sparen,
denn wir haben kein viertes 'Animal', also

0:03:23.760,0:03:31.140
brauchen wir nicht zwei Bits, also können
wir das auf ein Bit, das Null-Bit, reduzieren. Wir

0:03:31.140,0:03:39.480
können nicht das Ein-Bit benutzen, denn so könnte
man am Ende in der nicht voneinander getrennten

0:03:39.480,0:03:45.750
Liste von Bits nicht mehr unterscheiden,
wo ein Tier anfängt und wo es aufhört. Also

0:03:45.750,0:03:51.750
wenn wir eine Liste von Eins, Eins, Null zum
Beispiel hätten, dann könnten wir nicht sagen:

0:03:53.220,0:04:00.060
Sind jetzt die ersten beiden direkt 'Bird'
und ist das letzte einfach nur falsch kodiert,

0:04:02.460,0:04:06.540
oder ist das ein 'Bird' und ein 'Dog', oder ist
das eine Katze und dann falsch kodiert? Das können

0:04:06.540,0:04:11.160
wir dann nicht mehr unterscheiden. Also müssen
wir hier dann zwangsweise das Null-Bit benutzen,

0:04:12.440,0:04:18.380
und das 'encodeAnimal' müssen wir mit einer
ganzen Liste an 'Animal' in 'encode' anwenden.

0:04:18.380,0:04:24.080
Das können wir logischerweise mit 'map' machen,
wo wir 'encodeAnimal' einfach auf die Eingabeliste

0:04:24.080,0:04:31.490
aufrufen; aber damit würden wir einfach nur eine
Liste von Listen mit Bits kriegen. Das wollen

0:04:31.490,0:04:34.910
wir nicht. Wir wollen nur eine flache Liste von
Bits. Das heißt, wir müssen das jetzt noch mit

0:04:34.910,0:04:43.790
'concat' flach machen, und weil dieses 'concat'
'map'-Konstrukt in dieser Form so oft vorkommt,

0:04:43.790,0:04:50.060
gibt es direkt eine 'concatMap'-Funktion,
die das direkt kombiniert, und damit hätten

0:04:50.060,0:04:57.710
wir dann unsere 'encode'-Funktion fertig. Jetzt
müssen wir nur noch die dazu passende 'decode'

0:04:59.990,0:05:02.510
Funktion schreiben. Die 'decode'-Funktion
kriegt als Parameter eine Liste von Bits,

0:05:02.510,0:05:07.040
das heißt, wir müssen jetzt erst mal auf
den simpelsten Fall von einer Listeneingabe

0:05:07.040,0:05:13.850
gucken; die leere Liste, und eine leere Liste
vom Typ 'Bit' ist auch eine valide Liste vom

0:05:13.850,0:05:19.250
Typ 'Animal', weil es auch eine Liste geben
kann, in der kein 'Animal' ist. Das ist immer

0:05:19.250,0:05:24.650
noch eine valide Liste vom Typ 'Animal'. Jetzt
geben wir nur 'Just' die leere Liste zurück. Dann



0:05:24.650,0:05:30.050
haben wir jetzt den einzigen Fall, wo wir eine
invalide Kodierung haben, nämlich die Liste mit

0:05:30.740,0:05:36.590
nur einem Einser-Bit drinnen. Weil wir haben kein
'Animal', das nur zu einem Einser-Bit kodiert. Da

0:05:36.590,0:05:42.620
würden wir dann das 'Nothing' verwenden
und das 'Nothing' zurückgeben. Und jetzt

0:05:42.620,0:05:50.390
müssen wir anfangen zu gucken. Am besten den
ersten Fall nehmen wir für 'Bird', die Liste

0:05:50.390,0:05:55.280
fängt mit einem 'Bird' an, also machen wir direkt
hier unser Pattern-Matching auf die Liste, die mit

0:05:55.280,0:06:03.740
einer Null anfängt und gucken uns dann rekursiv
den Rest der Liste an. Das können wir jetzt

0:06:03.740,0:06:12.470
hier mit Guards machen. Wir müssen gucken, ob
der Rest der Liste eine valide Liste ist, also

0:06:13.550,0:06:24.447
benutzen wir 'isNothing', um zu gucken, ob unsere
Dekodierung der Restliste, der Rekursionsschritt

0:06:24.447,0:06:26.570
'decode xs', 'Nothing' zurückgibt. Also ob
irgendwo eine invalide Kodierung gefunden

0:06:26.570,0:06:33.230
wird. In dem Fall geben wir 'Nothing' zurück,
weil eine invalide Kodierung in der Liste die

0:06:33.230,0:06:40.940
ganze Liste invalide macht. Unser 'otherwise'
Fall ist dann, wenn es nicht passiert ist, also

0:06:40.940,0:06:48.260
der Rest der Liste okay ist, dann geben wir 'Just'
zurück und in dem Fall unser Null-Bit dekodiert

0:06:48.260,0:06:56.390
zu 'Bird' und dann gucken wir uns den Rest der
Liste an. Den bekommen wir als 'Maybe' zurück,

0:06:56.390,0:07:01.400
also als 'Just' und dann den Rest der Liste hinten
dran gehängt. Das heißt, wir müssen das erst mal

0:07:01.400,0:07:08.780
aus dem 'Maybe' herausholen mit 'fromJust' und
das ist dann wieder unser Rekursionsschritt, das

0:07:08.780,0:07:15.890
Dekodieren des Rests der Liste. An dieser Stelle
sollten wir sehen: Wir benutzen jetzt zweimal den

0:07:15.890,0:07:21.770
Rekursionsschritt. Das ist nicht so gut. Nicht nur
weil das Code-Duplikation ist, sondern auch weil

0:07:21.770,0:07:29.390
der Rekursionsschritt eine aufwendige Operation
ist. Das heißt, wir lagern das erst mal in einem

0:07:29.390,0:07:38.480
'where' aus. Wir nennen das einfach 'rest' und
dann 'decode xs', damit wir das nur einmal machen,

0:07:38.480,0:07:48.860
den Rekursionsschritt. Und damit haben wir die
Laufzeit schon mal halbiert. Damit wäre dann der

0:07:48.860,0:07:57.860
Fall gedeckt, dass die Liste mit 'Bird' anfängt.
Jetzt müssen wir die Fallunterscheidung machen: Es

0:07:57.860,0:08:02.540
fängt mit einem Einser-Bit an. Das heißt, es kann
entweder ein 'Cat' oder 'Dog' sein. Das heißt, wir

0:08:02.540,0:08:07.625
müssen uns auch das zweite Bit angucken, das
direkt danach folgt und dann wieder rekursiv den

0:08:07.625,0:08:12.560
Rest der Liste. Dann machen wir direkt Guards
und checken mit 'isNothing' den Rest der Liste,

0:08:12.560,0:08:19.060
ob da irgendeine falsche Kodierung gefunden
wurde. In dem Fall geben wir 'Nothing' zurück,

0:08:19.060,0:08:22.540
weil die Liste falsch ist an irgendeiner
Stelle und damit ist die ganze

0:08:22.540,0:08:29.500
Liste falsch. Unser 'otherwise' Fall wieder, wo
der Rest der Liste okay ist, geben wir wieder 'Just'

0:08:29.500,0:08:33.040
zurück. Jetzt können wir nicht einfach nur
'Cat' oder 'Dog' geben, sondern müssen hier

0:08:33.040,0:08:37.930
unterscheiden, indem wir das zweite Bit angucken.
Wenn das zweite Bit ein Einser-Bit ist, dann geben

0:08:37.930,0:08:47.110
wir 'Cat' zurück. Wenn das zweite Bit kein
Einser-Bit ist, dann muss es ein Null-Bit sein,

0:08:47.110,0:08:54.670
also geben wir 'Dog' zurück. Und dann wieder aus
dem 'Just' herausgeholt den Rest der Liste. Und

0:08:58.660,0:09:00.628
da ich hier schon die ganze Zeit 'rest' benutzt
habe, packen wir das auch wieder in den 'where'

0:09:00.628,0:09:07.660
Block rein, 'rest = decode xs' für die Rekursion
des Rests der Liste. An dieser Stelle sehen wir:

0:09:07.660,0:09:13.930
Dieses 'where' ist hier in beiden drin und
hier benutzen wir 'fromJust'. Das können

0:09:13.930,0:09:19.150
wir beides eliminieren, indem wir einfach
nur statt Guards Case Expressions benutzen.

0:09:19.990,0:09:24.550
Ich werde das jetzt einfach mal hier machen.
Bauen wir das hier um. Unser ersten Fall mit

0:09:24.550,0:09:30.520
dem 'Bird' bauen wir um in 'case' und dann
machen wir unseren Rekursionsschritt 'case

0:09:30.520,0:09:37.930
decode xs of' und dann gucken wir, was 'decode
xs' zurückgibt. Wenn die Rückgabe 'Nothing' ist,

0:09:37.930,0:09:48.640
also irgendwas schiefgelaufen ist an irgendeiner
Stelle, dann geben wir 'Nothing' zurück und wenn

0:09:48.640,0:09:53.500
das nicht der Fall ist, also der Rest der Liste
ist in Ordnung, dann können wir hier direkt mit

0:09:53.500,0:09:59.860
diesem Case Pattern hier gucken: 'Just' und dann
können wir direkt den Rest der Liste aus dem

0:10:01.210,0:10:07.480
'Just' hier herausnehmen, ohne 'fromJust' benutzen
zu müssen. Dann haben wir hier 'Just rest'. Dann

0:10:07.480,0:10:17.740
haben wir den Fall 'Just Bird', mit dem Null-Bit
am Anfang, und den Rest der Liste. Und dann haben

0:10:17.740,0:10:23.010
wir das auch schon direkt hier einfacher gemacht.
Das machen wir jetzt auch natürlich noch für den

0:10:23.010,0:10:36.901
letzten Fall. Da machen wir auch 'case decode xs
of'. Wieder, wenn irgendwo eine falsche Kodierung

0:10:36.901,0:10:40.020
gefunden wurde im Rest der Liste, dann geben
wir 'Nothing' zurück und dann nehmen wir den

0:10:40.020,0:10:47.700
Rest der Liste direkt so raus. Dann machen wir
unsere Fallunterscheidung, also 'if' hier

0:10:47.700,0:11:04.510
auf dem zweiten Bit. Wenn das zweite Bit ein
Einser-Bit ist, dann 'Cat' und 'else Dog' und

0:11:04.510,0:11:12.960
den Rest der Liste. Wenn wir das jetzt speichern
und hier im GHCi reinladen und den Test ausführen,

0:11:12.960,0:11:17.910
dann sehen wir: Der Test führt richtig
aus und wir haben die Aufgabe erledigt.

