0:00:00.960,0:00:02.960
Task number 33.

0:00:02.960,0:00:07.440
So, I'm going to read the function “while”
and try to understand how it works.

0:00:08.320,0:00:12.240
First, we have the type signature.
We have something of type “a”.

0:00:12.240,0:00:18.240
So, this “a” doesn't specify anything. This “a”
could be a String. It could be an Integer.

0:00:18.240,0:00:22.480
It could be a tuple that contains two things of two different types.

0:00:24.000,0:00:27.760
And then we have a function that takes something of type “a”

0:00:27.760,0:00:31.760
the same “a” as here and returns True or False.

0:00:31.760,0:00:34.720
So, you could imagine this function is

0:00:35.360,0:00:38.800
some kind of a “checker”. It checks whether something is fulfilled or not.

0:00:40.240,0:00:45.840
And then we have a function that takes something of type “a” and returns something of
type “IO a”.

0:00:46.720,0:00:47.520
For me,

0:00:47.520,0:00:55.440
if this were my first time reading this task,
I'd say this means that the function here is

0:00:55.440,0:01:02.080
going to be the body of the loop because we know what a while-loop is from other
courses…

0:01:02.080,0:01:13.040
from programming in general. And this “IO” here should indicate that this function has
a do-block.

0:01:13.760,0:01:18.080
And at the end of the do-block, we're going
to have “return” something of type “a”.

0:01:19.920,0:01:26.800
And then finally, we're going to have “IO a”. So, “while” takes these three
parameters.

0:01:27.440,0:01:30.960
The “a” is going to be just something of type “a” (anything).

0:01:30.960,0:01:35.280
And “p” is going to be the predicate... the “checker”…

0:01:36.320,0:01:38.400
this function that takes something of type “a”

0:01:38.400,0:01:42.480
and returns True or False. And “body” is going to be the body of the loop.

0:01:42.480,0:01:48.000
So, here we have the main operations, the things that we want to do with this loop.

0:01:49.680,0:01:55.440
And here we have “loop a” because “a” is going to be the only variable

0:01:55.440,0:01:59.360
that's going to change in value every time we go through the loop.

0:02:00.400,0:02:03.760
So, “body” is going to stay the same always because it's just

0:02:04.640,0:02:08.800
the function that we're going to apply, and “p” is the predicate,

0:02:09.520,0:02:11.920
but “a” is going to be the initial value

0:02:12.880,0:02:20.320
on which the function depends, and the while-loop knows when to stop.

0:02:20.320,0:02:22.560
Now “loop x” is a function that takes

0:02:23.200,0:02:28.400
just one argument “x” and then it checks whether “x” fulfills the predicate “p”.

0:02:29.520,0:02:38.800
And if it does, then we go to this do-block. In this new block, we do two things: first
we apply

0:02:38.800,0:02:44.640
the function “body”, which should be given as an argument by whoever uses this
function “while”,

0:02:45.600,0:02:47.600
and we just apply it to “x”,

0:02:48.720,0:02:54.960
and we store the result in a new “x”, and
then we do “loop” again on this new “x”.

0:02:55.920,0:03:02.560
But if the “x” doesn't fulfill the predicate, then we just return “x” itself. So, what we're
saying is:

0:03:03.280,0:03:09.600
take this “x” and see if it fulfills “p”, and then if it does,

0:03:09.600,0:03:13.040
then change something in it using the function “body”,

0:03:13.920,0:03:22.320
and then store the new value here, and apply “loop” again to this new value.
Otherwise,

0:03:22.320,0:03:32.320
if it doesn't fulfill the condition, then just
return it as it is. Now we have “undefined”

0:03:32.320,0:03:36.960
four times, and we need to replace them with something useful to make the function work.

0:03:37.920,0:03:43.440
And “while” takes, as you can see… it takes three arguments… three parameters.

0:03:44.640,0:03:51.440
So, this means these three “undefined”s are
going to be the parameters for “while”,

0:03:52.480,0:03:58.880
and the last one here is going to specify the type of this do-block,

0:03:59.600,0:04:08.720
which in turn specifies the type of “main” itself. What could this “undefined” be?

0:04:09.680,0:04:13.280
Well… if you look at the lecture slides, you can see that we have

0:04:13.280,0:04:20.640
some functions like “put string” (putStr) which has the type “IO” and also “print”,

0:04:22.480,0:04:25.520
but for example not “read line” (readLn) because “readLn” is

0:04:25.520,0:04:27.840
going to give us something of type “IO a”.

0:04:29.120,0:04:32.160
So, the first thing I'm going to give to this function “while”

0:04:32.160,0:04:36.800
is going to be this “a” which is the initial value.

0:04:38.000,0:04:43.520
And this “a” is going to be affected by the function “body”,

0:04:44.720,0:04:48.560
and then the value of this “a” is going to change every time.

0:04:49.680,0:04:52.800
And depending on this value, the loop is going to stop.

0:04:54.400,0:04:57.440
I'm going to use this “a”… this

0:04:57.440,0:05:03.200
parameter here as a counter to count how many numbers we have entered already.

0:05:03.760,0:05:10.320
So, this means we start with 0, and we're going to enter “n” numbers.

0:05:10.320,0:05:16.560
Let's see how we're going to express that. And this parameter is going to

0:05:16.560,0:05:21.760
be the predicate that checks whether we reached “n” or not.

0:05:23.280,0:05:25.280
Okay now, let's write the function.

0:05:29.440,0:05:31.920
So, I'm going to do “i” for “index”.

0:05:33.120,0:05:37.840
And then we check whether “i” is still smaller than “n”.

0:05:43.200,0:05:45.280
So, this is the “n” we're talking about.

0:05:45.280,0:05:49.840
And “i” is going to be whatever this predicate gets as a parameter.

0:05:51.200,0:05:58.240
Now, the parameter “body” is going to be a function. Let's look at the type signature.

0:05:58.240,0:06:00.960
So, it's going to be a function that takes something of type “a”

0:06:00.960,0:06:04.000
and gives us something of type “IO a”.

0:06:05.600,0:06:19.840
So, it basically changes the value of "a" and does some other stuff.

0:06:29.360,0:06:33.520
But here we have a problem: this "i" is not a String.

0:06:33.520,0:06:40.560
So, we cannot do concatenation with another String. So, we need to do "show i".

0:06:43.600,0:06:52.720
And now we read a number from the user. We say “x read line” (x <- readLn).

0:06:52.720,0:06:58.720
Here we have a "return". But we have a problem here which is that we want to send

0:06:58.720,0:07:03.760
two values to be used later in the next run of the loop,

0:07:03.760,0:07:11.600
which are "x" and "i". "i" is the counter and "x" is the value of the
factor that the user entered.

0:07:12.720,0:07:19.280
The solution to this problem is to use something that counts as one parameter,

0:07:20.320,0:07:27.920
but it actually contains information of two things. And for this, we can use a tuple.

0:07:29.440,0:07:35.440
So, I'm going to put the index first and I'm going to put the value of “x” second.

0:07:38.560,0:07:44.240
And this means we also have to change the initial value, which is this “a” we talked
about.

0:07:46.800,0:07:50.960
So, it's going to be a tuple. It's still going to have zero as an index.

0:07:50.960,0:07:54.320
And it's going to have one because

0:07:54.320,0:08:00.480
this here is going to be multiplied by the other factors that the user is going to enter,

0:08:00.480,0:08:03.920
and in multiplication, this "1" here is

0:08:03.920,0:08:07.920
a neutral element, which means it doesn't
affect the result of multiplication.

0:08:09.920,0:08:13.760
So, if we were doing addition instead of multiplication, we would

0:08:14.880,0:08:19.280
have "0" here because zero is the neutral element in addition.

0:08:22.000,0:08:29.120
And now we also have to change this one here. So, this one doesn't take just an
Integer… an index.

0:08:30.640,0:08:37.120
Now it takes a tuple that has the index first and then it has whatever as a second.

0:08:37.120,0:08:44.160
We don't care and we still check whether this "i" (this index) is still smaller than
n.

0:08:45.680,0:08:55.040
Now if you look here, what we just did is send the index as it is to the next run of
the loop,

0:08:55.040,0:08:59.680
and we send the x as it is to the next run of the loop, which is totally useless.

0:08:59.680,0:09:03.120
This means the loop is going to be stuck because "i" is not changing,

0:09:03.680,0:09:08.080
and x that the user entered is just going to be sent as it is.

0:09:08.080,0:09:12.480
There's no multiplication happening. This means this here needs to be changed.

0:09:13.440,0:09:22.480
So, this is going to be "i+1" which means:
the next run, this index is going to be 1,

0:09:23.440,0:09:27.680
and the next one is going to be 2, and so on until we reach n.

0:09:30.000,0:09:33.680
And here, this function "body" is still

0:09:33.680,0:09:38.080
taking just one parameter which is "i" (the index). This is not good.

0:09:38.960,0:09:47.200
So, we need to do i and the old value of x which is the factor that the user entered the
last time…

0:09:48.240,0:09:50.160
the last one of this loop.

0:09:51.120,0:10:00.720
Let's call it y. So, this means here we want the new x which the user has just

0:10:01.520,0:10:06.400
entered to be it with the old x which is y.

0:10:07.680,0:10:12.800
Now all we have to do is to change this last "undefined". So, I'm going to write

0:10:13.440,0:10:15.360
"putStrLn" here.

0:10:17.680,0:10:32.480
And then, yes, it's going to be a String.
So, we say: your result multiplication of,

0:10:38.400,0:10:46.960
and then "show n" which is this n here (the number of factors that the user wanted).

0:10:48.000,0:10:49.920
And then we do concatenation again.

0:10:57.280,0:11:01.600
And then we do "show" again. And now we want the result.

0:11:01.600,0:11:10.400
How do we get the result? Well… the result is stored in this here… this
"returned".

0:11:10.400,0:11:14.480
So, if you look here, this whole thing

0:11:15.360,0:11:24.880
is just applying "while" to these three parameters and then storing the result in
this variable.

0:11:27.040,0:11:36.560
But if you look at this line here, we have returned a tuple, which contains the index and
the result.

0:11:37.520,0:11:40.880
So, this is going to be the final result because every time it's

0:11:40.880,0:11:46.720
multiplying the new factor with the old factor that the user entered.

0:11:47.440,0:11:50.720
This means here it's also going to be a tuple.

0:11:52.080,0:11:57.640
And to deal with tuples, you can use 'fst' ("first") and 'snd' ("second").

0:11:58.160,0:12:03.360
So, the first of this tuple, for example, gives you this. And the second gives you this.

0:12:07.120,0:12:13.440
So, "return" has the index as first and the result as second. This means we write

0:12:18.240,0:12:23.920
the second of returned.

0:12:23.920,0:12:31.520
Now let's do a final check. So, the type signature of while is "a".

0:12:32.160,0:12:36.480
And then something that takes “a” and returns Boolean (Bool). Something that takes
“a”.

0:12:36.480,0:12:46.080
It returns "IO" of "a". And finally, we get "IO a". Let's see. So, here we
have something "a".

0:12:46.080,0:12:51.680
And just like I said, "a" doesn't specify anything. So, "a" could be a tuple.

0:12:51.680,0:12:53.200
There's no problem with that.

0:12:55.200,0:13:01.040
And then we have the predicate. This is a function that takes something of the same type
here.

0:13:01.040,0:13:09.360
it's a tuple and it returns True or False. And finally, we have "body"

0:13:10.560,0:13:14.160
which should take something of type "a" and return something of type "IO a".

0:13:14.960,0:13:23.040
This is type "a", and this here is "IO a" because this is "a". And we have
"return" here.

0:13:23.040,0:13:26.960
So, everything looks fine. Okay now let's test it.

0:13:29.120,0:13:34.560
So, let's do "main". Let's say I want to multiply four numbers.

0:13:37.200,0:13:39.680
2, 2, 3, 5.

0:13:42.000,0:13:49.520
As you can see, it is working. I still need to move this a little bit away from the word
factor.

0:13:50.240,0:14:02.800
Okay let's do it. Okay, space here and space here. And let's reload "main". Let's say
five numbers.

0:14:05.760,0:14:10.000
2, 2, 3, 3, 5.

0:14:10.880,0:14:16.160
Okay I still have a problem here which is:

0:14:16.800,0:14:20.800
whenever we enter the first factor, it says 0, the second, it says 1.

0:14:20.800,0:14:29.840
So, it's always one less than it's supposed to be. Let's fix it too.

0:14:34.320,0:14:43.600
Okay "main". 4… 2, 2, 3, 5. Yes, it's working!
